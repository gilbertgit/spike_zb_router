
spike_zb_router.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00003848  000038dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003848  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000aa4  0080020e  0080020e  000038ea  2**0
                  ALLOC
  3 .stab         00008178  00000000  00000000  000038ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000508e  00000000  00000000  0000ba64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00010af2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00010b08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006ae  00000000  00000000  00010c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000b4  00000000  00000000  000112d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000374  00000000  00000000  0001138a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__ctors_end>
       4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      1c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      28:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      30:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      34:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__vector_13>
      38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      48:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      4c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      68:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      6c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      70:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      74:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      78:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      7c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      80:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      84:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      88:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      8c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      90:	0c 94 95 18 	jmp	0x312a	; 0x312a <__vector_36>
      94:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__vector_37>
      98:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      9c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      a0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      a4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      a8:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__vector_42>
      ac:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      b0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      b4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      b8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      bc:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      c0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      c4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      c8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      cc:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      d0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      d4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      d8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      dc:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      e0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      e4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      e8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      ec:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      f0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      f4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      f8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      fc:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     100:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     104:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     108:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     10c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     110:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     114:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     118:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     11c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     120:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     124:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     128:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     12c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
     130:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>

00000134 <__trampolines_start>:
     134:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <nwkRxServiceDataInd>
     138:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <nwkTxAckWaitTimerHandler>
     13c:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <nwkDataReqTxConf>
     140:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <nwkRxDuplicateRejectionTimerHandler>
     144:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <nwkTxDelayTimerHandler>
     148:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <appDataInd>

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	d1 e8       	ldi	r29, 0x81	; 129
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61
     158:	00 e0       	ldi	r16, 0x00	; 0
     15a:	0c bf       	out	0x3c, r16	; 60

0000015c <__do_copy_data>:
     15c:	12 e0       	ldi	r17, 0x02	; 2
     15e:	a0 e0       	ldi	r26, 0x00	; 0
     160:	b2 e0       	ldi	r27, 0x02	; 2
     162:	e8 e4       	ldi	r30, 0x48	; 72
     164:	f8 e3       	ldi	r31, 0x38	; 56
     166:	00 e0       	ldi	r16, 0x00	; 0
     168:	0b bf       	out	0x3b, r16	; 59
     16a:	02 c0       	rjmp	.+4      	; 0x170 <__do_copy_data+0x14>
     16c:	07 90       	elpm	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	ae 30       	cpi	r26, 0x0E	; 14
     172:	b1 07       	cpc	r27, r17
     174:	d9 f7       	brne	.-10     	; 0x16c <__do_copy_data+0x10>

00000176 <__do_clear_bss>:
     176:	2c e0       	ldi	r18, 0x0C	; 12
     178:	ae e0       	ldi	r26, 0x0E	; 14
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	a2 3b       	cpi	r26, 0xB2	; 178
     182:	b2 07       	cpc	r27, r18
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
     186:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <main>
     18a:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <_exit>

0000018e <__bad_interrupt>:
     18e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000192 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
  HAL_Init();
     19a:	0e 94 a2 19 	call	0x3344	; 0x3344 <HAL_Init>
  SYS_TimerInit();
     19e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SYS_TimerInit>
  PHY_Init();
     1a2:	0e 94 41 03 	call	0x682	; 0x682 <PHY_Init>
  NWK_Init();
     1a6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <NWK_Init>
}
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	08 95       	ret

000001b0 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
  PHY_TaskHandler();
     1b8:	0e 94 c8 04 	call	0x990	; 0x990 <PHY_TaskHandler>
  NWK_TaskHandler();
     1bc:	0e 94 70 06 	call	0xce0	; 0xce0 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
     1c0:	0e 94 a7 01 	call	0x34e	; 0x34e <SYS_TimerTaskHandler>
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
  timers = NULL;
     1d2:	10 92 0f 02 	sts	0x020F, r1
     1d6:	10 92 0e 02 	sts	0x020E, r1
}
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <SYS_TimerStart>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	1f 92       	push	r1
     1e6:	1f 92       	push	r1
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	9a 83       	std	Y+2, r25	; 0x02
     1ee:	89 83       	std	Y+1, r24	; 0x01
  if (!SYS_TimerStarted(timer))
     1f0:	89 81       	ldd	r24, Y+1	; 0x01
     1f2:	9a 81       	ldd	r25, Y+2	; 0x02
     1f4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SYS_TimerStarted>
     1f8:	98 2f       	mov	r25, r24
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	89 27       	eor	r24, r25
     1fe:	88 23       	and	r24, r24
     200:	21 f0       	breq	.+8      	; 0x20a <SYS_TimerStart+0x2a>
    placeTimer(timer);
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	9a 81       	ldd	r25, Y+2	; 0x02
     206:	0e 94 6d 02 	call	0x4da	; 0x4da <placeTimer>
}
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <SYS_TimerStop>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <SYS_TimerStop+0x6>
     21a:	00 d0       	rcall	.+0      	; 0x21c <SYS_TimerStop+0x8>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	9e 83       	std	Y+6, r25	; 0x06
     222:	8d 83       	std	Y+5, r24	; 0x05
  SYS_Timer_t *prev = NULL;
     224:	1a 82       	std	Y+2, r1	; 0x02
     226:	19 82       	std	Y+1, r1	; 0x01

  for (SYS_Timer_t *t = timers; t; t = t->next)
     228:	80 91 0e 02 	lds	r24, 0x020E
     22c:	90 91 0f 02 	lds	r25, 0x020F
     230:	9c 83       	std	Y+4, r25	; 0x04
     232:	8b 83       	std	Y+3, r24	; 0x03
     234:	53 c0       	rjmp	.+166    	; 0x2dc <SYS_TimerStop+0xc8>
  {
    if (t == timer)
     236:	2b 81       	ldd	r18, Y+3	; 0x03
     238:	3c 81       	ldd	r19, Y+4	; 0x04
     23a:	8d 81       	ldd	r24, Y+5	; 0x05
     23c:	9e 81       	ldd	r25, Y+6	; 0x06
     23e:	28 17       	cp	r18, r24
     240:	39 07       	cpc	r19, r25
     242:	09 f0       	breq	.+2      	; 0x246 <SYS_TimerStop+0x32>
     244:	40 c0       	rjmp	.+128    	; 0x2c6 <SYS_TimerStop+0xb2>
    {
      if (prev)
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	9a 81       	ldd	r25, Y+2	; 0x02
     24a:	00 97       	sbiw	r24, 0x00	; 0
     24c:	59 f0       	breq	.+22     	; 0x264 <SYS_TimerStop+0x50>
        prev->next = t->next;
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	9c 81       	ldd	r25, Y+4	; 0x04
     252:	fc 01       	movw	r30, r24
     254:	20 81       	ld	r18, Z
     256:	31 81       	ldd	r19, Z+1	; 0x01
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	9a 81       	ldd	r25, Y+2	; 0x02
     25c:	fc 01       	movw	r30, r24
     25e:	31 83       	std	Z+1, r19	; 0x01
     260:	20 83       	st	Z, r18
     262:	09 c0       	rjmp	.+18     	; 0x276 <SYS_TimerStop+0x62>
      else
        timers = t->next;
     264:	8b 81       	ldd	r24, Y+3	; 0x03
     266:	9c 81       	ldd	r25, Y+4	; 0x04
     268:	fc 01       	movw	r30, r24
     26a:	80 81       	ld	r24, Z
     26c:	91 81       	ldd	r25, Z+1	; 0x01
     26e:	90 93 0f 02 	sts	0x020F, r25
     272:	80 93 0e 02 	sts	0x020E, r24

      if (t->next)
     276:	8b 81       	ldd	r24, Y+3	; 0x03
     278:	9c 81       	ldd	r25, Y+4	; 0x04
     27a:	fc 01       	movw	r30, r24
     27c:	80 81       	ld	r24, Z
     27e:	91 81       	ldd	r25, Z+1	; 0x01
     280:	00 97       	sbiw	r24, 0x00	; 0
     282:	01 f1       	breq	.+64     	; 0x2c4 <SYS_TimerStop+0xb0>
        t->next->timeout += timer->timeout;
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	9c 81       	ldd	r25, Y+4	; 0x04
     288:	fc 01       	movw	r30, r24
     28a:	60 81       	ld	r22, Z
     28c:	71 81       	ldd	r23, Z+1	; 0x01
     28e:	8b 81       	ldd	r24, Y+3	; 0x03
     290:	9c 81       	ldd	r25, Y+4	; 0x04
     292:	fc 01       	movw	r30, r24
     294:	80 81       	ld	r24, Z
     296:	91 81       	ldd	r25, Z+1	; 0x01
     298:	fc 01       	movw	r30, r24
     29a:	22 81       	ldd	r18, Z+2	; 0x02
     29c:	33 81       	ldd	r19, Z+3	; 0x03
     29e:	44 81       	ldd	r20, Z+4	; 0x04
     2a0:	55 81       	ldd	r21, Z+5	; 0x05
     2a2:	8d 81       	ldd	r24, Y+5	; 0x05
     2a4:	9e 81       	ldd	r25, Y+6	; 0x06
     2a6:	fc 01       	movw	r30, r24
     2a8:	82 81       	ldd	r24, Z+2	; 0x02
     2aa:	93 81       	ldd	r25, Z+3	; 0x03
     2ac:	a4 81       	ldd	r26, Z+4	; 0x04
     2ae:	b5 81       	ldd	r27, Z+5	; 0x05
     2b0:	82 0f       	add	r24, r18
     2b2:	93 1f       	adc	r25, r19
     2b4:	a4 1f       	adc	r26, r20
     2b6:	b5 1f       	adc	r27, r21
     2b8:	fb 01       	movw	r30, r22
     2ba:	82 83       	std	Z+2, r24	; 0x02
     2bc:	93 83       	std	Z+3, r25	; 0x03
     2be:	a4 83       	std	Z+4, r26	; 0x04
     2c0:	b5 83       	std	Z+5, r27	; 0x05

      break;
     2c2:	11 c0       	rjmp	.+34     	; 0x2e6 <SYS_TimerStop+0xd2>
     2c4:	10 c0       	rjmp	.+32     	; 0x2e6 <SYS_TimerStop+0xd2>
    }
    prev = t;
     2c6:	8b 81       	ldd	r24, Y+3	; 0x03
     2c8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ca:	9a 83       	std	Y+2, r25	; 0x02
     2cc:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
     2ce:	8b 81       	ldd	r24, Y+3	; 0x03
     2d0:	9c 81       	ldd	r25, Y+4	; 0x04
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	9c 83       	std	Y+4, r25	; 0x04
     2da:	8b 83       	std	Y+3, r24	; 0x03
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	00 97       	sbiw	r24, 0x00	; 0
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <SYS_TimerStop+0xd2>
     2e4:	a8 cf       	rjmp	.-176    	; 0x236 <SYS_TimerStop+0x22>

      break;
    }
    prev = t;
  }
}
     2e6:	26 96       	adiw	r28, 0x06	; 6
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	00 d0       	rcall	.+0      	; 0x2fe <SYS_TimerStarted+0x6>
     2fe:	1f 92       	push	r1
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	9c 83       	std	Y+4, r25	; 0x04
     306:	8b 83       	std	Y+3, r24	; 0x03
  for (SYS_Timer_t *t = timers; t; t = t->next)
     308:	80 91 0e 02 	lds	r24, 0x020E
     30c:	90 91 0f 02 	lds	r25, 0x020F
     310:	9a 83       	std	Y+2, r25	; 0x02
     312:	89 83       	std	Y+1, r24	; 0x01
     314:	10 c0       	rjmp	.+32     	; 0x336 <SYS_TimerStarted+0x3e>
    if (t == timer)
     316:	29 81       	ldd	r18, Y+1	; 0x01
     318:	3a 81       	ldd	r19, Y+2	; 0x02
     31a:	8b 81       	ldd	r24, Y+3	; 0x03
     31c:	9c 81       	ldd	r25, Y+4	; 0x04
     31e:	28 17       	cp	r18, r24
     320:	39 07       	cpc	r19, r25
     322:	11 f4       	brne	.+4      	; 0x328 <SYS_TimerStarted+0x30>
      return true;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	0c c0       	rjmp	.+24     	; 0x340 <SYS_TimerStarted+0x48>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	9a 81       	ldd	r25, Y+2	; 0x02
     32c:	fc 01       	movw	r30, r24
     32e:	80 81       	ld	r24, Z
     330:	91 81       	ldd	r25, Z+1	; 0x01
     332:	9a 83       	std	Y+2, r25	; 0x02
     334:	89 83       	std	Y+1, r24	; 0x01
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	00 97       	sbiw	r24, 0x00	; 0
     33c:	61 f7       	brne	.-40     	; 0x316 <SYS_TimerStarted+0x1e>
    if (t == timer)
      return true;
  return false;
     33e:	80 e0       	ldi	r24, 0x00	; 0
}
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <SYS_TimerTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
     34e:	ef 92       	push	r14
     350:	ff 92       	push	r15
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
     35e:	28 97       	sbiw	r28, 0x08	; 8
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
     36a:	80 91 b1 0c 	lds	r24, 0x0CB1
     36e:	88 23       	and	r24, r24
     370:	09 f4       	brne	.+2      	; 0x374 <SYS_TimerTaskHandler+0x26>
    return;
     372:	a6 c0       	rjmp	.+332    	; 0x4c0 <SYS_TimerTaskHandler+0x172>

  ATOMIC_SECTION_ENTER
     374:	8f e5       	ldi	r24, 0x5F	; 95
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	fc 01       	movw	r30, r24
     37a:	80 81       	ld	r24, Z
     37c:	8d 83       	std	Y+5, r24	; 0x05
     37e:	f8 94       	cli
    cnt = halTimerIrqCount;
     380:	80 91 b1 0c 	lds	r24, 0x0CB1
     384:	8e 83       	std	Y+6, r24	; 0x06
    halTimerIrqCount = 0;
     386:	10 92 b1 0c 	sts	0x0CB1, r1
  ATOMIC_SECTION_LEAVE
     38a:	8f e5       	ldi	r24, 0x5F	; 95
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	2d 81       	ldd	r18, Y+5	; 0x05
     390:	fc 01       	movw	r30, r24
     392:	20 83       	st	Z, r18

  elapsed = cnt * HAL_TIMER_INTERVAL;
     394:	8e 81       	ldd	r24, Y+6	; 0x06
     396:	88 2f       	mov	r24, r24
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	a0 e0       	ldi	r26, 0x00	; 0
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	aa 1f       	adc	r26, r26
     3a4:	bb 1f       	adc	r27, r27
     3a6:	9c 01       	movw	r18, r24
     3a8:	ad 01       	movw	r20, r26
     3aa:	22 0f       	add	r18, r18
     3ac:	33 1f       	adc	r19, r19
     3ae:	44 1f       	adc	r20, r20
     3b0:	55 1f       	adc	r21, r21
     3b2:	22 0f       	add	r18, r18
     3b4:	33 1f       	adc	r19, r19
     3b6:	44 1f       	adc	r20, r20
     3b8:	55 1f       	adc	r21, r21
     3ba:	82 0f       	add	r24, r18
     3bc:	93 1f       	adc	r25, r19
     3be:	a4 1f       	adc	r26, r20
     3c0:	b5 1f       	adc	r27, r21
     3c2:	89 83       	std	Y+1, r24	; 0x01
     3c4:	9a 83       	std	Y+2, r25	; 0x02
     3c6:	ab 83       	std	Y+3, r26	; 0x03
     3c8:	bc 83       	std	Y+4, r27	; 0x04

  while (timers && (timers->timeout <= elapsed))
     3ca:	3d c0       	rjmp	.+122    	; 0x446 <SYS_TimerTaskHandler+0xf8>
  {
    SYS_Timer_t *timer = timers;
     3cc:	80 91 0e 02 	lds	r24, 0x020E
     3d0:	90 91 0f 02 	lds	r25, 0x020F
     3d4:	98 87       	std	Y+8, r25	; 0x08
     3d6:	8f 83       	std	Y+7, r24	; 0x07

    elapsed -= timers->timeout;
     3d8:	80 91 0e 02 	lds	r24, 0x020E
     3dc:	90 91 0f 02 	lds	r25, 0x020F
     3e0:	fc 01       	movw	r30, r24
     3e2:	82 81       	ldd	r24, Z+2	; 0x02
     3e4:	93 81       	ldd	r25, Z+3	; 0x03
     3e6:	a4 81       	ldd	r26, Z+4	; 0x04
     3e8:	b5 81       	ldd	r27, Z+5	; 0x05
     3ea:	29 81       	ldd	r18, Y+1	; 0x01
     3ec:	3a 81       	ldd	r19, Y+2	; 0x02
     3ee:	4b 81       	ldd	r20, Y+3	; 0x03
     3f0:	5c 81       	ldd	r21, Y+4	; 0x04
     3f2:	79 01       	movw	r14, r18
     3f4:	8a 01       	movw	r16, r20
     3f6:	e8 1a       	sub	r14, r24
     3f8:	f9 0a       	sbc	r15, r25
     3fa:	0a 0b       	sbc	r16, r26
     3fc:	1b 0b       	sbc	r17, r27
     3fe:	d8 01       	movw	r26, r16
     400:	c7 01       	movw	r24, r14
     402:	89 83       	std	Y+1, r24	; 0x01
     404:	9a 83       	std	Y+2, r25	; 0x02
     406:	ab 83       	std	Y+3, r26	; 0x03
     408:	bc 83       	std	Y+4, r27	; 0x04
    timers = timers->next;
     40a:	80 91 0e 02 	lds	r24, 0x020E
     40e:	90 91 0f 02 	lds	r25, 0x020F
     412:	fc 01       	movw	r30, r24
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	90 93 0f 02 	sts	0x020F, r25
     41c:	80 93 0e 02 	sts	0x020E, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
     420:	8f 81       	ldd	r24, Y+7	; 0x07
     422:	98 85       	ldd	r25, Y+8	; 0x08
     424:	fc 01       	movw	r30, r24
     426:	82 85       	ldd	r24, Z+10	; 0x0a
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	21 f4       	brne	.+8      	; 0x434 <SYS_TimerTaskHandler+0xe6>
      placeTimer(timer);
     42c:	8f 81       	ldd	r24, Y+7	; 0x07
     42e:	98 85       	ldd	r25, Y+8	; 0x08
     430:	0e 94 6d 02 	call	0x4da	; 0x4da <placeTimer>
    timer->handler(timer);
     434:	8f 81       	ldd	r24, Y+7	; 0x07
     436:	98 85       	ldd	r25, Y+8	; 0x08
     438:	fc 01       	movw	r30, r24
     43a:	23 85       	ldd	r18, Z+11	; 0x0b
     43c:	34 85       	ldd	r19, Z+12	; 0x0c
     43e:	8f 81       	ldd	r24, Y+7	; 0x07
     440:	98 85       	ldd	r25, Y+8	; 0x08
     442:	f9 01       	movw	r30, r18
     444:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
     446:	80 91 0e 02 	lds	r24, 0x020E
     44a:	90 91 0f 02 	lds	r25, 0x020F
     44e:	00 97       	sbiw	r24, 0x00	; 0
     450:	99 f0       	breq	.+38     	; 0x478 <SYS_TimerTaskHandler+0x12a>
     452:	80 91 0e 02 	lds	r24, 0x020E
     456:	90 91 0f 02 	lds	r25, 0x020F
     45a:	fc 01       	movw	r30, r24
     45c:	22 81       	ldd	r18, Z+2	; 0x02
     45e:	33 81       	ldd	r19, Z+3	; 0x03
     460:	44 81       	ldd	r20, Z+4	; 0x04
     462:	55 81       	ldd	r21, Z+5	; 0x05
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	ab 81       	ldd	r26, Y+3	; 0x03
     46a:	bc 81       	ldd	r27, Y+4	; 0x04
     46c:	82 17       	cp	r24, r18
     46e:	93 07       	cpc	r25, r19
     470:	a4 07       	cpc	r26, r20
     472:	b5 07       	cpc	r27, r21
     474:	08 f0       	brcs	.+2      	; 0x478 <SYS_TimerTaskHandler+0x12a>
     476:	aa cf       	rjmp	.-172    	; 0x3cc <SYS_TimerTaskHandler+0x7e>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
     478:	80 91 0e 02 	lds	r24, 0x020E
     47c:	90 91 0f 02 	lds	r25, 0x020F
     480:	00 97       	sbiw	r24, 0x00	; 0
     482:	f1 f0       	breq	.+60     	; 0x4c0 <SYS_TimerTaskHandler+0x172>
    timers->timeout -= elapsed;
     484:	60 91 0e 02 	lds	r22, 0x020E
     488:	70 91 0f 02 	lds	r23, 0x020F
     48c:	80 91 0e 02 	lds	r24, 0x020E
     490:	90 91 0f 02 	lds	r25, 0x020F
     494:	fc 01       	movw	r30, r24
     496:	22 81       	ldd	r18, Z+2	; 0x02
     498:	33 81       	ldd	r19, Z+3	; 0x03
     49a:	44 81       	ldd	r20, Z+4	; 0x04
     49c:	55 81       	ldd	r21, Z+5	; 0x05
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	9a 81       	ldd	r25, Y+2	; 0x02
     4a2:	ab 81       	ldd	r26, Y+3	; 0x03
     4a4:	bc 81       	ldd	r27, Y+4	; 0x04
     4a6:	79 01       	movw	r14, r18
     4a8:	8a 01       	movw	r16, r20
     4aa:	e8 1a       	sub	r14, r24
     4ac:	f9 0a       	sbc	r15, r25
     4ae:	0a 0b       	sbc	r16, r26
     4b0:	1b 0b       	sbc	r17, r27
     4b2:	d8 01       	movw	r26, r16
     4b4:	c7 01       	movw	r24, r14
     4b6:	fb 01       	movw	r30, r22
     4b8:	82 83       	std	Z+2, r24	; 0x02
     4ba:	93 83       	std	Z+3, r25	; 0x03
     4bc:	a4 83       	std	Z+4, r26	; 0x04
     4be:	b5 83       	std	Z+5, r27	; 0x05
}
     4c0:	28 96       	adiw	r28, 0x08	; 8
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	08 95       	ret

000004da <placeTimer>:

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	2a 97       	sbiw	r28, 0x0a	; 10
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	9a 87       	std	Y+10, r25	; 0x0a
     4f8:	89 87       	std	Y+9, r24	; 0x09
  if (timers)
     4fa:	80 91 0e 02 	lds	r24, 0x020E
     4fe:	90 91 0f 02 	lds	r25, 0x020F
     502:	00 97       	sbiw	r24, 0x00	; 0
     504:	09 f4       	brne	.+2      	; 0x508 <placeTimer+0x2e>
     506:	97 c0       	rjmp	.+302    	; 0x636 <placeTimer+0x15c>
  {
    SYS_Timer_t *prev = NULL;
     508:	1a 82       	std	Y+2, r1	; 0x02
     50a:	19 82       	std	Y+1, r1	; 0x01
    uint32_t timeout = timer->interval;
     50c:	89 85       	ldd	r24, Y+9	; 0x09
     50e:	9a 85       	ldd	r25, Y+10	; 0x0a
     510:	fc 01       	movw	r30, r24
     512:	86 81       	ldd	r24, Z+6	; 0x06
     514:	97 81       	ldd	r25, Z+7	; 0x07
     516:	a0 85       	ldd	r26, Z+8	; 0x08
     518:	b1 85       	ldd	r27, Z+9	; 0x09
     51a:	8b 83       	std	Y+3, r24	; 0x03
     51c:	9c 83       	std	Y+4, r25	; 0x04
     51e:	ad 83       	std	Y+5, r26	; 0x05
     520:	be 83       	std	Y+6, r27	; 0x06

    for (SYS_Timer_t *t = timers; t; t = t->next)
     522:	80 91 0e 02 	lds	r24, 0x020E
     526:	90 91 0f 02 	lds	r25, 0x020F
     52a:	98 87       	std	Y+8, r25	; 0x08
     52c:	8f 83       	std	Y+7, r24	; 0x07
     52e:	4d c0       	rjmp	.+154    	; 0x5ca <placeTimer+0xf0>
    {
      if (timeout < t->timeout)
     530:	8f 81       	ldd	r24, Y+7	; 0x07
     532:	98 85       	ldd	r25, Y+8	; 0x08
     534:	fc 01       	movw	r30, r24
     536:	22 81       	ldd	r18, Z+2	; 0x02
     538:	33 81       	ldd	r19, Z+3	; 0x03
     53a:	44 81       	ldd	r20, Z+4	; 0x04
     53c:	55 81       	ldd	r21, Z+5	; 0x05
     53e:	8b 81       	ldd	r24, Y+3	; 0x03
     540:	9c 81       	ldd	r25, Y+4	; 0x04
     542:	ad 81       	ldd	r26, Y+5	; 0x05
     544:	be 81       	ldd	r27, Y+6	; 0x06
     546:	82 17       	cp	r24, r18
     548:	93 07       	cpc	r25, r19
     54a:	a4 07       	cpc	r26, r20
     54c:	b5 07       	cpc	r27, r21
     54e:	d8 f4       	brcc	.+54     	; 0x586 <placeTimer+0xac>
      {
         t->timeout -= timeout;
     550:	8f 81       	ldd	r24, Y+7	; 0x07
     552:	98 85       	ldd	r25, Y+8	; 0x08
     554:	fc 01       	movw	r30, r24
     556:	22 81       	ldd	r18, Z+2	; 0x02
     558:	33 81       	ldd	r19, Z+3	; 0x03
     55a:	44 81       	ldd	r20, Z+4	; 0x04
     55c:	55 81       	ldd	r21, Z+5	; 0x05
     55e:	8b 81       	ldd	r24, Y+3	; 0x03
     560:	9c 81       	ldd	r25, Y+4	; 0x04
     562:	ad 81       	ldd	r26, Y+5	; 0x05
     564:	be 81       	ldd	r27, Y+6	; 0x06
     566:	79 01       	movw	r14, r18
     568:	8a 01       	movw	r16, r20
     56a:	e8 1a       	sub	r14, r24
     56c:	f9 0a       	sbc	r15, r25
     56e:	0a 0b       	sbc	r16, r26
     570:	1b 0b       	sbc	r17, r27
     572:	d8 01       	movw	r26, r16
     574:	c7 01       	movw	r24, r14
     576:	2f 81       	ldd	r18, Y+7	; 0x07
     578:	38 85       	ldd	r19, Y+8	; 0x08
     57a:	f9 01       	movw	r30, r18
     57c:	82 83       	std	Z+2, r24	; 0x02
     57e:	93 83       	std	Z+3, r25	; 0x03
     580:	a4 83       	std	Z+4, r26	; 0x04
     582:	b5 83       	std	Z+5, r27	; 0x05
         break;
     584:	27 c0       	rjmp	.+78     	; 0x5d4 <placeTimer+0xfa>
      }
      else
        timeout -= t->timeout;
     586:	8f 81       	ldd	r24, Y+7	; 0x07
     588:	98 85       	ldd	r25, Y+8	; 0x08
     58a:	fc 01       	movw	r30, r24
     58c:	82 81       	ldd	r24, Z+2	; 0x02
     58e:	93 81       	ldd	r25, Z+3	; 0x03
     590:	a4 81       	ldd	r26, Z+4	; 0x04
     592:	b5 81       	ldd	r27, Z+5	; 0x05
     594:	2b 81       	ldd	r18, Y+3	; 0x03
     596:	3c 81       	ldd	r19, Y+4	; 0x04
     598:	4d 81       	ldd	r20, Y+5	; 0x05
     59a:	5e 81       	ldd	r21, Y+6	; 0x06
     59c:	79 01       	movw	r14, r18
     59e:	8a 01       	movw	r16, r20
     5a0:	e8 1a       	sub	r14, r24
     5a2:	f9 0a       	sbc	r15, r25
     5a4:	0a 0b       	sbc	r16, r26
     5a6:	1b 0b       	sbc	r17, r27
     5a8:	d8 01       	movw	r26, r16
     5aa:	c7 01       	movw	r24, r14
     5ac:	8b 83       	std	Y+3, r24	; 0x03
     5ae:	9c 83       	std	Y+4, r25	; 0x04
     5b0:	ad 83       	std	Y+5, r26	; 0x05
     5b2:	be 83       	std	Y+6, r27	; 0x06

      prev = t;
     5b4:	8f 81       	ldd	r24, Y+7	; 0x07
     5b6:	98 85       	ldd	r25, Y+8	; 0x08
     5b8:	9a 83       	std	Y+2, r25	; 0x02
     5ba:	89 83       	std	Y+1, r24	; 0x01
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     5bc:	8f 81       	ldd	r24, Y+7	; 0x07
     5be:	98 85       	ldd	r25, Y+8	; 0x08
     5c0:	fc 01       	movw	r30, r24
     5c2:	80 81       	ld	r24, Z
     5c4:	91 81       	ldd	r25, Z+1	; 0x01
     5c6:	98 87       	std	Y+8, r25	; 0x08
     5c8:	8f 83       	std	Y+7, r24	; 0x07
     5ca:	8f 81       	ldd	r24, Y+7	; 0x07
     5cc:	98 85       	ldd	r25, Y+8	; 0x08
     5ce:	00 97       	sbiw	r24, 0x00	; 0
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <placeTimer+0xfa>
     5d2:	ae cf       	rjmp	.-164    	; 0x530 <placeTimer+0x56>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
     5d4:	29 85       	ldd	r18, Y+9	; 0x09
     5d6:	3a 85       	ldd	r19, Y+10	; 0x0a
     5d8:	8b 81       	ldd	r24, Y+3	; 0x03
     5da:	9c 81       	ldd	r25, Y+4	; 0x04
     5dc:	ad 81       	ldd	r26, Y+5	; 0x05
     5de:	be 81       	ldd	r27, Y+6	; 0x06
     5e0:	f9 01       	movw	r30, r18
     5e2:	82 83       	std	Z+2, r24	; 0x02
     5e4:	93 83       	std	Z+3, r25	; 0x03
     5e6:	a4 83       	std	Z+4, r26	; 0x04
     5e8:	b5 83       	std	Z+5, r27	; 0x05

    if (prev)
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	9a 81       	ldd	r25, Y+2	; 0x02
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	91 f0       	breq	.+36     	; 0x616 <placeTimer+0x13c>
    {
      timer->next = prev->next;
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	9a 81       	ldd	r25, Y+2	; 0x02
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 81       	ld	r18, Z
     5fa:	31 81       	ldd	r19, Z+1	; 0x01
     5fc:	89 85       	ldd	r24, Y+9	; 0x09
     5fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     600:	fc 01       	movw	r30, r24
     602:	31 83       	std	Z+1, r19	; 0x01
     604:	20 83       	st	Z, r18
      prev->next = timer;
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	9a 81       	ldd	r25, Y+2	; 0x02
     60a:	29 85       	ldd	r18, Y+9	; 0x09
     60c:	3a 85       	ldd	r19, Y+10	; 0x0a
     60e:	fc 01       	movw	r30, r24
     610:	31 83       	std	Z+1, r19	; 0x01
     612:	20 83       	st	Z, r18
     614:	29 c0       	rjmp	.+82     	; 0x668 <placeTimer+0x18e>
    }
    else
    {
      timer->next = timers;
     616:	20 91 0e 02 	lds	r18, 0x020E
     61a:	30 91 0f 02 	lds	r19, 0x020F
     61e:	89 85       	ldd	r24, Y+9	; 0x09
     620:	9a 85       	ldd	r25, Y+10	; 0x0a
     622:	fc 01       	movw	r30, r24
     624:	31 83       	std	Z+1, r19	; 0x01
     626:	20 83       	st	Z, r18
      timers = timer;
     628:	89 85       	ldd	r24, Y+9	; 0x09
     62a:	9a 85       	ldd	r25, Y+10	; 0x0a
     62c:	90 93 0f 02 	sts	0x020F, r25
     630:	80 93 0e 02 	sts	0x020E, r24
     634:	19 c0       	rjmp	.+50     	; 0x668 <placeTimer+0x18e>
    }
  }
  else
  {
    timer->next = NULL;
     636:	89 85       	ldd	r24, Y+9	; 0x09
     638:	9a 85       	ldd	r25, Y+10	; 0x0a
     63a:	fc 01       	movw	r30, r24
     63c:	11 82       	std	Z+1, r1	; 0x01
     63e:	10 82       	st	Z, r1
    timer->timeout = timer->interval;
     640:	89 85       	ldd	r24, Y+9	; 0x09
     642:	9a 85       	ldd	r25, Y+10	; 0x0a
     644:	fc 01       	movw	r30, r24
     646:	86 81       	ldd	r24, Z+6	; 0x06
     648:	97 81       	ldd	r25, Z+7	; 0x07
     64a:	a0 85       	ldd	r26, Z+8	; 0x08
     64c:	b1 85       	ldd	r27, Z+9	; 0x09
     64e:	29 85       	ldd	r18, Y+9	; 0x09
     650:	3a 85       	ldd	r19, Y+10	; 0x0a
     652:	f9 01       	movw	r30, r18
     654:	82 83       	std	Z+2, r24	; 0x02
     656:	93 83       	std	Z+3, r25	; 0x03
     658:	a4 83       	std	Z+4, r26	; 0x04
     65a:	b5 83       	std	Z+5, r27	; 0x05
    timers = timer;
     65c:	89 85       	ldd	r24, Y+9	; 0x09
     65e:	9a 85       	ldd	r25, Y+10	; 0x0a
     660:	90 93 0f 02 	sts	0x020F, r25
     664:	80 93 0e 02 	sts	0x020E, r24
  }
}
     668:	2a 96       	adiw	r28, 0x0a	; 10
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	08 95       	ret

00000682 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
  TRXPR_REG_s.trxrst = 1;
     68a:	89 e3       	ldi	r24, 0x39	; 57
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	fc 01       	movw	r30, r24
     690:	20 81       	ld	r18, Z
     692:	21 60       	ori	r18, 0x01	; 1
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18

  phyRxState = false;
     698:	10 92 91 02 	sts	0x0291, r1
  phyBand = 0;
     69c:	10 92 93 02 	sts	0x0293, r1
  phyState = PHY_STATE_IDLE;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	80 93 10 02 	sts	0x0210, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
     6a6:	88 e0       	ldi	r24, 0x08	; 8
     6a8:	0e 94 a2 04 	call	0x944	; 0x944 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
     6ac:	86 e5       	ldi	r24, 0x56	; 86
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	2b ee       	ldi	r18, 0xEB	; 235
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
     6b6:	8c e4       	ldi	r24, 0x4C	; 76
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	fc 01       	movw	r30, r24
     6bc:	20 81       	ld	r18, Z
     6be:	20 68       	ori	r18, 0x80	; 128
     6c0:	fc 01       	movw	r30, r24
     6c2:	20 83       	st	Z, r18

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = (uint8_t)PHY_RandomReq();
#endif
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	1f 92       	push	r1
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	89 83       	std	Y+1, r24	; 0x01
  phyRxState = rx;
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	80 93 91 02 	sts	0x0291, r24
  phySetRxState();
     6dc:	0e 94 8c 04 	call	0x918	; 0x918 <phySetRxState>
}
     6e0:	0f 90       	pop	r0
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	1f 92       	push	r1
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	89 83       	std	Y+1, r24	; 0x01
  phyChannel = channel;
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	80 93 92 02 	sts	0x0292, r24
  phySetChannel();
     6fa:	0e 94 62 04 	call	0x8c4	; 0x8c4 <phySetChannel>
}
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <PHY_SetBand>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetBand(uint8_t band)
{
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	1f 92       	push	r1
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	89 83       	std	Y+1, r24	; 0x01
  phyBand = band;
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	80 93 93 02 	sts	0x0293, r24
  phySetChannel();
     718:	0e 94 62 04 	call	0x8c4	; 0x8c4 <phySetChannel>
}
     71c:	0f 90       	pop	r0
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	00 d0       	rcall	.+0      	; 0x72a <PHY_SetPanId+0x6>
     72a:	1f 92       	push	r1
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	9c 83       	std	Y+4, r25	; 0x04
     732:	8b 83       	std	Y+3, r24	; 0x03
  uint8_t *d = (uint8_t *)&panId;
     734:	ce 01       	movw	r24, r28
     736:	03 96       	adiw	r24, 0x03	; 3
     738:	9a 83       	std	Y+2, r25	; 0x02
     73a:	89 83       	std	Y+1, r24	; 0x01

  PAN_ID_0_REG = d[0];
     73c:	82 e6       	ldi	r24, 0x62	; 98
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	29 81       	ldd	r18, Y+1	; 0x01
     742:	3a 81       	ldd	r19, Y+2	; 0x02
     744:	f9 01       	movw	r30, r18
     746:	20 81       	ld	r18, Z
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
  PAN_ID_1_REG = d[1];
     74c:	83 e6       	ldi	r24, 0x63	; 99
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	29 81       	ldd	r18, Y+1	; 0x01
     752:	3a 81       	ldd	r19, Y+2	; 0x02
     754:	f9 01       	movw	r30, r18
     756:	21 81       	ldd	r18, Z+1	; 0x01
     758:	fc 01       	movw	r30, r24
     75a:	20 83       	st	Z, r18
}
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	00 d0       	rcall	.+0      	; 0x770 <PHY_SetShortAddr+0x6>
     770:	1f 92       	push	r1
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	9c 83       	std	Y+4, r25	; 0x04
     778:	8b 83       	std	Y+3, r24	; 0x03
  uint8_t *d = (uint8_t *)&addr;
     77a:	ce 01       	movw	r24, r28
     77c:	03 96       	adiw	r24, 0x03	; 3
     77e:	9a 83       	std	Y+2, r25	; 0x02
     780:	89 83       	std	Y+1, r24	; 0x01

  SHORT_ADDR_0_REG = d[0];
     782:	80 e6       	ldi	r24, 0x60	; 96
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	29 81       	ldd	r18, Y+1	; 0x01
     788:	3a 81       	ldd	r19, Y+2	; 0x02
     78a:	f9 01       	movw	r30, r18
     78c:	20 81       	ld	r18, Z
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
  SHORT_ADDR_1_REG = d[1];
     792:	81 e6       	ldi	r24, 0x61	; 97
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	29 81       	ldd	r18, Y+1	; 0x01
     798:	3a 81       	ldd	r19, Y+2	; 0x02
     79a:	f9 01       	movw	r30, r18
     79c:	21 81       	ldd	r18, Z+1	; 0x01
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18

#ifndef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = d[0] + d[1];
     7a2:	8d e6       	ldi	r24, 0x6D	; 109
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	29 81       	ldd	r18, Y+1	; 0x01
     7a8:	3a 81       	ldd	r19, Y+2	; 0x02
     7aa:	f9 01       	movw	r30, r18
     7ac:	40 81       	ld	r20, Z
     7ae:	29 81       	ldd	r18, Y+1	; 0x01
     7b0:	3a 81       	ldd	r19, Y+2	; 0x02
     7b2:	2f 5f       	subi	r18, 0xFF	; 255
     7b4:	3f 4f       	sbci	r19, 0xFF	; 255
     7b6:	f9 01       	movw	r30, r18
     7b8:	20 81       	ld	r18, Z
     7ba:	24 0f       	add	r18, r20
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
#endif
}
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <PHY_SetTxPower>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	1f 92       	push	r1
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	89 83       	std	Y+1, r24	; 0x01
  PHY_TX_PWR_REG_s.txPwr = txPower;
     7da:	85 e4       	ldi	r24, 0x45	; 69
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	29 81       	ldd	r18, Y+1	; 0x01
     7e0:	2f 70       	andi	r18, 0x0F	; 15
     7e2:	2f 70       	andi	r18, 0x0F	; 15
     7e4:	fc 01       	movw	r30, r24
     7e6:	30 81       	ld	r19, Z
     7e8:	30 7f       	andi	r19, 0xF0	; 240
     7ea:	23 2b       	or	r18, r19
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
}
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <PHY_Sleep>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Sleep(void)
{
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
  phyTrxSetState(TRX_CMD_TRX_OFF);
     800:	88 e0       	ldi	r24, 0x08	; 8
     802:	0e 94 a2 04 	call	0x944	; 0x944 <phyTrxSetState>
  TRXPR_REG_s.slptr = 1;
     806:	89 e3       	ldi	r24, 0x39	; 57
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	fc 01       	movw	r30, r24
     80c:	20 81       	ld	r18, Z
     80e:	22 60       	ori	r18, 0x02	; 2
     810:	fc 01       	movw	r30, r24
     812:	20 83       	st	Z, r18
  phyState = PHY_STATE_SLEEP;
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	80 93 10 02 	sts	0x0210, r24
}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <PHY_Wakeup>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Wakeup(void)
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
  TRXPR_REG_s.slptr = 0;
     828:	89 e3       	ldi	r24, 0x39	; 57
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	fc 01       	movw	r30, r24
     82e:	20 81       	ld	r18, Z
     830:	2d 7f       	andi	r18, 0xFD	; 253
     832:	fc 01       	movw	r30, r24
     834:	20 83       	st	Z, r18
  phySetRxState();
     836:	0e 94 8c 04 	call	0x918	; 0x918 <phySetRxState>
  phyState = PHY_STATE_IDLE;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 10 02 	sts	0x0210, r24
}
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <PHY_DataReq>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	00 d0       	rcall	.+0      	; 0x84c <PHY_DataReq+0x6>
     84c:	1f 92       	push	r1
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	9b 83       	std	Y+3, r25	; 0x03
     854:	8a 83       	std	Y+2, r24	; 0x02
     856:	6c 83       	std	Y+4, r22	; 0x04
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
     858:	89 e1       	ldi	r24, 0x19	; 25
     85a:	0e 94 a2 04 	call	0x944	; 0x944 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
     85e:	8f e4       	ldi	r24, 0x4F	; 79
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	2f ef       	ldi	r18, 0xFF	; 255
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
     868:	80 e8       	ldi	r24, 0x80	; 128
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	2c 81       	ldd	r18, Y+4	; 0x04
     86e:	2e 5f       	subi	r18, 0xFE	; 254
     870:	fc 01       	movw	r30, r24
     872:	20 83       	st	Z, r18
  for (uint8_t i = 0; i < size; i++)
     874:	19 82       	std	Y+1, r1	; 0x01
     876:	13 c0       	rjmp	.+38     	; 0x89e <PHY_DataReq+0x58>
    TRX_FRAME_BUFFER(i+1) = data[i];
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	8f 57       	subi	r24, 0x7F	; 127
     880:	9e 4f       	sbci	r25, 0xFE	; 254
     882:	29 81       	ldd	r18, Y+1	; 0x01
     884:	22 2f       	mov	r18, r18
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	4a 81       	ldd	r20, Y+2	; 0x02
     88a:	5b 81       	ldd	r21, Y+3	; 0x03
     88c:	24 0f       	add	r18, r20
     88e:	35 1f       	adc	r19, r21
     890:	f9 01       	movw	r30, r18
     892:	20 81       	ld	r18, Z
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	8f 5f       	subi	r24, 0xFF	; 255
     89c:	89 83       	std	Y+1, r24	; 0x01
     89e:	99 81       	ldd	r25, Y+1	; 0x01
     8a0:	8c 81       	ldd	r24, Y+4	; 0x04
     8a2:	98 17       	cp	r25, r24
     8a4:	48 f3       	brcs	.-46     	; 0x878 <PHY_DataReq+0x32>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
     8a6:	83 e0       	ldi	r24, 0x03	; 3
     8a8:	80 93 10 02 	sts	0x0210, r24
  TRX_STATE_REG = TRX_CMD_TX_START;
     8ac:	82 e4       	ldi	r24, 0x42	; 66
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	22 e0       	ldi	r18, 0x02	; 2
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 83       	st	Z, r18
}
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <phySetChannel>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
  CC_CTRL_1_REG_s.ccBand = phyBand;
     8cc:	84 e5       	ldi	r24, 0x54	; 84
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	20 91 93 02 	lds	r18, 0x0293
     8d4:	2f 70       	andi	r18, 0x0F	; 15
     8d6:	2f 70       	andi	r18, 0x0F	; 15
     8d8:	fc 01       	movw	r30, r24
     8da:	30 81       	ld	r19, Z
     8dc:	30 7f       	andi	r19, 0xF0	; 240
     8de:	23 2b       	or	r18, r19
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 83       	st	Z, r18

  if (phyBand)
     8e4:	80 91 93 02 	lds	r24, 0x0293
     8e8:	88 23       	and	r24, r24
     8ea:	39 f0       	breq	.+14     	; 0x8fa <phySetChannel+0x36>
    CC_CTRL_0_REG = phyChannel;
     8ec:	83 e5       	ldi	r24, 0x53	; 83
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	20 91 92 02 	lds	r18, 0x0292
     8f4:	fc 01       	movw	r30, r24
     8f6:	20 83       	st	Z, r18
     8f8:	0c c0       	rjmp	.+24     	; 0x912 <phySetChannel+0x4e>
  else
    PHY_CC_CCA_REG_s.channel = phyChannel;
     8fa:	88 e4       	ldi	r24, 0x48	; 72
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	20 91 92 02 	lds	r18, 0x0292
     902:	2f 71       	andi	r18, 0x1F	; 31
     904:	2f 71       	andi	r18, 0x1F	; 31
     906:	fc 01       	movw	r30, r24
     908:	30 81       	ld	r19, Z
     90a:	30 7e       	andi	r19, 0xE0	; 224
     90c:	23 2b       	or	r18, r19
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
}
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <phySetRxState>:

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
  phyTrxSetState(TRX_CMD_TRX_OFF);
     920:	88 e0       	ldi	r24, 0x08	; 8
     922:	0e 94 a2 04 	call	0x944	; 0x944 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
     926:	8f e4       	ldi	r24, 0x4F	; 79
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	2f ef       	ldi	r18, 0xFF	; 255
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18

  if (phyRxState)
     930:	80 91 91 02 	lds	r24, 0x0291
     934:	88 23       	and	r24, r24
     936:	19 f0       	breq	.+6      	; 0x93e <phySetRxState+0x26>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
     938:	86 e1       	ldi	r24, 0x16	; 22
     93a:	0e 94 a2 04 	call	0x944	; 0x944 <phyTrxSetState>
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	1f 92       	push	r1
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	89 83       	std	Y+1, r24	; 0x01
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
     950:	82 e4       	ldi	r24, 0x42	; 66
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	23 e0       	ldi	r18, 0x03	; 3
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
     95a:	00 00       	nop
     95c:	81 e4       	ldi	r24, 0x41	; 65
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	8f 71       	andi	r24, 0x1F	; 31
     966:	88 30       	cpi	r24, 0x08	; 8
     968:	c9 f7       	brne	.-14     	; 0x95c <phyTrxSetState+0x18>

  TRX_STATE_REG = state;
     96a:	82 e4       	ldi	r24, 0x42	; 66
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	29 81       	ldd	r18, Y+1	; 0x01
     970:	fc 01       	movw	r30, r24
     972:	20 83       	st	Z, r18
  while (state != TRX_STATUS_REG_s.trxStatus);
     974:	00 00       	nop
     976:	81 e4       	ldi	r24, 0x41	; 65
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	fc 01       	movw	r30, r24
     97c:	80 81       	ld	r24, Z
     97e:	8f 71       	andi	r24, 0x1F	; 31
     980:	98 2f       	mov	r25, r24
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	98 17       	cp	r25, r24
     986:	b9 f7       	brne	.-18     	; 0x976 <phyTrxSetState+0x32>
}
     988:	0f 90       	pop	r0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <PHY_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	28 97       	sbiw	r28, 0x08	; 8
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
  if (PHY_STATE_SLEEP == phyState)
     9a4:	80 91 10 02 	lds	r24, 0x0210
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	09 f4       	brne	.+2      	; 0x9ae <PHY_TaskHandler+0x1e>
    return;
     9ac:	99 c0       	rjmp	.+306    	; 0xae0 <PHY_TaskHandler+0x150>

  if (IRQ_STATUS_REG_s.rxEnd)
     9ae:	8f e4       	ldi	r24, 0x4F	; 79
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	fc 01       	movw	r30, r24
     9b4:	80 81       	ld	r24, Z
     9b6:	88 70       	andi	r24, 0x08	; 8
     9b8:	88 23       	and	r24, r24
     9ba:	09 f4       	brne	.+2      	; 0x9be <PHY_TaskHandler+0x2e>
     9bc:	59 c0       	rjmp	.+178    	; 0xa70 <PHY_TaskHandler+0xe0>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
     9be:	8b e7       	ldi	r24, 0x7B	; 123
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	fc 01       	movw	r30, r24
     9c4:	80 81       	ld	r24, Z
     9c6:	8b 83       	std	Y+3, r24	; 0x03

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
     9c8:	19 82       	std	Y+1, r1	; 0x01
     9ca:	11 c0       	rjmp	.+34     	; 0x9ee <PHY_TaskHandler+0x5e>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	88 2f       	mov	r24, r24
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	29 81       	ldd	r18, Y+1	; 0x01
     9d4:	22 2f       	mov	r18, r18
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	20 58       	subi	r18, 0x80	; 128
     9da:	3e 4f       	sbci	r19, 0xFE	; 254
     9dc:	f9 01       	movw	r30, r18
     9de:	20 81       	ld	r18, Z
     9e0:	8f 5e       	subi	r24, 0xEF	; 239
     9e2:	9d 4f       	sbci	r25, 0xFD	; 253
     9e4:	fc 01       	movw	r30, r24
     9e6:	20 83       	st	Z, r18
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	8f 5f       	subi	r24, 0xFF	; 255
     9ec:	89 83       	std	Y+1, r24	; 0x01
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	28 2f       	mov	r18, r24
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	88 2f       	mov	r24, r24
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	28 17       	cp	r18, r24
     9fe:	39 07       	cpc	r19, r25
     a00:	2c f3       	brlt	.-54     	; 0x9cc <PHY_TaskHandler+0x3c>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
     a02:	81 e1       	ldi	r24, 0x11	; 17
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	9d 83       	std	Y+5, r25	; 0x05
     a08:	8c 83       	std	Y+4, r24	; 0x04
    ind.size = size - PHY_CRC_SIZE;
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	82 50       	subi	r24, 0x02	; 2
     a0e:	8e 83       	std	Y+6, r24	; 0x06
    ind.lqi  = phyRxBuffer[size];
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	88 2f       	mov	r24, r24
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	8f 5e       	subi	r24, 0xEF	; 239
     a18:	9d 4f       	sbci	r25, 0xFD	; 253
     a1a:	fc 01       	movw	r30, r24
     a1c:	80 81       	ld	r24, Z
     a1e:	8f 83       	std	Y+7, r24	; 0x07
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
     a20:	87 e4       	ldi	r24, 0x47	; 71
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	fc 01       	movw	r30, r24
     a26:	80 81       	ld	r24, Z
     a28:	8a 55       	subi	r24, 0x5A	; 90
     a2a:	88 87       	std	Y+8, r24	; 0x08
    PHY_DataInd(&ind);
     a2c:	ce 01       	movw	r24, r28
     a2e:	04 96       	adiw	r24, 0x04	; 4
     a30:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
     a34:	00 00       	nop
     a36:	81 e4       	ldi	r24, 0x41	; 65
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	fc 01       	movw	r30, r24
     a3c:	80 81       	ld	r24, Z
     a3e:	8f 71       	andi	r24, 0x1F	; 31
     a40:	86 31       	cpi	r24, 0x16	; 22
     a42:	c9 f7       	brne	.-14     	; 0xa36 <PHY_TaskHandler+0xa6>

    IRQ_STATUS_REG_s.rxEnd = 1;
     a44:	8f e4       	ldi	r24, 0x4F	; 79
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	fc 01       	movw	r30, r24
     a4a:	20 81       	ld	r18, Z
     a4c:	28 60       	ori	r18, 0x08	; 8
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
     a52:	8c e4       	ldi	r24, 0x4C	; 76
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	fc 01       	movw	r30, r24
     a58:	20 81       	ld	r18, Z
     a5a:	2f 77       	andi	r18, 0x7F	; 127
     a5c:	fc 01       	movw	r30, r24
     a5e:	20 83       	st	Z, r18
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
     a60:	8c e4       	ldi	r24, 0x4C	; 76
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	fc 01       	movw	r30, r24
     a66:	20 81       	ld	r18, Z
     a68:	20 68       	ori	r18, 0x80	; 128
     a6a:	fc 01       	movw	r30, r24
     a6c:	20 83       	st	Z, r18
     a6e:	38 c0       	rjmp	.+112    	; 0xae0 <PHY_TaskHandler+0x150>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
     a70:	8f e4       	ldi	r24, 0x4F	; 79
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	fc 01       	movw	r30, r24
     a76:	80 81       	ld	r24, Z
     a78:	80 74       	andi	r24, 0x40	; 64
     a7a:	88 23       	and	r24, r24
     a7c:	89 f1       	breq	.+98     	; 0xae0 <PHY_TaskHandler+0x150>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
     a7e:	81 e4       	ldi	r24, 0x41	; 65
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	fc 01       	movw	r30, r24
     a84:	80 81       	ld	r24, Z
     a86:	8f 71       	andi	r24, 0x1F	; 31
     a88:	89 31       	cpi	r24, 0x19	; 25
     a8a:	19 f5       	brne	.+70     	; 0xad2 <PHY_TaskHandler+0x142>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
     a8c:	82 e4       	ldi	r24, 0x42	; 66
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	fc 01       	movw	r30, r24
     a92:	80 81       	ld	r24, Z
     a94:	82 95       	swap	r24
     a96:	86 95       	lsr	r24
     a98:	87 70       	andi	r24, 0x07	; 7
     a9a:	8a 83       	std	Y+2, r24	; 0x02

      if (TRAC_STATUS_SUCCESS == status)
     a9c:	8a 81       	ldd	r24, Y+2	; 0x02
     a9e:	88 23       	and	r24, r24
     aa0:	11 f4       	brne	.+4      	; 0xaa6 <PHY_TaskHandler+0x116>
        status = PHY_STATUS_SUCCESS;
     aa2:	1a 82       	std	Y+2, r1	; 0x02
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <PHY_TaskHandler+0x132>
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
     aa6:	8a 81       	ldd	r24, Y+2	; 0x02
     aa8:	83 30       	cpi	r24, 0x03	; 3
     aaa:	19 f4       	brne	.+6      	; 0xab2 <PHY_TaskHandler+0x122>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	8a 83       	std	Y+2, r24	; 0x02
     ab0:	08 c0       	rjmp	.+16     	; 0xac2 <PHY_TaskHandler+0x132>
      else if (TRAC_STATUS_NO_ACK == status)
     ab2:	8a 81       	ldd	r24, Y+2	; 0x02
     ab4:	85 30       	cpi	r24, 0x05	; 5
     ab6:	19 f4       	brne	.+6      	; 0xabe <PHY_TaskHandler+0x12e>
        status = PHY_STATUS_NO_ACK;
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	8a 83       	std	Y+2, r24	; 0x02
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <PHY_TaskHandler+0x132>
      else
        status = PHY_STATUS_ERROR;
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	8a 83       	std	Y+2, r24	; 0x02

      phySetRxState();
     ac2:	0e 94 8c 04 	call	0x918	; 0x918 <phySetRxState>
      phyState = PHY_STATE_IDLE;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	80 93 10 02 	sts	0x0210, r24

      PHY_DataConf(status);
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	0e 94 42 15 	call	0x2a84	; 0x2a84 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
     ad2:	8f e4       	ldi	r24, 0x4F	; 79
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 81       	ld	r18, Z
     ada:	20 64       	ori	r18, 0x40	; 64
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
  }
}
     ae0:	28 96       	adiw	r28, 0x08	; 8
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <NWK_Init>:

/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	1f 92       	push	r1
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
  nwkIb.nwkSeqNum = 0;
     afc:	10 92 8d 0c 	sts	0x0C8D, r1
  nwkIb.macSeqNum = 0;
     b00:	10 92 8e 0c 	sts	0x0C8E, r1
  nwkIb.addr = 0;
     b04:	10 92 8a 0c 	sts	0x0C8A, r1
     b08:	10 92 89 0c 	sts	0x0C89, r1
  nwkIb.lock = 0;
     b0c:	10 92 b0 0c 	sts	0x0CB0, r1
     b10:	10 92 af 0c 	sts	0x0CAF, r1

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
     b14:	19 82       	std	Y+1, r1	; 0x01
     b16:	0e c0       	rjmp	.+28     	; 0xb34 <NWK_Init+0x42>
    nwkIb.endpoint[i] = NULL;
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	88 2f       	mov	r24, r24
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	03 96       	adiw	r24, 0x03	; 3
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	87 57       	subi	r24, 0x77	; 119
     b26:	93 4f       	sbci	r25, 0xF3	; 243
     b28:	fc 01       	movw	r30, r24
     b2a:	11 82       	std	Z+1, r1	; 0x01
     b2c:	10 82       	st	Z, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	8f 5f       	subi	r24, 0xFF	; 255
     b32:	89 83       	std	Y+1, r24	; 0x01
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	80 31       	cpi	r24, 0x10	; 16
     b38:	78 f3       	brcs	.-34     	; 0xb18 <NWK_Init+0x26>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
     b3a:	0e 94 bf 12 	call	0x257e	; 0x257e <nwkTxInit>
  nwkRxInit();
     b3e:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <nwkRxInit>
  nwkFrameInit();
     b42:	0e 94 7f 08 	call	0x10fe	; 0x10fe <nwkFrameInit>
  nwkDataReqInit();
     b46:	0e 94 7d 06 	call	0xcfa	; 0xcfa <nwkDataReqInit>

#ifdef NWK_ENABLE_ROUTING
  nwkRouteInit();
     b4a:	0e 94 85 09 	call	0x130a	; 0x130a <nwkRouteInit>
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
  nwkRouteDiscoveryInit();
#endif
}
     b4e:	0f 90       	pop	r0
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	08 95       	ret

00000b56 <NWK_SetAddr>:
/*************************************************************************//**
  @brief Sets network address of the node
  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	1f 92       	push	r1
     b5c:	1f 92       	push	r1
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	9a 83       	std	Y+2, r25	; 0x02
     b64:	89 83       	std	Y+1, r24	; 0x01
  nwkIb.addr = addr;
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	9a 81       	ldd	r25, Y+2	; 0x02
     b6a:	90 93 8a 0c 	sts	0x0C8A, r25
     b6e:	80 93 89 0c 	sts	0x0C89, r24
  PHY_SetShortAddr(addr);
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
     b76:	0e 94 b5 03 	call	0x76a	; 0x76a <PHY_SetShortAddr>
}
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <NWK_SetPanId>:
/*************************************************************************//**
  @brief Sets network identifier (PAN) of the node
  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	1f 92       	push	r1
     b8a:	1f 92       	push	r1
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	9a 83       	std	Y+2, r25	; 0x02
     b92:	89 83       	std	Y+1, r24	; 0x01
  nwkIb.panId = panId;
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	90 93 8c 0c 	sts	0x0C8C, r25
     b9c:	80 93 8b 0c 	sts	0x0C8B, r24
  PHY_SetPanId(panId);
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	9a 81       	ldd	r25, Y+2	; 0x02
     ba4:	0e 94 92 03 	call	0x724	; 0x724 <PHY_SetPanId>
}
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <NWK_OpenEndpoint>:
  @brief Registers callback @a ind for the endpoint @a endpoint
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <NWK_OpenEndpoint+0x6>
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	7b 83       	std	Y+3, r23	; 0x03
     bc0:	6a 83       	std	Y+2, r22	; 0x02
  nwkIb.endpoint[id] = handler;
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	03 96       	adiw	r24, 0x03	; 3
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	87 57       	subi	r24, 0x77	; 119
     bd0:	93 4f       	sbci	r25, 0xF3	; 243
     bd2:	2a 81       	ldd	r18, Y+2	; 0x02
     bd4:	3b 81       	ldd	r19, Y+3	; 0x03
     bd6:	fc 01       	movw	r30, r24
     bd8:	31 83       	std	Z+1, r19	; 0x01
     bda:	20 83       	st	Z, r18
}
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <NWK_Busy>:
/*************************************************************************//**
  @brief Checks if network layer is ready for sleep
  @return @c true if network layer is ready for sleep or @c false otherwise
*****************************************************************************/
bool NWK_Busy(void)
{
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
  return nwkIb.lock > 0;
     bf0:	80 91 af 0c 	lds	r24, 0x0CAF
     bf4:	90 91 b0 0c 	lds	r25, 0x0CB0
     bf8:	21 e0       	ldi	r18, 0x01	; 1
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	09 f4       	brne	.+2      	; 0xc00 <NWK_Busy+0x18>
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	82 2f       	mov	r24, r18
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <NWK_Lock>:

/*************************************************************************//**
  @brief Increases the lock counter and sets a busy state
*****************************************************************************/
void NWK_Lock(void)
{
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
  nwkIb.lock++;
     c10:	80 91 af 0c 	lds	r24, 0x0CAF
     c14:	90 91 b0 0c 	lds	r25, 0x0CB0
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	90 93 b0 0c 	sts	0x0CB0, r25
     c1e:	80 93 af 0c 	sts	0x0CAF, r24
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <NWK_Unlock>:

/*************************************************************************//**
  @brief Decreases the lock counter and sets a free state if counter reaches 0
*****************************************************************************/
void NWK_Unlock(void)
{
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
  nwkIb.lock--;
     c30:	80 91 af 0c 	lds	r24, 0x0CAF
     c34:	90 91 b0 0c 	lds	r25, 0x0CB0
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	90 93 b0 0c 	sts	0x0CB0, r25
     c3e:	80 93 af 0c 	sts	0x0CAF, r24
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <NWK_SleepReq>:

/*************************************************************************//**
  @brief Puts network layer to a sleeping state
*****************************************************************************/
void NWK_SleepReq(void)
{
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
  PHY_Sleep();
     c50:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <PHY_Sleep>
}
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <NWK_WakeupReq>:

/*************************************************************************//**
  @brief Puts network layer to an active state
*****************************************************************************/
void NWK_WakeupReq(void)
{
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
  PHY_Wakeup();
     c62:	0e 94 10 04 	call	0x820	; 0x820 <PHY_Wakeup>
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret

00000c6c <NWK_LinearizeLqi>:
  @brief Calculates linearized value for the given value of the LQI
  @param[in] lqi LQI value as provided by the transceiver
  @return linearized value directly proportional to the probability of delivery
*****************************************************************************/
uint8_t NWK_LinearizeLqi(uint8_t lqi)
{
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	2c 97       	sbiw	r28, 0x0c	; 12
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	8c 87       	std	Y+12, r24	; 0x0c
  const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
     c82:	89 e0       	ldi	r24, 0x09	; 9
     c84:	e4 e0       	ldi	r30, 0x04	; 4
     c86:	f2 e0       	ldi	r31, 0x02	; 2
     c88:	de 01       	movw	r26, r28
     c8a:	13 96       	adiw	r26, 0x03	; 3
     c8c:	01 90       	ld	r0, Z+
     c8e:	0d 92       	st	X+, r0
     c90:	8a 95       	dec	r24
     c92:	e1 f7       	brne	.-8      	; 0xc8c <NWK_LinearizeLqi+0x20>
  uint8_t cl = 25;
     c94:	89 e1       	ldi	r24, 0x19	; 25
     c96:	89 83       	std	Y+1, r24	; 0x01

  for (uint8_t i = 0; i < sizeof(val); i++)
     c98:	1a 82       	std	Y+2, r1	; 0x02
     c9a:	15 c0       	rjmp	.+42     	; 0xcc6 <NWK_LinearizeLqi+0x5a>
  {
    if (lqi < cl)
     c9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	98 17       	cp	r25, r24
     ca2:	58 f4       	brcc	.+22     	; 0xcba <NWK_LinearizeLqi+0x4e>
      return val[i];
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	9e 01       	movw	r18, r28
     cac:	2d 5f       	subi	r18, 0xFD	; 253
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	82 0f       	add	r24, r18
     cb2:	93 1f       	adc	r25, r19
     cb4:	fc 01       	movw	r30, r24
     cb6:	80 81       	ld	r24, Z
     cb8:	0a c0       	rjmp	.+20     	; 0xcce <NWK_LinearizeLqi+0x62>
    cl += 25;
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	87 5e       	subi	r24, 0xE7	; 231
     cbe:	89 83       	std	Y+1, r24	; 0x01
uint8_t NWK_LinearizeLqi(uint8_t lqi)
{
  const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
  uint8_t cl = 25;

  for (uint8_t i = 0; i < sizeof(val); i++)
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	8a 83       	std	Y+2, r24	; 0x02
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	89 30       	cpi	r24, 0x09	; 9
     cca:	40 f3       	brcs	.-48     	; 0xc9c <NWK_LinearizeLqi+0x30>
    if (lqi < cl)
      return val[i];
    cl += 25;
  }

  return 255;
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
}
     cce:	2c 96       	adiw	r28, 0x0c	; 12
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <NWK_TaskHandler>:

/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
  nwkRxTaskHandler();
     ce8:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     cec:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     cf0:	0e 94 48 08 	call	0x1090	; 0x1090 <nwkDataReqTaskHandler>
#ifdef NWK_ENABLE_SECURITY
  nwkSecurityTaskHandler();
#endif
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <nwkDataReqInit>:

/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
  nwkDataReqQueue = NULL;
     d02:	10 92 95 02 	sts	0x0295, r1
     d06:	10 92 94 02 	sts	0x0294, r1
}
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	1f 92       	push	r1
     d16:	1f 92       	push	r1
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	fc 01       	movw	r30, r24
     d26:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	fc 01       	movw	r30, r24
     d2e:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	fc 01       	movw	r30, r24
     d36:	13 82       	std	Z+3, r1	; 0x03
     d38:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     d3a:	80 91 af 0c 	lds	r24, 0x0CAF
     d3e:	90 91 b0 0c 	lds	r25, 0x0CB0
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	90 93 b0 0c 	sts	0x0CB0, r25
     d48:	80 93 af 0c 	sts	0x0CAF, r24

  if (NULL == nwkDataReqQueue)
     d4c:	80 91 94 02 	lds	r24, 0x0294
     d50:	90 91 95 02 	lds	r25, 0x0295
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	61 f4       	brne	.+24     	; 0xd70 <NWK_DataReq+0x60>
  {
    req->next = NULL;
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	fc 01       	movw	r30, r24
     d5e:	11 82       	std	Z+1, r1	; 0x01
     d60:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	9a 81       	ldd	r25, Y+2	; 0x02
     d66:	90 93 95 02 	sts	0x0295, r25
     d6a:	80 93 94 02 	sts	0x0294, r24
     d6e:	0f c0       	rjmp	.+30     	; 0xd8e <NWK_DataReq+0x7e>
  }
  else
  {
    req->next = nwkDataReqQueue;
     d70:	20 91 94 02 	lds	r18, 0x0294
     d74:	30 91 95 02 	lds	r19, 0x0295
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	fc 01       	movw	r30, r24
     d7e:	31 83       	std	Z+1, r19	; 0x01
     d80:	20 83       	st	Z, r18
    nwkDataReqQueue = req;
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	90 93 95 02 	sts	0x0295, r25
     d8a:	80 93 94 02 	sts	0x0294, r24
  }
}
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	08 95       	ret

00000d98 <nwkDataReqSendFrame>:
/*************************************************************************//**
  @brief Prepares and send outgoing frame based on the request @a req parameters
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <nwkDataReqSendFrame+0x6>
     d9e:	1f 92       	push	r1
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	9c 83       	std	Y+4, r25	; 0x04
     da6:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     da8:	0e 94 9d 08 	call	0x113a	; 0x113a <nwkFrameAlloc>
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	59 f4       	brne	.+22     	; 0xdce <nwkDataReqSendFrame+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	22 e0       	ldi	r18, 0x02	; 2
     dbe:	fc 01       	movw	r30, r24
     dc0:	24 83       	std	Z+4, r18	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	9c 81       	ldd	r25, Y+4	; 0x04
     dc6:	22 e0       	ldi	r18, 0x02	; 2
     dc8:	fc 01       	movw	r30, r24
     dca:	27 87       	std	Z+15, r18	; 0x0f
    return;
     dcc:	b6 c0       	rjmp	.+364    	; 0xf3a <nwkDataReqSendFrame+0x1a2>
  }

  req->frame = frame;
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	9c 81       	ldd	r25, Y+4	; 0x04
     dd2:	29 81       	ldd	r18, Y+1	; 0x01
     dd4:	3a 81       	ldd	r19, Y+2	; 0x02
     dd6:	fc 01       	movw	r30, r24
     dd8:	33 83       	std	Z+3, r19	; 0x03
     dda:	22 83       	std	Z+2, r18	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	21 e0       	ldi	r18, 0x01	; 1
     de2:	fc 01       	movw	r30, r24
     de4:	24 83       	std	Z+4, r18	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	9a 81       	ldd	r25, Y+2	; 0x02
     dea:	89 57       	subi	r24, 0x79	; 121
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	24 ea       	ldi	r18, 0xA4	; 164
     df0:	37 e0       	ldi	r19, 0x07	; 7
     df2:	fc 01       	movw	r30, r24
     df4:	31 83       	std	Z+1, r19	; 0x01
     df6:	20 83       	st	Z, r18
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	9c 81       	ldd	r25, Y+4	; 0x04
     dfc:	fc 01       	movw	r30, r24
     dfe:	81 85       	ldd	r24, Z+9	; 0x09
     e00:	88 2f       	mov	r24, r24
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	84 70       	andi	r24, 0x04	; 4
     e06:	99 27       	eor	r25, r25
     e08:	21 e0       	ldi	r18, 0x01	; 1
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	09 f4       	brne	.+2      	; 0xe10 <nwkDataReqSendFrame+0x78>
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	8a 57       	subi	r24, 0x7A	; 122
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	9c 81       	ldd	r25, Y+4	; 0x04
     e20:	fc 01       	movw	r30, r24
     e22:	81 85       	ldd	r24, Z+9	; 0x09
     e24:	88 2f       	mov	r24, r24
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	81 70       	andi	r24, 0x01	; 1
     e2a:	99 27       	eor	r25, r25
     e2c:	21 e0       	ldi	r18, 0x01	; 1
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	09 f4       	brne	.+2      	; 0xe34 <nwkDataReqSendFrame+0x9c>
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	21 70       	andi	r18, 0x01	; 1
     e3a:	fc 01       	movw	r30, r24
     e3c:	33 85       	ldd	r19, Z+11	; 0x0b
     e3e:	3e 7f       	andi	r19, 0xFE	; 254
     e40:	23 2b       	or	r18, r19
     e42:	fc 01       	movw	r30, r24
     e44:	23 87       	std	Z+11, r18	; 0x0b
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	fc 01       	movw	r30, r24
     e4c:	81 85       	ldd	r24, Z+9	; 0x09
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	88 70       	andi	r24, 0x08	; 8
     e54:	99 27       	eor	r25, r25
     e56:	21 e0       	ldi	r18, 0x01	; 1
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	09 f4       	brne	.+2      	; 0xe5e <nwkDataReqSendFrame+0xc6>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	21 70       	andi	r18, 0x01	; 1
     e64:	22 0f       	add	r18, r18
     e66:	22 0f       	add	r18, r18
     e68:	fc 01       	movw	r30, r24
     e6a:	33 85       	ldd	r19, Z+11	; 0x0b
     e6c:	3b 7f       	andi	r19, 0xFB	; 251
     e6e:	23 2b       	or	r18, r19
     e70:	fc 01       	movw	r30, r24
     e72:	23 87       	std	Z+11, r18	; 0x0b
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     e74:	80 91 8d 0c 	lds	r24, 0x0C8D
     e78:	8f 5f       	subi	r24, 0xFF	; 255
     e7a:	80 93 8d 0c 	sts	0x0C8D, r24
     e7e:	20 91 8d 0c 	lds	r18, 0x0C8D
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	fc 01       	movw	r30, r24
     e88:	24 87       	std	Z+12, r18	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     e8a:	20 91 89 0c 	lds	r18, 0x0C89
     e8e:	30 91 8a 0c 	lds	r19, 0x0C8A
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	fc 01       	movw	r30, r24
     e98:	36 87       	std	Z+14, r19	; 0x0e
     e9a:	25 87       	std	Z+13, r18	; 0x0d
  frame->header.nwkDstAddr = req->dstAddr;
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	fc 01       	movw	r30, r24
     ea2:	25 81       	ldd	r18, Z+5	; 0x05
     ea4:	36 81       	ldd	r19, Z+6	; 0x06
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	fc 01       	movw	r30, r24
     eac:	30 8b       	std	Z+16, r19	; 0x10
     eae:	27 87       	std	Z+15, r18	; 0x0f
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	fc 01       	movw	r30, r24
     eb6:	80 85       	ldd	r24, Z+8	; 0x08
     eb8:	28 2f       	mov	r18, r24
     eba:	2f 70       	andi	r18, 0x0F	; 15
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	2f 70       	andi	r18, 0x0F	; 15
     ec2:	fc 01       	movw	r30, r24
     ec4:	31 89       	ldd	r19, Z+17	; 0x11
     ec6:	30 7f       	andi	r19, 0xF0	; 240
     ec8:	23 2b       	or	r18, r19
     eca:	fc 01       	movw	r30, r24
     ecc:	21 8b       	std	Z+17, r18	; 0x11
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	fc 01       	movw	r30, r24
     ed4:	87 81       	ldd	r24, Z+7	; 0x07
     ed6:	28 2f       	mov	r18, r24
     ed8:	2f 70       	andi	r18, 0x0F	; 15
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	22 95       	swap	r18
     ee0:	20 7f       	andi	r18, 0xF0	; 240
     ee2:	fc 01       	movw	r30, r24
     ee4:	31 89       	ldd	r19, Z+17	; 0x11
     ee6:	3f 70       	andi	r19, 0x0F	; 15
     ee8:	23 2b       	or	r18, r19
     eea:	fc 01       	movw	r30, r24
     eec:	21 8b       	std	Z+17, r18	; 0x11

  memcpy(frame->payload, req->data, req->size);
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	fc 01       	movw	r30, r24
     ef4:	84 85       	ldd	r24, Z+12	; 0x0c
     ef6:	48 2f       	mov	r20, r24
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	9c 81       	ldd	r25, Y+4	; 0x04
     efe:	fc 01       	movw	r30, r24
     f00:	22 85       	ldd	r18, Z+10	; 0x0a
     f02:	33 85       	ldd	r19, Z+11	; 0x0b
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	8f 57       	subi	r24, 0x7F	; 127
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	fc 01       	movw	r30, r24
     f0e:	80 81       	ld	r24, Z
     f10:	91 81       	ldd	r25, Z+1	; 0x01
     f12:	b9 01       	movw	r22, r18
     f14:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <memcpy>
  frame->size += req->size;
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	fc 01       	movw	r30, r24
     f1e:	21 81       	ldd	r18, Z+1	; 0x01
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	fc 01       	movw	r30, r24
     f26:	84 85       	ldd	r24, Z+12	; 0x0c
     f28:	28 0f       	add	r18, r24
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	fc 01       	movw	r30, r24
     f30:	21 83       	std	Z+1, r18	; 0x01

  nwkTxFrame(frame);
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <nwkTxFrame>
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <nwkDataReqTxConf>:
/*************************************************************************//**
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <nwkDataReqTxConf+0x6>
     f4e:	1f 92       	push	r1
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	9c 83       	std	Y+4, r25	; 0x04
     f56:	8b 83       	std	Y+3, r24	; 0x03
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     f58:	80 91 94 02 	lds	r24, 0x0294
     f5c:	90 91 95 02 	lds	r25, 0x0295
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	2b c0       	rjmp	.+86     	; 0xfbc <nwkDataReqTxConf+0x74>
  {
    if (req->frame == frame)
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	fc 01       	movw	r30, r24
     f6c:	22 81       	ldd	r18, Z+2	; 0x02
     f6e:	33 81       	ldd	r19, Z+3	; 0x03
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	d1 f4       	brne	.+52     	; 0xfae <nwkDataReqTxConf+0x66>
    {
      req->status = frame->tx.status;
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	8d 57       	subi	r24, 0x7D	; 125
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	fc 01       	movw	r30, r24
     f84:	20 81       	ld	r18, Z
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	fc 01       	movw	r30, r24
     f8c:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	8a 57       	subi	r24, 0x7A	; 122
     f94:	9f 4f       	sbci	r25, 0xFF	; 255
     f96:	fc 01       	movw	r30, r24
     f98:	20 81       	ld	r18, Z
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	22 e0       	ldi	r18, 0x02	; 2
     fa8:	fc 01       	movw	r30, r24
     faa:	24 83       	std	Z+4, r18	; 0x04
      break;
     fac:	0b c0       	rjmp	.+22     	; 0xfc4 <nwkDataReqTxConf+0x7c>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	fc 01       	movw	r30, r24
     fb4:	80 81       	ld	r24, Z
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	89 f6       	brne	.-94     	; 0xf66 <nwkDataReqTxConf+0x1e>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	0e 94 10 09 	call	0x1220	; 0x1220 <nwkFrameFree>
}
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <nwkDataReqConfirm>:
/*************************************************************************//**
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <nwkDataReqConfirm+0x6>
     fe0:	1f 92       	push	r1
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	8b 83       	std	Y+3, r24	; 0x03
  if (nwkDataReqQueue == req)
     fea:	20 91 94 02 	lds	r18, 0x0294
     fee:	30 91 95 02 	lds	r19, 0x0295
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	9c 81       	ldd	r25, Y+4	; 0x04
     ff6:	28 17       	cp	r18, r24
     ff8:	39 07       	cpc	r19, r25
     ffa:	61 f4       	brne	.+24     	; 0x1014 <nwkDataReqConfirm+0x3a>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     ffc:	80 91 94 02 	lds	r24, 0x0294
    1000:	90 91 95 02 	lds	r25, 0x0295
    1004:	fc 01       	movw	r30, r24
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	90 93 95 02 	sts	0x0295, r25
    100e:	80 93 94 02 	sts	0x0294, r24
    1012:	25 c0       	rjmp	.+74     	; 0x105e <nwkDataReqConfirm+0x84>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    1014:	80 91 94 02 	lds	r24, 0x0294
    1018:	90 91 95 02 	lds	r25, 0x0295
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
    while (prev->next != req)
    1020:	07 c0       	rjmp	.+14     	; 0x1030 <nwkDataReqConfirm+0x56>
      prev = prev->next;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
    1026:	fc 01       	movw	r30, r24
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	89 83       	std	Y+1, r24	; 0x01
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	fc 01       	movw	r30, r24
    1036:	20 81       	ld	r18, Z
    1038:	31 81       	ldd	r19, Z+1	; 0x01
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	28 17       	cp	r18, r24
    1040:	39 07       	cpc	r19, r25
    1042:	79 f7       	brne	.-34     	; 0x1022 <nwkDataReqConfirm+0x48>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	fc 01       	movw	r30, r24
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	fc 01       	movw	r30, r24
    1050:	20 81       	ld	r18, Z
    1052:	31 81       	ldd	r19, Z+1	; 0x01
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	fc 01       	movw	r30, r24
    105a:	31 83       	std	Z+1, r19	; 0x01
    105c:	20 83       	st	Z, r18
  }

  nwkIb.lock--;
    105e:	80 91 af 0c 	lds	r24, 0x0CAF
    1062:	90 91 b0 0c 	lds	r25, 0x0CB0
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	90 93 b0 0c 	sts	0x0CB0, r25
    106c:	80 93 af 0c 	sts	0x0CAF, r24
  req->confirm(req);
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	fc 01       	movw	r30, r24
    1076:	25 85       	ldd	r18, Z+13	; 0x0d
    1078:	36 85       	ldd	r19, Z+14	; 0x0e
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	f9 01       	movw	r30, r18
    1080:	19 95       	eicall
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	1f 92       	push	r1
    1096:	1f 92       	push	r1
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    109c:	80 91 94 02 	lds	r24, 0x0294
    10a0:	90 91 95 02 	lds	r25, 0x0295
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	21 c0       	rjmp	.+66     	; 0x10ec <nwkDataReqTaskHandler+0x5c>
  {
    switch (req->state)
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	fc 01       	movw	r30, r24
    10b0:	84 81       	ldd	r24, Z+4	; 0x04
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	81 f0       	breq	.+32     	; 0x10dc <nwkDataReqTaskHandler+0x4c>
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	91 05       	cpc	r25, r1
    10c0:	41 f0       	breq	.+16     	; 0x10d2 <nwkDataReqTaskHandler+0x42>
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <nwkDataReqTaskHandler+0x38>
        nwkDataReqConfirm(req);
        return;
      } break;

      default:
        break;
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <nwkDataReqTaskHandler+0x4e>
  {
    switch (req->state)
    {
      case NWK_DATA_REQ_STATE_INITIAL:
      {
        nwkDataReqSendFrame(req);
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	0e 94 cc 06 	call	0xd98	; 0xd98 <nwkDataReqSendFrame>
        return;
    10d0:	11 c0       	rjmp	.+34     	; 0x10f4 <nwkDataReqTaskHandler+0x64>
      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;

      case NWK_DATA_REQ_STATE_CONFIRM:
      {
        nwkDataReqConfirm(req);
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	0e 94 ed 07 	call	0xfda	; 0xfda <nwkDataReqConfirm>
        return;
    10da:	0c c0       	rjmp	.+24     	; 0x10f4 <nwkDataReqTaskHandler+0x64>
        nwkDataReqSendFrame(req);
        return;
      } break;

      case NWK_DATA_REQ_STATE_WAIT_CONF:
        break;
    10dc:	00 00       	nop
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	fc 01       	movw	r30, r24
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	d9 f6       	brne	.-74     	; 0x10aa <nwkDataReqTaskHandler+0x1a>

      default:
        break;
    };
  }
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	1f 92       	push	r1
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1108:	19 82       	std	Y+1, r1	; 0x01
    110a:	10 c0       	rjmp	.+32     	; 0x112c <nwkFrameInit+0x2e>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	49 e8       	ldi	r20, 0x89	; 137
    1114:	42 9f       	mul	r20, r18
    1116:	c0 01       	movw	r24, r0
    1118:	43 9f       	mul	r20, r19
    111a:	90 0d       	add	r25, r0
    111c:	11 24       	eor	r1, r1
    111e:	8a 56       	subi	r24, 0x6A	; 106
    1120:	9d 4f       	sbci	r25, 0xFD	; 253
    1122:	fc 01       	movw	r30, r24
    1124:	10 82       	st	Z, r1
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	8f 5f       	subi	r24, 0xFF	; 255
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	8a 30       	cpi	r24, 0x0A	; 10
    1130:	68 f3       	brcs	.-38     	; 0x110c <nwkFrameInit+0xe>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    1132:	0f 90       	pop	r0
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	08 95       	ret

0000113a <nwkFrameAlloc>:
/*************************************************************************//**
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	1f 92       	push	r1
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1144:	19 82       	std	Y+1, r1	; 0x01
    1146:	62 c0       	rjmp	.+196    	; 0x120c <nwkFrameAlloc+0xd2>
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	49 e8       	ldi	r20, 0x89	; 137
    1150:	42 9f       	mul	r20, r18
    1152:	c0 01       	movw	r24, r0
    1154:	43 9f       	mul	r20, r19
    1156:	90 0d       	add	r25, r0
    1158:	11 24       	eor	r1, r1
    115a:	8a 56       	subi	r24, 0x6A	; 106
    115c:	9d 4f       	sbci	r25, 0xFD	; 253
    115e:	fc 01       	movw	r30, r24
    1160:	80 81       	ld	r24, Z
    1162:	88 23       	and	r24, r24
    1164:	09 f0       	breq	.+2      	; 0x1168 <nwkFrameAlloc+0x2e>
    1166:	4f c0       	rjmp	.+158    	; 0x1206 <nwkFrameAlloc+0xcc>
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	49 e8       	ldi	r20, 0x89	; 137
    1170:	42 9f       	mul	r20, r18
    1172:	c0 01       	movw	r24, r0
    1174:	43 9f       	mul	r20, r19
    1176:	90 0d       	add	r25, r0
    1178:	11 24       	eor	r1, r1
    117a:	8a 56       	subi	r24, 0x6A	; 106
    117c:	9d 4f       	sbci	r25, 0xFD	; 253
    117e:	49 e8       	ldi	r20, 0x89	; 137
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <memset>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	49 e8       	ldi	r20, 0x89	; 137
    1192:	42 9f       	mul	r20, r18
    1194:	c0 01       	movw	r24, r0
    1196:	43 9f       	mul	r20, r19
    1198:	90 0d       	add	r25, r0
    119a:	11 24       	eor	r1, r1
    119c:	89 56       	subi	r24, 0x69	; 105
    119e:	9d 4f       	sbci	r25, 0xFD	; 253
    11a0:	20 e1       	ldi	r18, 0x10	; 16
    11a2:	fc 01       	movw	r30, r24
    11a4:	20 83       	st	Z, r18
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	48 2f       	mov	r20, r24
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	69 e8       	ldi	r22, 0x89	; 137
    11b4:	62 9f       	mul	r22, r18
    11b6:	c0 01       	movw	r24, r0
    11b8:	63 9f       	mul	r22, r19
    11ba:	90 0d       	add	r25, r0
    11bc:	11 24       	eor	r1, r1
    11be:	42 96       	adiw	r24, 0x12	; 18
    11c0:	9c 01       	movw	r18, r24
    11c2:	2a 56       	subi	r18, 0x6A	; 106
    11c4:	3d 4f       	sbci	r19, 0xFD	; 253
    11c6:	69 e8       	ldi	r22, 0x89	; 137
    11c8:	64 9f       	mul	r22, r20
    11ca:	c0 01       	movw	r24, r0
    11cc:	65 9f       	mul	r22, r21
    11ce:	90 0d       	add	r25, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	89 5e       	subi	r24, 0xE9	; 233
    11d4:	9c 4f       	sbci	r25, 0xFC	; 252
    11d6:	fc 01       	movw	r30, r24
    11d8:	31 83       	std	Z+1, r19	; 0x01
    11da:	20 83       	st	Z, r18
      nwkIb.lock++;
    11dc:	80 91 af 0c 	lds	r24, 0x0CAF
    11e0:	90 91 b0 0c 	lds	r25, 0x0CB0
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	90 93 b0 0c 	sts	0x0CB0, r25
    11ea:	80 93 af 0c 	sts	0x0CAF, r24
      return &nwkFrameFrames[i];
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	49 e8       	ldi	r20, 0x89	; 137
    11f6:	42 9f       	mul	r20, r18
    11f8:	c0 01       	movw	r24, r0
    11fa:	43 9f       	mul	r20, r19
    11fc:	90 0d       	add	r25, r0
    11fe:	11 24       	eor	r1, r1
    1200:	8a 56       	subi	r24, 0x6A	; 106
    1202:	9d 4f       	sbci	r25, 0xFD	; 253
    1204:	09 c0       	rjmp	.+18     	; 0x1218 <nwkFrameAlloc+0xde>
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	8a 30       	cpi	r24, 0x0A	; 10
    1210:	08 f4       	brcc	.+2      	; 0x1214 <nwkFrameAlloc+0xda>
    1212:	9a cf       	rjmp	.-204    	; 0x1148 <nwkFrameAlloc+0xe>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0
}
    1218:	0f 90       	pop	r0
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <nwkFrameFree>:
/*************************************************************************//**
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	1f 92       	push	r1
    1226:	1f 92       	push	r1
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
  frame->state = NWK_FRAME_STATE_FREE;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	fc 01       	movw	r30, r24
    1236:	10 82       	st	Z, r1
  nwkIb.lock--;
    1238:	80 91 af 0c 	lds	r24, 0x0CAF
    123c:	90 91 b0 0c 	lds	r25, 0x0CB0
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	90 93 b0 0c 	sts	0x0CB0, r25
    1246:	80 93 af 0c 	sts	0x0CAF, r24
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <nwkFrameNext>:
  @brief Cycles through the allocated frames starting from the specified @a frame
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	1f 92       	push	r1
    125a:	1f 92       	push	r1
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	9a 83       	std	Y+2, r25	; 0x02
    1262:	89 83       	std	Y+1, r24	; 0x01
  if (NULL == frame)
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	9a 81       	ldd	r25, Y+2	; 0x02
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	29 f4       	brne	.+10     	; 0x1276 <nwkFrameNext+0x22>
    frame = nwkFrameFrames;
    126c:	86 e9       	ldi	r24, 0x96	; 150
    126e:	92 e0       	ldi	r25, 0x02	; 2
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1274:	16 c0       	rjmp	.+44     	; 0x12a2 <nwkFrameNext+0x4e>
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	87 57       	subi	r24, 0x77	; 119
    127c:	9f 4f       	sbci	r25, 0xFF	; 255
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	89 83       	std	Y+1, r24	; 0x01

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1282:	0f c0       	rjmp	.+30     	; 0x12a2 <nwkFrameNext+0x4e>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	fc 01       	movw	r30, r24
    128a:	80 81       	ld	r24, Z
    128c:	88 23       	and	r24, r24
    128e:	19 f0       	breq	.+6      	; 0x1296 <nwkFrameNext+0x42>
      return frame;
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	0e c0       	rjmp	.+28     	; 0x12b2 <nwkFrameNext+0x5e>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	87 57       	subi	r24, 0x77	; 119
    129c:	9f 4f       	sbci	r25, 0xFF	; 255
    129e:	9a 83       	std	Y+2, r25	; 0x02
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	9a 81       	ldd	r25, Y+2	; 0x02
    12a6:	f7 e0       	ldi	r31, 0x07	; 7
    12a8:	80 3f       	cpi	r24, 0xF0	; 240
    12aa:	9f 07       	cpc	r25, r31
    12ac:	58 f3       	brcs	.-42     	; 0x1284 <nwkFrameNext+0x30>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	1f 92       	push	r1
    12c2:	1f 92       	push	r1
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	9a 83       	std	Y+2, r25	; 0x02
    12ca:	89 83       	std	Y+1, r24	; 0x01
  frame->tx.status = NWK_SUCCESS_STATUS;
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	8d 57       	subi	r24, 0x7D	; 125
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	fc 01       	movw	r30, r24
    12d6:	10 82       	st	Z, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    12d8:	80 91 8d 0c 	lds	r24, 0x0C8D
    12dc:	8f 5f       	subi	r24, 0xFF	; 255
    12de:	80 93 8d 0c 	sts	0x0C8D, r24
    12e2:	20 91 8d 0c 	lds	r18, 0x0C8D
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	fc 01       	movw	r30, r24
    12ec:	24 87       	std	Z+12, r18	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    12ee:	20 91 89 0c 	lds	r18, 0x0C89
    12f2:	30 91 8a 0c 	lds	r19, 0x0C8A
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	fc 01       	movw	r30, r24
    12fc:	36 87       	std	Z+14, r19	; 0x0e
    12fe:	25 87       	std	Z+13, r18	; 0x0d
#ifdef NWK_ENABLE_SECURE_COMMANDS
  frame->header.nwkFcf.security = 1;
#endif
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	08 95       	ret

0000130a <nwkRouteInit>:

/*************************************************************************//**
  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	1f 92       	push	r1
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1314:	19 82       	std	Y+1, r1	; 0x01
    1316:	39 c0       	rjmp	.+114    	; 0x138a <nwkRouteInit+0x80>
  {
    nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	c9 01       	movw	r24, r18
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	82 1b       	sub	r24, r18
    132e:	93 0b       	sbc	r25, r19
    1330:	8f 50       	subi	r24, 0x0F	; 15
    1332:	98 4f       	sbci	r25, 0xF8	; 248
    1334:	2f ef       	ldi	r18, 0xFF	; 255
    1336:	3f ef       	ldi	r19, 0xFF	; 255
    1338:	fc 01       	movw	r30, r24
    133a:	31 83       	std	Z+1, r19	; 0x01
    133c:	20 83       	st	Z, r18
    nwkRouteTable[i].fixed = 0;
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	c9 01       	movw	r24, r18
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	82 1b       	sub	r24, r18
    1354:	93 0b       	sbc	r25, r19
    1356:	80 51       	subi	r24, 0x10	; 16
    1358:	98 4f       	sbci	r25, 0xF8	; 248
    135a:	fc 01       	movw	r30, r24
    135c:	20 81       	ld	r18, Z
    135e:	2e 7f       	andi	r18, 0xFE	; 254
    1360:	fc 01       	movw	r30, r24
    1362:	20 83       	st	Z, r18
    nwkRouteTable[i].rank = 0;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	c9 01       	movw	r24, r18
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	82 1b       	sub	r24, r18
    137a:	93 0b       	sbc	r25, r19
    137c:	8b 50       	subi	r24, 0x0B	; 11
    137e:	98 4f       	sbci	r25, 0xF8	; 248
    1380:	fc 01       	movw	r30, r24
    1382:	10 82       	st	Z, r1
/*************************************************************************//**
  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	84 36       	cpi	r24, 0x64	; 100
    138e:	20 f2       	brcs	.-120    	; 0x1318 <nwkRouteInit+0xe>
  {
    nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    nwkRouteTable[i].fixed = 0;
    nwkRouteTable[i].rank = 0;
  }
}
    1390:	0f 90       	pop	r0
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	00 d0       	rcall	.+0      	; 0x139e <NWK_RouteFindEntry+0x6>
    139e:	1f 92       	push	r1
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	9b 83       	std	Y+3, r25	; 0x03
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	6c 83       	std	Y+4, r22	; 0x04
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    13aa:	19 82       	std	Y+1, r1	; 0x01
    13ac:	42 c0       	rjmp	.+132    	; 0x1432 <NWK_RouteFindEntry+0x9a>
  {
    if (nwkRouteTable[i].dstAddr == dst &&
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	c9 01       	movw	r24, r18
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	82 1b       	sub	r24, r18
    13c4:	93 0b       	sbc	r25, r19
    13c6:	8f 50       	subi	r24, 0x0F	; 15
    13c8:	98 4f       	sbci	r25, 0xF8	; 248
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 81       	ld	r18, Z
    13ce:	31 81       	ldd	r19, Z+1	; 0x01
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	9b 81       	ldd	r25, Y+3	; 0x03
    13d4:	28 17       	cp	r18, r24
    13d6:	39 07       	cpc	r19, r25
    13d8:	49 f5       	brne	.+82     	; 0x142c <NWK_RouteFindEntry+0x94>
        nwkRouteTable[i].multicast == multicast)
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	c9 01       	movw	r24, r18
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	82 1b       	sub	r24, r18
    13f0:	93 0b       	sbc	r25, r19
    13f2:	80 51       	subi	r24, 0x10	; 16
    13f4:	98 4f       	sbci	r25, 0xF8	; 248
    13f6:	fc 01       	movw	r30, r24
    13f8:	80 81       	ld	r24, Z
    13fa:	86 95       	lsr	r24
    13fc:	81 70       	andi	r24, 0x01	; 1
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
  {
    if (nwkRouteTable[i].dstAddr == dst &&
    1408:	28 17       	cp	r18, r24
    140a:	39 07       	cpc	r19, r25
    140c:	79 f4       	brne	.+30     	; 0x142c <NWK_RouteFindEntry+0x94>
        nwkRouteTable[i].multicast == multicast)
      return &nwkRouteTable[i];
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	c9 01       	movw	r24, r18
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	82 1b       	sub	r24, r18
    1424:	93 0b       	sbc	r25, r19
    1426:	80 51       	subi	r24, 0x10	; 16
    1428:	98 4f       	sbci	r25, 0xF8	; 248
    142a:	09 c0       	rjmp	.+18     	; 0x143e <NWK_RouteFindEntry+0xa6>

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	8f 5f       	subi	r24, 0xFF	; 255
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	84 36       	cpi	r24, 0x64	; 100
    1436:	08 f4       	brcc	.+2      	; 0x143a <NWK_RouteFindEntry+0xa2>
    1438:	ba cf       	rjmp	.-140    	; 0x13ae <NWK_RouteFindEntry+0x16>
    if (nwkRouteTable[i].dstAddr == dst &&
        nwkRouteTable[i].multicast == multicast)
      return &nwkRouteTable[i];
  }

  return NULL;
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
}
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	00 d0       	rcall	.+0      	; 0x1452 <NWK_RouteNewEntry+0x6>
    1452:	1f 92       	push	r1
    1454:	1f 92       	push	r1
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
  NWK_RouteTableEntry_t *iter = nwkRouteTable;
    145a:	80 ef       	ldi	r24, 0xF0	; 240
    145c:	97 e0       	ldi	r25, 0x07	; 7
    145e:	9a 83       	std	Y+2, r25	; 0x02
    1460:	89 83       	std	Y+1, r24	; 0x01
  NWK_RouteTableEntry_t *entry = NULL;
    1462:	1c 82       	std	Y+4, r1	; 0x04
    1464:	1b 82       	std	Y+3, r1	; 0x03

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++)
    1466:	1d 82       	std	Y+5, r1	; 0x05
    1468:	2d c0       	rjmp	.+90     	; 0x14c4 <NWK_RouteNewEntry+0x78>
  {
    if (iter->fixed)
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	fc 01       	movw	r30, r24
    1470:	80 81       	ld	r24, Z
    1472:	81 70       	andi	r24, 0x01	; 1
    1474:	88 23       	and	r24, r24
    1476:	09 f0       	breq	.+2      	; 0x147a <NWK_RouteNewEntry+0x2e>
      continue;
    1478:	1d c0       	rjmp	.+58     	; 0x14b4 <NWK_RouteNewEntry+0x68>

    if (0 == iter->rank)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	fc 01       	movw	r30, r24
    1480:	85 81       	ldd	r24, Z+5	; 0x05
    1482:	88 23       	and	r24, r24
    1484:	29 f4       	brne	.+10     	; 0x1490 <NWK_RouteNewEntry+0x44>
    {
      entry = iter;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	9a 81       	ldd	r25, Y+2	; 0x02
    148a:	9c 83       	std	Y+4, r25	; 0x04
    148c:	8b 83       	std	Y+3, r24	; 0x03
      break;
    148e:	1d c0       	rjmp	.+58     	; 0x14ca <NWK_RouteNewEntry+0x7e>
    }

    if (NULL == entry || iter->rank < entry->rank)
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	51 f0       	breq	.+20     	; 0x14ac <NWK_RouteNewEntry+0x60>
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	fc 01       	movw	r30, r24
    149e:	25 81       	ldd	r18, Z+5	; 0x05
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	fc 01       	movw	r30, r24
    14a6:	85 81       	ldd	r24, Z+5	; 0x05
    14a8:	28 17       	cp	r18, r24
    14aa:	20 f4       	brcc	.+8      	; 0x14b4 <NWK_RouteNewEntry+0x68>
      entry = iter;
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	9c 83       	std	Y+4, r25	; 0x04
    14b2:	8b 83       	std	Y+3, r24	; 0x03
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
  NWK_RouteTableEntry_t *iter = nwkRouteTable;
  NWK_RouteTableEntry_t *entry = NULL;

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++)
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	8f 5f       	subi	r24, 0xFF	; 255
    14b8:	8d 83       	std	Y+5, r24	; 0x05
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	07 96       	adiw	r24, 0x07	; 7
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	84 36       	cpi	r24, 0x64	; 100
    14c8:	80 f2       	brcs	.-96     	; 0x146a <NWK_RouteNewEntry+0x1e>

    if (NULL == entry || iter->rank < entry->rank)
      entry = iter;
  }

  entry->multicast = 0;
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 81       	ld	r18, Z
    14d2:	2d 7f       	andi	r18, 0xFD	; 253
    14d4:	fc 01       	movw	r30, r24
    14d6:	20 83       	st	Z, r18
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	fc 01       	movw	r30, r24
    14de:	20 81       	ld	r18, Z
    14e0:	2f 70       	andi	r18, 0x0F	; 15
    14e2:	20 63       	ori	r18, 0x30	; 48
    14e4:	fc 01       	movw	r30, r24
    14e6:	20 83       	st	Z, r18
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	20 e8       	ldi	r18, 0x80	; 128
    14ee:	fc 01       	movw	r30, r24
    14f0:	25 83       	std	Z+5, r18	; 0x05

  return entry;
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	08 95       	ret

00001506 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	1f 92       	push	r1
    150c:	1f 92       	push	r1
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
  if (entry->fixed)
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	9a 81       	ldd	r25, Y+2	; 0x02
    151a:	fc 01       	movw	r30, r24
    151c:	80 81       	ld	r24, Z
    151e:	81 70       	andi	r24, 0x01	; 1
    1520:	88 23       	and	r24, r24
    1522:	09 f0       	breq	.+2      	; 0x1526 <NWK_RouteFreeEntry+0x20>
    return;
    1524:	0b c0       	rjmp	.+22     	; 0x153c <NWK_RouteFreeEntry+0x36>
  entry->dstAddr = NWK_ROUTE_UNKNOWN;
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	2f ef       	ldi	r18, 0xFF	; 255
    152c:	3f ef       	ldi	r19, 0xFF	; 255
    152e:	fc 01       	movw	r30, r24
    1530:	32 83       	std	Z+2, r19	; 0x02
    1532:	21 83       	std	Z+1, r18	; 0x01
  entry->rank = 0;
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	fc 01       	movw	r30, r24
    153a:	15 82       	std	Z+5, r1	; 0x05
}
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	08 95       	ret

00001546 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	00 d0       	rcall	.+0      	; 0x154c <NWK_RouteNextHop+0x6>
    154c:	1f 92       	push	r1
    154e:	1f 92       	push	r1
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	9c 83       	std	Y+4, r25	; 0x04
    1556:	8b 83       	std	Y+3, r24	; 0x03
    1558:	6d 83       	std	Y+5, r22	; 0x05
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	6d 81       	ldd	r22, Y+5	; 0x05
    1560:	0e 94 cc 09 	call	0x1398	; 0x1398 <NWK_RouteFindEntry>
    1564:	9a 83       	std	Y+2, r25	; 0x02
    1566:	89 83       	std	Y+1, r24	; 0x01
  if (entry)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	9a 81       	ldd	r25, Y+2	; 0x02
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	31 f0       	breq	.+12     	; 0x157c <NWK_RouteNextHop+0x36>
    return entry->nextHopAddr;
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	fc 01       	movw	r30, r24
    1576:	83 81       	ldd	r24, Z+3	; 0x03
    1578:	94 81       	ldd	r25, Z+4	; 0x04
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <NWK_RouteNextHop+0x3a>

  return NWK_ROUTE_UNKNOWN;
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	9f ef       	ldi	r25, 0xFF	; 255
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <NWK_RouteTable>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteTable(void)
{
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
  return nwkRouteTable;
    1598:	80 ef       	ldi	r24, 0xF0	; 240
    159a:	97 e0       	ldi	r25, 0x07	; 7
}
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	08 95       	ret

000015a2 <nwkRouteUpdateEntry>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteUpdateEntry(uint16_t dst, uint8_t multicast, uint16_t nextHop, uint8_t lqi)
{
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	28 97       	sbiw	r28, 0x08	; 8
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	9c 83       	std	Y+4, r25	; 0x04
    15b8:	8b 83       	std	Y+3, r24	; 0x03
    15ba:	6d 83       	std	Y+5, r22	; 0x05
    15bc:	5f 83       	std	Y+7, r21	; 0x07
    15be:	4e 83       	std	Y+6, r20	; 0x06
    15c0:	28 87       	std	Y+8, r18	; 0x08
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	6d 81       	ldd	r22, Y+5	; 0x05
    15c8:	0e 94 cc 09 	call	0x1398	; 0x1398 <NWK_RouteFindEntry>
    15cc:	9a 83       	std	Y+2, r25	; 0x02
    15ce:	89 83       	std	Y+1, r24	; 0x01

  if (NULL == entry)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	21 f4       	brne	.+8      	; 0x15e0 <nwkRouteUpdateEntry+0x3e>
    entry = NWK_RouteNewEntry();
    15d8:	0e 94 26 0a 	call	0x144c	; 0x144c <NWK_RouteNewEntry>
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01

  entry->dstAddr = dst;
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	2b 81       	ldd	r18, Y+3	; 0x03
    15e6:	3c 81       	ldd	r19, Y+4	; 0x04
    15e8:	fc 01       	movw	r30, r24
    15ea:	32 83       	std	Z+2, r19	; 0x02
    15ec:	21 83       	std	Z+1, r18	; 0x01
  entry->nextHopAddr = nextHop;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	2e 81       	ldd	r18, Y+6	; 0x06
    15f4:	3f 81       	ldd	r19, Y+7	; 0x07
    15f6:	fc 01       	movw	r30, r24
    15f8:	34 83       	std	Z+4, r19	; 0x04
    15fa:	23 83       	std	Z+3, r18	; 0x03
  entry->multicast = multicast;
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	28 2f       	mov	r18, r24
    1600:	21 70       	andi	r18, 0x01	; 1
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	9a 81       	ldd	r25, Y+2	; 0x02
    1606:	21 70       	andi	r18, 0x01	; 1
    1608:	22 0f       	add	r18, r18
    160a:	fc 01       	movw	r30, r24
    160c:	30 81       	ld	r19, Z
    160e:	3d 7f       	andi	r19, 0xFD	; 253
    1610:	23 2b       	or	r18, r19
    1612:	fc 01       	movw	r30, r24
    1614:	20 83       	st	Z, r18
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	fc 01       	movw	r30, r24
    161c:	20 81       	ld	r18, Z
    161e:	2f 70       	andi	r18, 0x0F	; 15
    1620:	20 63       	ori	r18, 0x30	; 48
    1622:	fc 01       	movw	r30, r24
    1624:	20 83       	st	Z, r18
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	20 e8       	ldi	r18, 0x80	; 128
    162c:	fc 01       	movw	r30, r24
    162e:	25 83       	std	Z+5, r18	; 0x05
  entry->lqi = lqi;
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
    1634:	28 85       	ldd	r18, Y+8	; 0x08
    1636:	fc 01       	movw	r30, r24
    1638:	26 83       	std	Z+6, r18	; 0x06
}
    163a:	28 96       	adiw	r28, 0x08	; 8
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <nwkRouteRemove>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	00 d0       	rcall	.+0      	; 0x1652 <nwkRouteRemove+0x6>
    1652:	1f 92       	push	r1
    1654:	1f 92       	push	r1
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	8b 83       	std	Y+3, r24	; 0x03
    165e:	6d 83       	std	Y+5, r22	; 0x05
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	6d 81       	ldd	r22, Y+5	; 0x05
    1666:	0e 94 cc 09 	call	0x1398	; 0x1398 <NWK_RouteFindEntry>
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
  if (entry)
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	21 f0       	breq	.+8      	; 0x167e <nwkRouteRemove+0x32>
    NWK_RouteFreeEntry(entry);
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	0e 94 83 0a 	call	0x1506	; 0x1506 <NWK_RouteFreeEntry>
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	08 95       	ret

0000168e <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	27 97       	sbiw	r28, 0x07	; 7
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	9f 83       	std	Y+7, r25	; 0x07
    16a4:	8e 83       	std	Y+6, r24	; 0x06
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
    16a6:	8e 81       	ldd	r24, Y+6	; 0x06
    16a8:	9f 81       	ldd	r25, Y+7	; 0x07
    16aa:	02 96       	adiw	r24, 0x02	; 2
    16ac:	9c 83       	std	Y+4, r25	; 0x04
    16ae:	8b 83       	std	Y+3, r24	; 0x03
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	fc 01       	movw	r30, r24
    16b6:	87 81       	ldd	r24, Z+7	; 0x07
    16b8:	90 85       	ldd	r25, Z+8	; 0x08
    16ba:	99 23       	and	r25, r25
    16bc:	74 f4       	brge	.+28     	; 0x16da <nwkRouteFrameReceived+0x4c>
      (header->macSrcAddr != header->nwkSrcAddr))
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	fc 01       	movw	r30, r24
    16c4:	27 81       	ldd	r18, Z+7	; 0x07
    16c6:	30 85       	ldd	r19, Z+8	; 0x08
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	fc 01       	movw	r30, r24
    16ce:	83 85       	ldd	r24, Z+11	; 0x0b
    16d0:	94 85       	ldd	r25, Z+12	; 0x0c
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    16d2:	28 17       	cp	r18, r24
    16d4:	39 07       	cpc	r19, r25
    16d6:	09 f0       	breq	.+2      	; 0x16da <nwkRouteFrameReceived+0x4c>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;
    16d8:	89 c0       	rjmp	.+274    	; 0x17ec <nwkRouteFrameReceived+0x15e>

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	fc 01       	movw	r30, r24
    16e0:	83 81       	ldd	r24, Z+3	; 0x03
    16e2:	94 81       	ldd	r25, Z+4	; 0x04
    16e4:	8f 3f       	cpi	r24, 0xFF	; 255
    16e6:	ff ef       	ldi	r31, 0xFF	; 255
    16e8:	9f 07       	cpc	r25, r31
    16ea:	09 f4       	brne	.+2      	; 0x16ee <nwkRouteFrameReceived+0x60>
    return;
    16ec:	7f c0       	rjmp	.+254    	; 0x17ec <nwkRouteFrameReceived+0x15e>

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	fc 01       	movw	r30, r24
    16f4:	83 85       	ldd	r24, Z+11	; 0x0b
    16f6:	94 85       	ldd	r25, Z+12	; 0x0c
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	0e 94 cc 09 	call	0x1398	; 0x1398 <NWK_RouteFindEntry>
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01

  if (entry)
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	9a 81       	ldd	r25, Y+2	; 0x02
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	09 f4       	brne	.+2      	; 0x170c <nwkRouteFrameReceived+0x7e>
    170a:	4e c0       	rjmp	.+156    	; 0x17a8 <nwkRouteFrameReceived+0x11a>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	fc 01       	movw	r30, r24
    1712:	85 81       	ldd	r24, Z+5	; 0x05
    1714:	96 81       	ldd	r25, Z+6	; 0x06
    1716:	8f 3f       	cpi	r24, 0xFF	; 255
    1718:	ff ef       	ldi	r31, 0xFF	; 255
    171a:	9f 07       	cpc	r25, r31
    171c:	79 f4       	brne	.+30     	; 0x173c <nwkRouteFrameReceived+0xae>
        nwkIb.addr == header->nwkDstAddr);
    171e:	20 91 89 0c 	lds	r18, 0x0C89
    1722:	30 91 8a 0c 	lds	r19, 0x0C8A
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	fc 01       	movw	r30, r24
    172c:	85 85       	ldd	r24, Z+13	; 0x0d
    172e:	96 85       	ldd	r25, Z+14	; 0x0e

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1730:	28 17       	cp	r18, r24
    1732:	39 07       	cpc	r19, r25
    1734:	19 f4       	brne	.+6      	; 0x173c <nwkRouteFrameReceived+0xae>
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <nwkRouteFrameReceived+0xb2>
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	81 70       	andi	r24, 0x01	; 1
    1746:	8d 83       	std	Y+5, r24	; 0x05
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	9a 81       	ldd	r25, Y+2	; 0x02
    174c:	fc 01       	movw	r30, r24
    174e:	23 81       	ldd	r18, Z+3	; 0x03
    1750:	34 81       	ldd	r19, Z+4	; 0x04
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	fc 01       	movw	r30, r24
    1758:	87 81       	ldd	r24, Z+7	; 0x07
    175a:	90 85       	ldd	r25, Z+8	; 0x08
    175c:	28 17       	cp	r18, r24
    175e:	39 07       	cpc	r19, r25
    1760:	61 f0       	breq	.+24     	; 0x177a <nwkRouteFrameReceived+0xec>
    1762:	8e 81       	ldd	r24, Y+6	; 0x06
    1764:	9f 81       	ldd	r25, Y+7	; 0x07
    1766:	8d 57       	subi	r24, 0x7D	; 125
    1768:	9f 4f       	sbci	r25, 0xFF	; 255
    176a:	fc 01       	movw	r30, r24
    176c:	20 81       	ld	r18, Z
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
    1772:	fc 01       	movw	r30, r24
    1774:	86 81       	ldd	r24, Z+6	; 0x06
    1776:	82 17       	cp	r24, r18
    1778:	18 f0       	brcs	.+6      	; 0x1780 <nwkRouteFrameReceived+0xf2>
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	88 23       	and	r24, r24
    177e:	99 f0       	breq	.+38     	; 0x17a6 <nwkRouteFrameReceived+0x118>
    {
      entry->nextHopAddr = header->macSrcAddr;
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	fc 01       	movw	r30, r24
    1786:	27 81       	ldd	r18, Z+7	; 0x07
    1788:	30 85       	ldd	r19, Z+8	; 0x08
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	9a 81       	ldd	r25, Y+2	; 0x02
    178e:	fc 01       	movw	r30, r24
    1790:	34 83       	std	Z+4, r19	; 0x04
    1792:	23 83       	std	Z+3, r18	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	fc 01       	movw	r30, r24
    179a:	20 81       	ld	r18, Z
    179c:	2f 70       	andi	r18, 0x0F	; 15
    179e:	20 63       	ori	r18, 0x30	; 48
    17a0:	fc 01       	movw	r30, r24
    17a2:	20 83       	st	Z, r18
    17a4:	19 c0       	rjmp	.+50     	; 0x17d8 <nwkRouteFrameReceived+0x14a>
    17a6:	18 c0       	rjmp	.+48     	; 0x17d8 <nwkRouteFrameReceived+0x14a>
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    17a8:	0e 94 26 0a 	call	0x144c	; 0x144c <NWK_RouteNewEntry>
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01

    entry->dstAddr = header->nwkSrcAddr;
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	fc 01       	movw	r30, r24
    17b6:	23 85       	ldd	r18, Z+11	; 0x0b
    17b8:	34 85       	ldd	r19, Z+12	; 0x0c
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	fc 01       	movw	r30, r24
    17c0:	32 83       	std	Z+2, r19	; 0x02
    17c2:	21 83       	std	Z+1, r18	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	fc 01       	movw	r30, r24
    17ca:	27 81       	ldd	r18, Z+7	; 0x07
    17cc:	30 85       	ldd	r19, Z+8	; 0x08
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	9a 81       	ldd	r25, Y+2	; 0x02
    17d2:	fc 01       	movw	r30, r24
    17d4:	34 83       	std	Z+4, r19	; 0x04
    17d6:	23 83       	std	Z+3, r18	; 0x03
  }

  entry->lqi = frame->rx.lqi;
    17d8:	8e 81       	ldd	r24, Y+6	; 0x06
    17da:	9f 81       	ldd	r25, Y+7	; 0x07
    17dc:	8d 57       	subi	r24, 0x7D	; 125
    17de:	9f 4f       	sbci	r25, 0xFF	; 255
    17e0:	fc 01       	movw	r30, r24
    17e2:	20 81       	ld	r18, Z
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	9a 81       	ldd	r25, Y+2	; 0x02
    17e8:	fc 01       	movw	r30, r24
    17ea:	26 83       	std	Z+6, r18	; 0x06
#else
  (void)frame;
#endif
}
    17ec:	27 96       	adiw	r28, 0x07	; 7
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	08 95       	ret

000017fe <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	00 d0       	rcall	.+0      	; 0x1804 <nwkRouteFrameSent+0x6>
    1804:	1f 92       	push	r1
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	9c 83       	std	Y+4, r25	; 0x04
    180c:	8b 83       	std	Y+3, r24	; 0x03
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	fc 01       	movw	r30, r24
    1814:	87 85       	ldd	r24, Z+15	; 0x0f
    1816:	90 89       	ldd	r25, Z+16	; 0x10
    1818:	8f 3f       	cpi	r24, 0xFF	; 255
    181a:	ff ef       	ldi	r31, 0xFF	; 255
    181c:	9f 07       	cpc	r25, r31
    181e:	09 f4       	brne	.+2      	; 0x1822 <nwkRouteFrameSent+0x24>
    return;
    1820:	60 c0       	rjmp	.+192    	; 0x18e2 <nwkRouteFrameSent+0xe4>

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	fc 01       	movw	r30, r24
    1828:	83 85       	ldd	r24, Z+11	; 0x0b
    182a:	83 fb       	bst	r24, 3
    182c:	88 27       	eor	r24, r24
    182e:	80 f9       	bld	r24, 0
    1830:	28 2f       	mov	r18, r24
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	fc 01       	movw	r30, r24
    1838:	87 85       	ldd	r24, Z+15	; 0x0f
    183a:	90 89       	ldd	r25, Z+16	; 0x10
    183c:	62 2f       	mov	r22, r18
    183e:	0e 94 cc 09 	call	0x1398	; 0x1398 <NWK_RouteFindEntry>
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01

  if (NULL == entry || entry->fixed)
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	39 f0       	breq	.+14     	; 0x185c <nwkRouteFrameSent+0x5e>
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	fc 01       	movw	r30, r24
    1854:	80 81       	ld	r24, Z
    1856:	81 70       	andi	r24, 0x01	; 1
    1858:	88 23       	and	r24, r24
    185a:	09 f0       	breq	.+2      	; 0x185e <nwkRouteFrameSent+0x60>
    return;
    185c:	42 c0       	rjmp	.+132    	; 0x18e2 <nwkRouteFrameSent+0xe4>

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	8d 57       	subi	r24, 0x7D	; 125
    1864:	9f 4f       	sbci	r25, 0xFF	; 255
    1866:	fc 01       	movw	r30, r24
    1868:	80 81       	ld	r24, Z
    186a:	88 23       	and	r24, r24
    186c:	d9 f4       	brne	.+54     	; 0x18a4 <nwkRouteFrameSent+0xa6>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	9a 81       	ldd	r25, Y+2	; 0x02
    1872:	fc 01       	movw	r30, r24
    1874:	20 81       	ld	r18, Z
    1876:	2f 70       	andi	r18, 0x0F	; 15
    1878:	20 63       	ori	r18, 0x30	; 48
    187a:	fc 01       	movw	r30, r24
    187c:	20 83       	st	Z, r18

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	fc 01       	movw	r30, r24
    1884:	85 81       	ldd	r24, Z+5	; 0x05
    1886:	21 e0       	ldi	r18, 0x01	; 1
    1888:	28 0f       	add	r18, r24
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	fc 01       	movw	r30, r24
    1890:	25 83       	std	Z+5, r18	; 0x05
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	fc 01       	movw	r30, r24
    1898:	85 81       	ldd	r24, Z+5	; 0x05
    189a:	8f 3f       	cpi	r24, 0xFF	; 255
    189c:	11 f5       	brne	.+68     	; 0x18e2 <nwkRouteFrameSent+0xe4>
      nwkRouteNormalizeRanks();
    189e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <nwkRouteNormalizeRanks>
    18a2:	1f c0       	rjmp	.+62     	; 0x18e2 <nwkRouteFrameSent+0xe4>
  }
  else
  {
    if (0 == --entry->score)
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	fc 01       	movw	r30, r24
    18aa:	80 81       	ld	r24, Z
    18ac:	82 95       	swap	r24
    18ae:	8f 70       	andi	r24, 0x0F	; 15
    18b0:	2f e0       	ldi	r18, 0x0F	; 15
    18b2:	28 0f       	add	r18, r24
    18b4:	2f 70       	andi	r18, 0x0F	; 15
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	22 95       	swap	r18
    18bc:	20 7f       	andi	r18, 0xF0	; 240
    18be:	fc 01       	movw	r30, r24
    18c0:	30 81       	ld	r19, Z
    18c2:	3f 70       	andi	r19, 0x0F	; 15
    18c4:	23 2b       	or	r18, r19
    18c6:	fc 01       	movw	r30, r24
    18c8:	20 83       	st	Z, r18
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	9a 81       	ldd	r25, Y+2	; 0x02
    18ce:	fc 01       	movw	r30, r24
    18d0:	80 81       	ld	r24, Z
    18d2:	82 95       	swap	r24
    18d4:	8f 70       	andi	r24, 0x0F	; 15
    18d6:	88 23       	and	r24, r24
    18d8:	21 f4       	brne	.+8      	; 0x18e2 <nwkRouteFrameSent+0xe4>
      NWK_RouteFreeEntry(entry);
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	0e 94 83 0a 	call	0x1506	; 0x1506 <NWK_RouteFreeEntry>
  }
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <nwkRoutePrepareTx+0x6>
    18f6:	1f 92       	push	r1
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	9c 83       	std	Y+4, r25	; 0x04
    18fe:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->header;
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	02 96       	adiw	r24, 0x02	; 2
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	fc 01       	movw	r30, r24
    1910:	85 85       	ldd	r24, Z+13	; 0x0d
    1912:	96 85       	ldd	r25, Z+14	; 0x0e
    1914:	8f 3f       	cpi	r24, 0xFF	; 255
    1916:	ff ef       	ldi	r31, 0xFF	; 255
    1918:	9f 07       	cpc	r25, r31
    191a:	41 f4       	brne	.+16     	; 0x192c <nwkRoutePrepareTx+0x3c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	2f ef       	ldi	r18, 0xFF	; 255
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	fc 01       	movw	r30, r24
    1926:	36 83       	std	Z+6, r19	; 0x06
    1928:	25 83       	std	Z+5, r18	; 0x05
    192a:	28 c0       	rjmp	.+80     	; 0x197c <nwkRoutePrepareTx+0x8c>
  }

  else if (header->nwkFcf.linkLocal)
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	9a 81       	ldd	r25, Y+2	; 0x02
    1930:	fc 01       	movw	r30, r24
    1932:	81 85       	ldd	r24, Z+9	; 0x09
    1934:	84 70       	andi	r24, 0x04	; 4
    1936:	88 23       	and	r24, r24
    1938:	59 f0       	breq	.+22     	; 0x1950 <nwkRoutePrepareTx+0x60>
  {
    header->macDstAddr = header->nwkDstAddr;
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	fc 01       	movw	r30, r24
    1940:	25 85       	ldd	r18, Z+13	; 0x0d
    1942:	36 85       	ldd	r19, Z+14	; 0x0e
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	9a 81       	ldd	r25, Y+2	; 0x02
    1948:	fc 01       	movw	r30, r24
    194a:	36 83       	std	Z+6, r19	; 0x06
    194c:	25 83       	std	Z+5, r18	; 0x05
    194e:	16 c0       	rjmp	.+44     	; 0x197c <nwkRoutePrepareTx+0x8c>
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	9a 81       	ldd	r25, Y+2	; 0x02
    1954:	fc 01       	movw	r30, r24
    1956:	81 85       	ldd	r24, Z+9	; 0x09
    1958:	83 fb       	bst	r24, 3
    195a:	88 27       	eor	r24, r24
    195c:	80 f9       	bld	r24, 0
    195e:	28 2f       	mov	r18, r24
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	fc 01       	movw	r30, r24
    1966:	85 85       	ldd	r24, Z+13	; 0x0d
    1968:	96 85       	ldd	r25, Z+14	; 0x0e
    196a:	62 2f       	mov	r22, r18
    196c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <NWK_RouteNextHop>
    1970:	9c 01       	movw	r18, r24
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	fc 01       	movw	r30, r24
    1978:	36 83       	std	Z+6, r19	; 0x06
    197a:	25 83       	std	Z+5, r18	; 0x05
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	08 95       	ret

0000198a <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	00 d0       	rcall	.+0      	; 0x1990 <nwkRouteFrame+0x6>
    1990:	1f 92       	push	r1
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	9c 83       	std	Y+4, r25	; 0x04
    1998:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->header;
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	02 96       	adiw	r24, 0x02	; 2
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	89 83       	std	Y+1, r24	; 0x01

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	9a 81       	ldd	r25, Y+2	; 0x02
    19a8:	fc 01       	movw	r30, r24
    19aa:	81 85       	ldd	r24, Z+9	; 0x09
    19ac:	83 fb       	bst	r24, 3
    19ae:	88 27       	eor	r24, r24
    19b0:	80 f9       	bld	r24, 0
    19b2:	28 2f       	mov	r18, r24
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	9a 81       	ldd	r25, Y+2	; 0x02
    19b8:	fc 01       	movw	r30, r24
    19ba:	85 85       	ldd	r24, Z+13	; 0x0d
    19bc:	96 85       	ldd	r25, Z+14	; 0x0e
    19be:	62 2f       	mov	r22, r18
    19c0:	0e 94 a3 0a 	call	0x1546	; 0x1546 <NWK_RouteNextHop>
    19c4:	8f 3f       	cpi	r24, 0xFF	; 255
    19c6:	ff ef       	ldi	r31, 0xFF	; 255
    19c8:	9f 07       	cpc	r25, r31
    19ca:	99 f0       	breq	.+38     	; 0x19f2 <nwkRouteFrame+0x68>
  {
    frame->tx.confirm = NULL;
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	89 57       	subi	r24, 0x79	; 121
    19d2:	9f 4f       	sbci	r25, 0xFF	; 255
    19d4:	fc 01       	movw	r30, r24
    19d6:	11 82       	std	Z+1, r1	; 0x01
    19d8:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	8a 57       	subi	r24, 0x7A	; 122
    19e0:	9f 4f       	sbci	r25, 0xFF	; 255
    19e2:	22 e0       	ldi	r18, 0x02	; 2
    19e4:	fc 01       	movw	r30, r24
    19e6:	20 83       	st	Z, r18
    nwkTxFrame(frame);
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <nwkTxFrame>
    19f0:	19 c0       	rjmp	.+50     	; 0x1a24 <nwkRouteFrame+0x9a>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	9a 81       	ldd	r25, Y+2	; 0x02
    19f6:	fc 01       	movw	r30, r24
    19f8:	81 85       	ldd	r24, Z+9	; 0x09
    19fa:	83 fb       	bst	r24, 3
    19fc:	88 27       	eor	r24, r24
    19fe:	80 f9       	bld	r24, 0
    1a00:	48 2f       	mov	r20, r24
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	9a 81       	ldd	r25, Y+2	; 0x02
    1a06:	fc 01       	movw	r30, r24
    1a08:	25 85       	ldd	r18, Z+13	; 0x0d
    1a0a:	36 85       	ldd	r19, Z+14	; 0x0e
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	fc 01       	movw	r30, r24
    1a12:	83 85       	ldd	r24, Z+11	; 0x0b
    1a14:	94 85       	ldd	r25, Z+12	; 0x0c
    1a16:	b9 01       	movw	r22, r18
    1a18:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <nwkRouteSendRouteError>
    nwkFrameFree(frame);
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	0e 94 10 09 	call	0x1220	; 0x1220 <nwkFrameFree>
  }
}
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	08 95       	ret

00001a32 <nwkRouteSendRouteError>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	29 97       	sbiw	r28, 0x09	; 9
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	9e 83       	std	Y+6, r25	; 0x06
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	78 87       	std	Y+8, r23	; 0x08
    1a4c:	6f 83       	std	Y+7, r22	; 0x07
    1a4e:	49 87       	std	Y+9, r20	; 0x09
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    1a50:	0e 94 9d 08 	call	0x113a	; 0x113a <nwkFrameAlloc>
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <nwkRouteSendRouteError+0x30>
    return;
    1a60:	41 c0       	rjmp	.+130    	; 0x1ae4 <nwkRouteSendRouteError+0xb2>

  nwkFrameCommandInit(frame);
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	0e 94 5e 09 	call	0x12bc	; 0x12bc <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	fc 01       	movw	r30, r24
    1a70:	81 81       	ldd	r24, Z+1	; 0x01
    1a72:	26 e0       	ldi	r18, 0x06	; 6
    1a74:	28 0f       	add	r18, r24
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	21 83       	std	Z+1, r18	; 0x01
  frame->tx.confirm = NULL;
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	9a 81       	ldd	r25, Y+2	; 0x02
    1a82:	89 57       	subi	r24, 0x79	; 121
    1a84:	9f 4f       	sbci	r25, 0xFF	; 255
    1a86:	fc 01       	movw	r30, r24
    1a88:	11 82       	std	Z+1, r1	; 0x01
    1a8a:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	2d 81       	ldd	r18, Y+5	; 0x05
    1a92:	3e 81       	ldd	r19, Y+6	; 0x06
    1a94:	fc 01       	movw	r30, r24
    1a96:	30 8b       	std	Z+16, r19	; 0x10
    1a98:	27 87       	std	Z+15, r18	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9e:	8f 57       	subi	r24, 0x7F	; 127
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	80 81       	ld	r24, Z
    1aa6:	91 81       	ldd	r25, Z+1	; 0x01
    1aa8:	9c 83       	std	Y+4, r25	; 0x04
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
  command->id = NWK_COMMAND_ROUTE_ERROR;
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	21 e0       	ldi	r18, 0x01	; 1
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	20 83       	st	Z, r18
  command->srcAddr = src;
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	2d 81       	ldd	r18, Y+5	; 0x05
    1abc:	3e 81       	ldd	r19, Y+6	; 0x06
    1abe:	fc 01       	movw	r30, r24
    1ac0:	32 83       	std	Z+2, r19	; 0x02
    1ac2:	21 83       	std	Z+1, r18	; 0x01
  command->dstAddr = dst;
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	2f 81       	ldd	r18, Y+7	; 0x07
    1aca:	38 85       	ldd	r19, Y+8	; 0x08
    1acc:	fc 01       	movw	r30, r24
    1ace:	34 83       	std	Z+4, r19	; 0x04
    1ad0:	23 83       	std	Z+3, r18	; 0x03
  command->multicast = multicast;
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	29 85       	ldd	r18, Y+9	; 0x09
    1ad8:	fc 01       	movw	r30, r24
    1ada:	25 83       	std	Z+5, r18	; 0x05

  nwkTxFrame(frame);
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <nwkTxFrame>
}
    1ae4:	29 96       	adiw	r28, 0x09	; 9
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	08 95       	ret

00001af6 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <nwkRouteErrorReceived+0x6>
    1afc:	1f 92       	push	r1
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	9c 83       	std	Y+4, r25	; 0x04
    1b04:	8b 83       	std	Y+3, r24	; 0x03
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	87 81       	ldd	r24, Z+7	; 0x07
    1b0e:	90 85       	ldd	r25, Z+8	; 0x08
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	fc 01       	movw	r30, r24
    1b1a:	81 85       	ldd	r24, Z+9	; 0x09
    1b1c:	86 30       	cpi	r24, 0x06	; 6
    1b1e:	11 f0       	breq	.+4      	; 0x1b24 <nwkRouteErrorReceived+0x2e>
    return false;
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	0d c0       	rjmp	.+26     	; 0x1b3e <nwkRouteErrorReceived+0x48>

  nwkRouteRemove(command->dstAddr, command->multicast);
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	fc 01       	movw	r30, r24
    1b2a:	25 81       	ldd	r18, Z+5	; 0x05
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b30:	fc 01       	movw	r30, r24
    1b32:	83 81       	ldd	r24, Z+3	; 0x03
    1b34:	94 81       	ldd	r25, Z+4	; 0x04
    1b36:	62 2f       	mov	r22, r18
    1b38:	0e 94 26 0b 	call	0x164c	; 0x164c <nwkRouteRemove>

  return true;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
}
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	08 95       	ret

00001b4c <nwkRouteNormalizeRanks>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	1f 92       	push	r1
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1b56:	19 82       	std	Y+1, r1	; 0x01
    1b58:	26 c0       	rjmp	.+76     	; 0x1ba6 <nwkRouteNormalizeRanks+0x5a>
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	48 2f       	mov	r20, r24
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	ca 01       	movw	r24, r20
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	84 1b       	sub	r24, r20
    1b76:	95 0b       	sbc	r25, r21
    1b78:	8b 50       	subi	r24, 0x0B	; 11
    1b7a:	98 4f       	sbci	r25, 0xF8	; 248
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	80 81       	ld	r24, Z
    1b80:	86 95       	lsr	r24
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	48 0f       	add	r20, r24
    1b86:	c9 01       	movw	r24, r18
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	82 1b       	sub	r24, r18
    1b96:	93 0b       	sbc	r25, r19
    1b98:	8b 50       	subi	r24, 0x0B	; 11
    1b9a:	98 4f       	sbci	r25, 0xF8	; 248
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	40 83       	st	Z, r20

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	8f 5f       	subi	r24, 0xFF	; 255
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	84 36       	cpi	r24, 0x64	; 100
    1baa:	b8 f2       	brcs	.-82     	; 0x1b5a <nwkRouteNormalizeRanks+0xe>
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
}
    1bac:	0f 90       	pop	r0
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	08 95       	ret

00001bb4 <nwkFramePayloadSize>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	1f 92       	push	r1
    1bba:	1f 92       	push	r1
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
  return frame->size - (frame->payload - frame->data);
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	fc 01       	movw	r30, r24
    1bca:	41 81       	ldd	r20, Z+1	; 0x01
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	02 96       	adiw	r24, 0x02	; 2
    1bd2:	9c 01       	movw	r18, r24
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	8f 57       	subi	r24, 0x7F	; 127
    1bda:	9f 4f       	sbci	r25, 0xFF	; 255
    1bdc:	fc 01       	movw	r30, r24
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	b9 01       	movw	r22, r18
    1be4:	68 1b       	sub	r22, r24
    1be6:	79 0b       	sbc	r23, r25
    1be8:	cb 01       	movw	r24, r22
    1bea:	84 0f       	add	r24, r20
}
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	df 91       	pop	r29
    1bf2:	cf 91       	pop	r28
    1bf4:	08 95       	ret

00001bf6 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	1f 92       	push	r1
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1c00:	19 82       	std	Y+1, r1	; 0x01
    1c02:	11 c0       	rjmp	.+34     	; 0x1c26 <nwkRxInit+0x30>
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	c9 01       	movw	r24, r18
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	82 0f       	add	r24, r18
    1c16:	93 1f       	adc	r25, r19
    1c18:	80 55       	subi	r24, 0x50	; 80
    1c1a:	95 4f       	sbci	r25, 0xF5	; 245
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	10 82       	st	Z, r1
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	8f 5f       	subi	r24, 0xFF	; 255
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	82 33       	cpi	r24, 0x32	; 50
    1c2a:	60 f3       	brcs	.-40     	; 0x1c04 <nwkRxInit+0xe>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1c2c:	84 e6       	ldi	r24, 0x64	; 100
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e0       	ldi	r26, 0x00	; 0
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	80 93 ad 0b 	sts	0x0BAD, r24
    1c38:	90 93 ae 0b 	sts	0x0BAE, r25
    1c3c:	a0 93 af 0b 	sts	0x0BAF, r26
    1c40:	b0 93 b0 0b 	sts	0x0BB0, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1c44:	10 92 b1 0b 	sts	0x0BB1, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    1c48:	86 e1       	ldi	r24, 0x16	; 22
    1c4a:	9f e0       	ldi	r25, 0x0F	; 15
    1c4c:	90 93 b3 0b 	sts	0x0BB3, r25
    1c50:	80 93 b2 0b 	sts	0x0BB2, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    1c54:	64 e5       	ldi	r22, 0x54	; 84
    1c56:	70 e1       	ldi	r23, 0x10	; 16
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <NWK_OpenEndpoint>
}
    1c5e:	0f 90       	pop	r0
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	08 95       	ret

00001c66 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <PHY_DataInd+0x6>
    1c6c:	1f 92       	push	r1
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	fc 01       	movw	r30, r24
    1c84:	80 81       	ld	r24, Z
    1c86:	88 38       	cpi	r24, 0x88	; 136
    1c88:	c1 f4       	brne	.+48     	; 0x1cba <PHY_DataInd+0x54>
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	fc 01       	movw	r30, r24
    1c90:	80 81       	ld	r24, Z
    1c92:	91 81       	ldd	r25, Z+1	; 0x01
    1c94:	fc 01       	movw	r30, r24
    1c96:	80 81       	ld	r24, Z
    1c98:	81 36       	cpi	r24, 0x61	; 97
    1c9a:	49 f0       	breq	.+18     	; 0x1cae <PHY_DataInd+0x48>
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	80 81       	ld	r24, Z
    1caa:	81 34       	cpi	r24, 0x41	; 65
    1cac:	31 f4       	brne	.+12     	; 0x1cba <PHY_DataInd+0x54>
      ind->size < sizeof(NwkFrameHeader_t))
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    1cb6:	80 31       	cpi	r24, 0x10	; 16
    1cb8:	08 f4       	brcc	.+2      	; 0x1cbc <PHY_DataInd+0x56>
      ind->size < sizeof(NwkFrameHeader_t))
    return;
    1cba:	3b c0       	rjmp	.+118    	; 0x1d32 <PHY_DataInd+0xcc>

  if (NULL == (frame = nwkFrameAlloc()))
    1cbc:	0e 94 9d 08 	call	0x113a	; 0x113a <nwkFrameAlloc>
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	09 f4       	brne	.+2      	; 0x1cce <PHY_DataInd+0x68>
    return;
    1ccc:	32 c0       	rjmp	.+100    	; 0x1d32 <PHY_DataInd+0xcc>

  frame->state = NWK_RX_STATE_RECEIVED;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	20 e2       	ldi	r18, 0x20	; 32
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	20 83       	st	Z, r18
  frame->size = ind->size;
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	fc 01       	movw	r30, r24
    1cde:	22 81       	ldd	r18, Z+2	; 0x02
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	21 83       	std	Z+1, r18	; 0x01
  frame->rx.lqi = ind->lqi;
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	fc 01       	movw	r30, r24
    1cee:	23 81       	ldd	r18, Z+3	; 0x03
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf4:	8d 57       	subi	r24, 0x7D	; 125
    1cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	fc 01       	movw	r30, r24
    1d02:	24 81       	ldd	r18, Z+4	; 0x04
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	9a 81       	ldd	r25, Y+2	; 0x02
    1d08:	8c 57       	subi	r24, 0x7C	; 124
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	20 83       	st	Z, r18
  memcpy(frame->data, ind->data, ind->size);
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	fc 01       	movw	r30, r24
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	48 2f       	mov	r20, r24
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	fc 01       	movw	r30, r24
    1d22:	20 81       	ld	r18, Z
    1d24:	31 81       	ldd	r19, Z+1	; 0x01
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2a:	02 96       	adiw	r24, 0x02	; 2
    1d2c:	b9 01       	movw	r22, r18
    1d2e:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <memcpy>
}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <nwkRxSendAck>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxSendAck(NwkFrame_t *frame)
{
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <nwkRxSendAck+0x6>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <nwkRxSendAck+0x8>
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    1d50:	0e 94 9d 08 	call	0x113a	; 0x113a <nwkFrameAlloc>
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <nwkRxSendAck+0x22>
    return;
    1d60:	4f c0       	rjmp	.+158    	; 0x1e00 <nwkRxSendAck+0xc0>

  nwkFrameCommandInit(ack);
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a 81       	ldd	r25, Y+2	; 0x02
    1d66:	0e 94 5e 09 	call	0x12bc	; 0x12bc <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6e:	fc 01       	movw	r30, r24
    1d70:	81 81       	ldd	r24, Z+1	; 0x01
    1d72:	23 e0       	ldi	r18, 0x03	; 3
    1d74:	28 0f       	add	r18, r24
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	21 83       	std	Z+1, r18	; 0x01
  ack->tx.confirm = NULL;
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	9a 81       	ldd	r25, Y+2	; 0x02
    1d82:	89 57       	subi	r24, 0x79	; 121
    1d84:	9f 4f       	sbci	r25, 0xFF	; 255
    1d86:	fc 01       	movw	r30, r24
    1d88:	11 82       	std	Z+1, r1	; 0x01
    1d8a:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	fc 01       	movw	r30, r24
    1d92:	83 85       	ldd	r24, Z+11	; 0x0b
    1d94:	81 fb       	bst	r24, 1
    1d96:	22 27       	eor	r18, r18
    1d98:	20 f9       	bld	r18, 0
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	21 70       	andi	r18, 0x01	; 1
    1da0:	22 0f       	add	r18, r18
    1da2:	fc 01       	movw	r30, r24
    1da4:	33 85       	ldd	r19, Z+11	; 0x0b
    1da6:	3d 7f       	andi	r19, 0xFD	; 253
    1da8:	23 2b       	or	r18, r19
    1daa:	fc 01       	movw	r30, r24
    1dac:	23 87       	std	Z+11, r18	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	fc 01       	movw	r30, r24
    1db4:	25 85       	ldd	r18, Z+13	; 0x0d
    1db6:	36 85       	ldd	r19, Z+14	; 0x0e
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	30 8b       	std	Z+16, r19	; 0x10
    1dc0:	27 87       	std	Z+15, r18	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc6:	8f 57       	subi	r24, 0x7F	; 127
    1dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dca:	fc 01       	movw	r30, r24
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	9c 83       	std	Y+4, r25	; 0x04
    1dd2:	8b 83       	std	Y+3, r24	; 0x03
  command->id = NWK_COMMAND_ACK;
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	fc 01       	movw	r30, r24
    1dda:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1ddc:	20 91 a6 0b 	lds	r18, 0x0BA6
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	9c 81       	ldd	r25, Y+4	; 0x04
    1de4:	fc 01       	movw	r30, r24
    1de6:	22 83       	std	Z+2, r18	; 0x02
  command->seq = frame->header.nwkSeq;
    1de8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dea:	9e 81       	ldd	r25, Y+6	; 0x06
    1dec:	fc 01       	movw	r30, r24
    1dee:	24 85       	ldd	r18, Z+12	; 0x0c
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	fc 01       	movw	r30, r24
    1df6:	21 83       	std	Z+1, r18	; 0x01

  nwkTxFrame(ack);
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <nwkTxFrame>
}
    1e00:	26 96       	adiw	r28, 0x06	; 6
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	08 95       	ret

00001e12 <NWK_SetAckControl>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	1f 92       	push	r1
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	89 83       	std	Y+1, r24	; 0x01
  nwkRxAckControl = control;
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	80 93 a6 0b 	sts	0x0BA6, r24
}
    1e24:	0f 90       	pop	r0
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	08 95       	ret

00001e2c <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <nwkRxDuplicateRejectionTimerHandler+0x6>
    1e32:	1f 92       	push	r1
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	9c 83       	std	Y+4, r25	; 0x04
    1e3a:	8b 83       	std	Y+3, r24	; 0x03
  bool restart = false;
    1e3c:	19 82       	std	Y+1, r1	; 0x01

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1e3e:	1a 82       	std	Y+2, r1	; 0x02
    1e40:	30 c0       	rjmp	.+96     	; 0x1ea2 <nwkRxDuplicateRejectionTimerHandler+0x76>
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	c9 01       	movw	r24, r18
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	82 0f       	add	r24, r18
    1e54:	93 1f       	adc	r25, r19
    1e56:	80 55       	subi	r24, 0x50	; 80
    1e58:	95 4f       	sbci	r25, 0xF5	; 245
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	80 81       	ld	r24, Z
    1e5e:	88 23       	and	r24, r24
    1e60:	e9 f0       	breq	.+58     	; 0x1e9c <nwkRxDuplicateRejectionTimerHandler+0x70>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	c9 01       	movw	r24, r18
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	82 0f       	add	r24, r18
    1e74:	93 1f       	adc	r25, r19
    1e76:	80 55       	subi	r24, 0x50	; 80
    1e78:	95 4f       	sbci	r25, 0xF5	; 245
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	80 81       	ld	r24, Z
    1e7e:	4f ef       	ldi	r20, 0xFF	; 255
    1e80:	48 0f       	add	r20, r24
    1e82:	c9 01       	movw	r24, r18
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	82 0f       	add	r24, r18
    1e8e:	93 1f       	adc	r25, r19
    1e90:	80 55       	subi	r24, 0x50	; 80
    1e92:	95 4f       	sbci	r25, 0xF5	; 245
    1e94:	fc 01       	movw	r30, r24
    1e96:	40 83       	st	Z, r20
      restart = true;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	89 83       	std	Y+1, r24	; 0x01
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	82 33       	cpi	r24, 0x32	; 50
    1ea6:	68 f2       	brcs	.-102    	; 0x1e42 <nwkRxDuplicateRejectionTimerHandler+0x16>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	88 23       	and	r24, r24
    1eac:	21 f0       	breq	.+8      	; 0x1eb6 <nwkRxDuplicateRejectionTimerHandler+0x8a>
    SYS_TimerStart(timer);
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SYS_TimerStart>
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	08 95       	ret

00001ec4 <nwkRxRejectDuplicate>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	29 97       	sbiw	r28, 0x09	; 9
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	99 87       	std	Y+9, r25	; 0x09
    1eda:	88 87       	std	Y+8, r24	; 0x08
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1edc:	1a 82       	std	Y+2, r1	; 0x02
    1ede:	19 82       	std	Y+1, r1	; 0x01

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1ee0:	1b 82       	std	Y+3, r1	; 0x03
    1ee2:	ae c0       	rjmp	.+348    	; 0x2040 <nwkRxRejectDuplicate+0x17c>
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	c9 01       	movw	r24, r18
    1eec:	88 0f       	add	r24, r24
    1eee:	99 1f       	adc	r25, r25
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	82 0f       	add	r24, r18
    1ef6:	93 1f       	adc	r25, r19
    1ef8:	84 55       	subi	r24, 0x54	; 84
    1efa:	95 4f       	sbci	r25, 0xF5	; 245
    1efc:	9d 83       	std	Y+5, r25	; 0x05
    1efe:	8c 83       	std	Y+4, r24	; 0x04

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    1f00:	8c 81       	ldd	r24, Y+4	; 0x04
    1f02:	9d 81       	ldd	r25, Y+5	; 0x05
    1f04:	fc 01       	movw	r30, r24
    1f06:	84 81       	ldd	r24, Z+4	; 0x04
    1f08:	88 23       	and	r24, r24
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <nwkRxRejectDuplicate+0x4a>
    1f0c:	8c c0       	rjmp	.+280    	; 0x2026 <nwkRxRejectDuplicate+0x162>
    1f0e:	88 85       	ldd	r24, Y+8	; 0x08
    1f10:	99 85       	ldd	r25, Y+9	; 0x09
    1f12:	fc 01       	movw	r30, r24
    1f14:	23 85       	ldd	r18, Z+11	; 0x0b
    1f16:	34 85       	ldd	r19, Z+12	; 0x0c
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	80 81       	ld	r24, Z
    1f20:	91 81       	ldd	r25, Z+1	; 0x01
    1f22:	28 17       	cp	r18, r24
    1f24:	39 07       	cpc	r19, r25
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <nwkRxRejectDuplicate+0x66>
    1f28:	7e c0       	rjmp	.+252    	; 0x2026 <nwkRxRejectDuplicate+0x162>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2e:	fc 01       	movw	r30, r24
    1f30:	22 81       	ldd	r18, Z+2	; 0x02
    1f32:	88 85       	ldd	r24, Y+8	; 0x08
    1f34:	99 85       	ldd	r25, Y+9	; 0x09
    1f36:	fc 01       	movw	r30, r24
    1f38:	82 85       	ldd	r24, Z+10	; 0x0a
    1f3a:	f2 2f       	mov	r31, r18
    1f3c:	f8 1b       	sub	r31, r24
    1f3e:	8f 2f       	mov	r24, r31
    1f40:	8e 83       	std	Y+6, r24	; 0x06

      if (diff < 8)
    1f42:	8e 81       	ldd	r24, Y+6	; 0x06
    1f44:	88 30       	cpi	r24, 0x08	; 8
    1f46:	08 f0       	brcs	.+2      	; 0x1f4a <nwkRxRejectDuplicate+0x86>
    1f48:	48 c0       	rjmp	.+144    	; 0x1fda <nwkRxRejectDuplicate+0x116>
      {
        if (entry->mask & (1 << diff))
    1f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4e:	fc 01       	movw	r30, r24
    1f50:	83 81       	ldd	r24, Z+3	; 0x03
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	2e 81       	ldd	r18, Y+6	; 0x06
    1f58:	22 2f       	mov	r18, r18
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	02 2e       	mov	r0, r18
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <nwkRxRejectDuplicate+0xa0>
    1f60:	95 95       	asr	r25
    1f62:	87 95       	ror	r24
    1f64:	0a 94       	dec	r0
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <nwkRxRejectDuplicate+0x9c>
    1f68:	81 70       	andi	r24, 0x01	; 1
    1f6a:	99 27       	eor	r25, r25
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	f1 f0       	breq	.+60     	; 0x1fac <nwkRxRejectDuplicate+0xe8>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    1f70:	20 91 89 0c 	lds	r18, 0x0C89
    1f74:	30 91 8a 0c 	lds	r19, 0x0C8A
    1f78:	88 85       	ldd	r24, Y+8	; 0x08
    1f7a:	99 85       	ldd	r25, Y+9	; 0x09
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	85 81       	ldd	r24, Z+5	; 0x05
    1f80:	96 81       	ldd	r25, Z+6	; 0x06
    1f82:	28 17       	cp	r18, r24
    1f84:	39 07       	cpc	r19, r25
    1f86:	81 f4       	brne	.+32     	; 0x1fa8 <nwkRxRejectDuplicate+0xe4>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    1f88:	88 85       	ldd	r24, Y+8	; 0x08
    1f8a:	99 85       	ldd	r25, Y+9	; 0x09
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	81 85       	ldd	r24, Z+9	; 0x09
    1f90:	83 fb       	bst	r24, 3
    1f92:	88 27       	eor	r24, r24
    1f94:	80 f9       	bld	r24, 0
    1f96:	28 2f       	mov	r18, r24
    1f98:	88 85       	ldd	r24, Y+8	; 0x08
    1f9a:	99 85       	ldd	r25, Y+9	; 0x09
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	85 85       	ldd	r24, Z+13	; 0x0d
    1fa0:	96 85       	ldd	r25, Z+14	; 0x0e
    1fa2:	62 2f       	mov	r22, r18
    1fa4:	0e 94 26 0b 	call	0x164c	; 0x164c <nwkRouteRemove>
        #endif
          return true;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	75 c0       	rjmp	.+234    	; 0x2096 <nwkRxRejectDuplicate+0x1d2>
        }

        entry->mask |= (1 << diff);
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	83 81       	ldd	r24, Z+3	; 0x03
    1fb4:	48 2f       	mov	r20, r24
    1fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <nwkRxRejectDuplicate+0x102>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	2a 95       	dec	r18
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <nwkRxRejectDuplicate+0xfe>
    1fca:	84 2b       	or	r24, r20
    1fcc:	28 2f       	mov	r18, r24
    1fce:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	23 83       	std	Z+3, r18	; 0x03
        return false;
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	5e c0       	rjmp	.+188    	; 0x2096 <nwkRxRejectDuplicate+0x1d2>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
    1fda:	8e 81       	ldd	r24, Y+6	; 0x06
    1fdc:	81 95       	neg	r24
    1fde:	8f 83       	std	Y+7, r24	; 0x07

        entry->seq = header->nwkSeq;
    1fe0:	88 85       	ldd	r24, Y+8	; 0x08
    1fe2:	99 85       	ldd	r25, Y+9	; 0x09
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	22 85       	ldd	r18, Z+10	; 0x0a
    1fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fea:	9d 81       	ldd	r25, Y+5	; 0x05
    1fec:	fc 01       	movw	r30, r24
    1fee:	22 83       	std	Z+2, r18	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	83 81       	ldd	r24, Z+3	; 0x03
    1ff8:	88 2f       	mov	r24, r24
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	2f 81       	ldd	r18, Y+7	; 0x07
    1ffe:	22 2f       	mov	r18, r18
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <nwkRxRejectDuplicate+0x144>
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	2a 95       	dec	r18
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <nwkRxRejectDuplicate+0x140>
    200c:	81 60       	ori	r24, 0x01	; 1
    200e:	28 2f       	mov	r18, r24
    2010:	8c 81       	ldd	r24, Y+4	; 0x04
    2012:	9d 81       	ldd	r25, Y+5	; 0x05
    2014:	fc 01       	movw	r30, r24
    2016:	23 83       	std	Z+3, r18	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	9d 81       	ldd	r25, Y+5	; 0x05
    201c:	25 e1       	ldi	r18, 0x15	; 21
    201e:	fc 01       	movw	r30, r24
    2020:	24 83       	std	Z+4, r18	; 0x04
        return false;
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	38 c0       	rjmp	.+112    	; 0x2096 <nwkRxRejectDuplicate+0x1d2>
      }
    }

    if (0 == entry->ttl)
    2026:	8c 81       	ldd	r24, Y+4	; 0x04
    2028:	9d 81       	ldd	r25, Y+5	; 0x05
    202a:	fc 01       	movw	r30, r24
    202c:	84 81       	ldd	r24, Z+4	; 0x04
    202e:	88 23       	and	r24, r24
    2030:	21 f4       	brne	.+8      	; 0x203a <nwkRxRejectDuplicate+0x176>
      freeEntry = entry;
    2032:	8c 81       	ldd	r24, Y+4	; 0x04
    2034:	9d 81       	ldd	r25, Y+5	; 0x05
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	8f 5f       	subi	r24, 0xFF	; 255
    203e:	8b 83       	std	Y+3, r24	; 0x03
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	82 33       	cpi	r24, 0x32	; 50
    2044:	08 f4       	brcc	.+2      	; 0x2048 <nwkRxRejectDuplicate+0x184>
    2046:	4e cf       	rjmp	.-356    	; 0x1ee4 <nwkRxRejectDuplicate+0x20>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	9a 81       	ldd	r25, Y+2	; 0x02
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	11 f4       	brne	.+4      	; 0x2054 <nwkRxRejectDuplicate+0x190>
    return true;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	21 c0       	rjmp	.+66     	; 0x2096 <nwkRxRejectDuplicate+0x1d2>

  freeEntry->src = header->nwkSrcAddr;
    2054:	88 85       	ldd	r24, Y+8	; 0x08
    2056:	99 85       	ldd	r25, Y+9	; 0x09
    2058:	fc 01       	movw	r30, r24
    205a:	23 85       	ldd	r18, Z+11	; 0x0b
    205c:	34 85       	ldd	r19, Z+12	; 0x0c
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	9a 81       	ldd	r25, Y+2	; 0x02
    2062:	fc 01       	movw	r30, r24
    2064:	31 83       	std	Z+1, r19	; 0x01
    2066:	20 83       	st	Z, r18
  freeEntry->seq = header->nwkSeq;
    2068:	88 85       	ldd	r24, Y+8	; 0x08
    206a:	99 85       	ldd	r25, Y+9	; 0x09
    206c:	fc 01       	movw	r30, r24
    206e:	22 85       	ldd	r18, Z+10	; 0x0a
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	fc 01       	movw	r30, r24
    2076:	22 83       	std	Z+2, r18	; 0x02
  freeEntry->mask = 1;
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	21 e0       	ldi	r18, 0x01	; 1
    207e:	fc 01       	movw	r30, r24
    2080:	23 83       	std	Z+3, r18	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	25 e1       	ldi	r18, 0x15	; 21
    2088:	fc 01       	movw	r30, r24
    208a:	24 83       	std	Z+4, r18	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    208c:	87 ea       	ldi	r24, 0xA7	; 167
    208e:	9b e0       	ldi	r25, 0x0B	; 11
    2090:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SYS_TimerStart>

  return false;
    2094:	80 e0       	ldi	r24, 0x00	; 0
}
    2096:	29 96       	adiw	r28, 0x09	; 9
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	08 95       	ret

000020a8 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxServiceDataInd(NWK_DataInd_t *ind)
{
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	1f 92       	push	r1
    20ae:	1f 92       	push	r1
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	9a 83       	std	Y+2, r25	; 0x02
    20b6:	89 83       	std	Y+1, r24	; 0x01
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	9a 81       	ldd	r25, Y+2	; 0x02
    20bc:	fc 01       	movw	r30, r24
    20be:	81 85       	ldd	r24, Z+9	; 0x09
    20c0:	88 23       	and	r24, r24
    20c2:	11 f4       	brne	.+4      	; 0x20c8 <nwkRxServiceDataInd+0x20>
    return false;
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	1a c0       	rjmp	.+52     	; 0x20fc <nwkRxServiceDataInd+0x54>

  switch (ind->data[0])
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	fc 01       	movw	r30, r24
    20ce:	87 81       	ldd	r24, Z+7	; 0x07
    20d0:	90 85       	ldd	r25, Z+8	; 0x08
    20d2:	fc 01       	movw	r30, r24
    20d4:	80 81       	ld	r24, Z
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	21 f0       	breq	.+8      	; 0x20e6 <nwkRxServiceDataInd+0x3e>
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	91 05       	cpc	r25, r1
    20e2:	31 f0       	breq	.+12     	; 0x20f0 <nwkRxServiceDataInd+0x48>
    20e4:	0a c0       	rjmp	.+20     	; 0x20fa <nwkRxServiceDataInd+0x52>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	0e 94 23 14 	call	0x2846	; 0x2846 <nwkTxAckReceived>
    20ee:	06 c0       	rjmp	.+12     	; 0x20fc <nwkRxServiceDataInd+0x54>

#ifdef NWK_ENABLE_ROUTING
    case NWK_COMMAND_ROUTE_ERROR:
      return nwkRouteErrorReceived(ind);
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <nwkRouteErrorReceived>
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <nwkRxServiceDataInd+0x54>
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    20fa:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	08 95       	ret

00002106 <nwkRxHandleReceivedFrame>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	00 d0       	rcall	.+0      	; 0x210c <nwkRxHandleReceivedFrame+0x6>
    210c:	1f 92       	push	r1
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	9c 83       	std	Y+4, r25	; 0x04
    2114:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->header;
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	02 96       	adiw	r24, 0x02	; 2
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01

  frame->state = NWK_RX_STATE_FINISH;
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	24 e2       	ldi	r18, 0x24	; 36
    2126:	fc 01       	movw	r30, r24
    2128:	20 83       	st	Z, r18

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	fc 01       	movw	r30, r24
    2130:	81 85       	ldd	r24, Z+9	; 0x09
    2132:	82 70       	andi	r24, 0x02	; 2
    2134:	88 23       	and	r24, r24
    2136:	09 f0       	breq	.+2      	; 0x213a <nwkRxHandleReceivedFrame+0x34>
    return;
    2138:	a2 c0       	rjmp	.+324    	; 0x227e <nwkRxHandleReceivedFrame+0x178>

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	fc 01       	movw	r30, r24
    2140:	81 85       	ldd	r24, Z+9	; 0x09
    2142:	88 70       	andi	r24, 0x08	; 8
    2144:	88 23       	and	r24, r24
    2146:	09 f0       	breq	.+2      	; 0x214a <nwkRxHandleReceivedFrame+0x44>
    return;
    2148:	9a c0       	rjmp	.+308    	; 0x227e <nwkRxHandleReceivedFrame+0x178>
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	9a 81       	ldd	r25, Y+2	; 0x02
    214e:	fc 01       	movw	r30, r24
    2150:	83 81       	ldd	r24, Z+3	; 0x03
    2152:	94 81       	ldd	r25, Z+4	; 0x04
    2154:	8f 3f       	cpi	r24, 0xFF	; 255
    2156:	ff ef       	ldi	r31, 0xFF	; 255
    2158:	9f 07       	cpc	r25, r31
    215a:	e1 f4       	brne	.+56     	; 0x2194 <nwkRxHandleReceivedFrame+0x8e>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    215c:	20 91 89 0c 	lds	r18, 0x0C89
    2160:	30 91 8a 0c 	lds	r19, 0x0C8A
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	9a 81       	ldd	r25, Y+2	; 0x02
    2168:	fc 01       	movw	r30, r24
    216a:	85 85       	ldd	r24, Z+13	; 0x0d
    216c:	96 85       	ldd	r25, Z+14	; 0x0e
    216e:	28 17       	cp	r18, r24
    2170:	39 07       	cpc	r19, r25
    2172:	49 f0       	breq	.+18     	; 0x2186 <nwkRxHandleReceivedFrame+0x80>
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	9a 81       	ldd	r25, Y+2	; 0x02
    2178:	fc 01       	movw	r30, r24
    217a:	85 85       	ldd	r24, Z+13	; 0x0d
    217c:	96 85       	ldd	r25, Z+14	; 0x0e
    217e:	8f 3f       	cpi	r24, 0xFF	; 255
    2180:	ff ef       	ldi	r31, 0xFF	; 255
    2182:	9f 07       	cpc	r25, r31
    2184:	31 f4       	brne	.+12     	; 0x2192 <nwkRxHandleReceivedFrame+0x8c>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	22 e2       	ldi	r18, 0x22	; 34
    218c:	fc 01       	movw	r30, r24
    218e:	20 83       	st	Z, r18
    }
    return;
    2190:	76 c0       	rjmp	.+236    	; 0x227e <nwkRxHandleReceivedFrame+0x178>
    2192:	75 c0       	rjmp	.+234    	; 0x227e <nwkRxHandleReceivedFrame+0x178>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	fc 01       	movw	r30, r24
    219a:	85 85       	ldd	r24, Z+13	; 0x0d
    219c:	96 85       	ldd	r25, Z+14	; 0x0e
    219e:	8f 3f       	cpi	r24, 0xFF	; 255
    21a0:	ff ef       	ldi	r31, 0xFF	; 255
    21a2:	9f 07       	cpc	r25, r31
    21a4:	41 f4       	brne	.+16     	; 0x21b6 <nwkRxHandleReceivedFrame+0xb0>
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	fc 01       	movw	r30, r24
    21ac:	81 85       	ldd	r24, Z+9	; 0x09
    21ae:	81 70       	andi	r24, 0x01	; 1
    21b0:	88 23       	and	r24, r24
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <nwkRxHandleReceivedFrame+0xb0>
    return;
    21b4:	64 c0       	rjmp	.+200    	; 0x227e <nwkRxHandleReceivedFrame+0x178>

  if (nwkIb.addr == header->nwkSrcAddr)
    21b6:	20 91 89 0c 	lds	r18, 0x0C89
    21ba:	30 91 8a 0c 	lds	r19, 0x0C8A
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	9a 81       	ldd	r25, Y+2	; 0x02
    21c2:	fc 01       	movw	r30, r24
    21c4:	83 85       	ldd	r24, Z+11	; 0x0b
    21c6:	94 85       	ldd	r25, Z+12	; 0x0c
    21c8:	28 17       	cp	r18, r24
    21ca:	39 07       	cpc	r19, r25
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <nwkRxHandleReceivedFrame+0xca>
    return;
    21ce:	57 c0       	rjmp	.+174    	; 0x227e <nwkRxHandleReceivedFrame+0x178>

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	0e 94 47 0b 	call	0x168e	; 0x168e <nwkRouteFrameReceived>
#endif

  if (nwkRxRejectDuplicate(header))
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	9a 81       	ldd	r25, Y+2	; 0x02
    21dc:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <nwkRxRejectDuplicate>
    21e0:	88 23       	and	r24, r24
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <nwkRxHandleReceivedFrame+0xe0>
    return;
    21e4:	4c c0       	rjmp	.+152    	; 0x227e <nwkRxHandleReceivedFrame+0x178>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ea:	fc 01       	movw	r30, r24
    21ec:	85 81       	ldd	r24, Z+5	; 0x05
    21ee:	96 81       	ldd	r25, Z+6	; 0x06
    21f0:	8f 3f       	cpi	r24, 0xFF	; 255
    21f2:	ff ef       	ldi	r31, 0xFF	; 255
    21f4:	9f 07       	cpc	r25, r31
    21f6:	b9 f4       	brne	.+46     	; 0x2226 <nwkRxHandleReceivedFrame+0x120>
    21f8:	20 91 89 0c 	lds	r18, 0x0C89
    21fc:	30 91 8a 0c 	lds	r19, 0x0C8A
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	9a 81       	ldd	r25, Y+2	; 0x02
    2204:	fc 01       	movw	r30, r24
    2206:	85 85       	ldd	r24, Z+13	; 0x0d
    2208:	96 85       	ldd	r25, Z+14	; 0x0e
    220a:	28 17       	cp	r18, r24
    220c:	39 07       	cpc	r19, r25
    220e:	59 f0       	breq	.+22     	; 0x2226 <nwkRxHandleReceivedFrame+0x120>
        0 == header->nwkFcf.linkLocal)
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
    2214:	fc 01       	movw	r30, r24
    2216:	81 85       	ldd	r24, Z+9	; 0x09
    2218:	84 70       	andi	r24, 0x04	; 4
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    221a:	88 23       	and	r24, r24
    221c:	21 f4       	brne	.+8      	; 0x2226 <nwkRxHandleReceivedFrame+0x120>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	9c 81       	ldd	r25, Y+4	; 0x04
    2222:	0e 94 a7 13 	call	0x274e	; 0x274e <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    2226:	20 91 89 0c 	lds	r18, 0x0C89
    222a:	30 91 8a 0c 	lds	r19, 0x0C8A
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	fc 01       	movw	r30, r24
    2234:	85 85       	ldd	r24, Z+13	; 0x0d
    2236:	96 85       	ldd	r25, Z+14	; 0x0e
    2238:	28 17       	cp	r18, r24
    223a:	39 07       	cpc	r19, r25
    223c:	49 f0       	breq	.+18     	; 0x2250 <nwkRxHandleReceivedFrame+0x14a>
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	fc 01       	movw	r30, r24
    2244:	85 85       	ldd	r24, Z+13	; 0x0d
    2246:	96 85       	ldd	r25, Z+14	; 0x0e
    2248:	8f 3f       	cpi	r24, 0xFF	; 255
    224a:	ff ef       	ldi	r31, 0xFF	; 255
    224c:	9f 07       	cpc	r25, r31
    224e:	31 f4       	brne	.+12     	; 0x225c <nwkRxHandleReceivedFrame+0x156>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	9c 81       	ldd	r25, Y+4	; 0x04
    2254:	22 e2       	ldi	r18, 0x22	; 34
    2256:	fc 01       	movw	r30, r24
    2258:	20 83       	st	Z, r18
    225a:	11 c0       	rjmp	.+34     	; 0x227e <nwkRxHandleReceivedFrame+0x178>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    225c:	20 91 89 0c 	lds	r18, 0x0C89
    2260:	30 91 8a 0c 	lds	r19, 0x0C8A
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	fc 01       	movw	r30, r24
    226a:	85 81       	ldd	r24, Z+5	; 0x05
    226c:	96 81       	ldd	r25, Z+6	; 0x06
    226e:	28 17       	cp	r18, r24
    2270:	39 07       	cpc	r19, r25
    2272:	29 f4       	brne	.+10     	; 0x227e <nwkRxHandleReceivedFrame+0x178>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	9c 81       	ldd	r25, Y+4	; 0x04
    2278:	23 e2       	ldi	r18, 0x23	; 35
    227a:	fc 01       	movw	r30, r24
    227c:	20 83       	st	Z, r18
    }
  #endif
  }
}
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <nwkRxIndicateFrame>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	60 97       	sbiw	r28, 0x10	; 16
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	98 8b       	std	Y+16, r25	; 0x10
    22a2:	8f 87       	std	Y+15, r24	; 0x0f
  NwkFrameHeader_t *header = &frame->header;
    22a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a6:	98 89       	ldd	r25, Y+16	; 0x10
    22a8:	02 96       	adiw	r24, 0x02	; 2
    22aa:	9a 83       	std	Y+2, r25	; 0x02
    22ac:	89 83       	std	Y+1, r24	; 0x01
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	9a 81       	ldd	r25, Y+2	; 0x02
    22b2:	fc 01       	movw	r30, r24
    22b4:	87 85       	ldd	r24, Z+15	; 0x0f
    22b6:	82 95       	swap	r24
    22b8:	8f 70       	andi	r24, 0x0F	; 15
    22ba:	88 2f       	mov	r24, r24
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	03 96       	adiw	r24, 0x03	; 3
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	87 57       	subi	r24, 0x77	; 119
    22c6:	93 4f       	sbci	r25, 0xF3	; 243
    22c8:	fc 01       	movw	r30, r24
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	11 f4       	brne	.+4      	; 0x22d6 <nwkRxIndicateFrame+0x4a>
    return false;
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	af c0       	rjmp	.+350    	; 0x2434 <nwkRxIndicateFrame+0x1a8>

  ind.srcAddr = header->nwkSrcAddr;
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	fc 01       	movw	r30, r24
    22dc:	83 85       	ldd	r24, Z+11	; 0x0b
    22de:	94 85       	ldd	r25, Z+12	; 0x0c
    22e0:	9c 83       	std	Y+4, r25	; 0x04
    22e2:	8b 83       	std	Y+3, r24	; 0x03
  ind.dstAddr = header->nwkDstAddr;
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	9a 81       	ldd	r25, Y+2	; 0x02
    22e8:	fc 01       	movw	r30, r24
    22ea:	85 85       	ldd	r24, Z+13	; 0x0d
    22ec:	96 85       	ldd	r25, Z+14	; 0x0e
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
  ind.srcEndpoint = header->nwkSrcEndpoint;
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	9a 81       	ldd	r25, Y+2	; 0x02
    22f6:	fc 01       	movw	r30, r24
    22f8:	87 85       	ldd	r24, Z+15	; 0x0f
    22fa:	8f 70       	andi	r24, 0x0F	; 15
    22fc:	8f 83       	std	Y+7, r24	; 0x07
  ind.dstEndpoint = header->nwkDstEndpoint;
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	fc 01       	movw	r30, r24
    2304:	87 85       	ldd	r24, Z+15	; 0x0f
    2306:	82 95       	swap	r24
    2308:	8f 70       	andi	r24, 0x0F	; 15
    230a:	88 87       	std	Y+8, r24	; 0x08
  ind.data = frame->payload;
    230c:	8f 85       	ldd	r24, Y+15	; 0x0f
    230e:	98 89       	ldd	r25, Y+16	; 0x10
    2310:	8f 57       	subi	r24, 0x7F	; 127
    2312:	9f 4f       	sbci	r25, 0xFF	; 255
    2314:	fc 01       	movw	r30, r24
    2316:	80 81       	ld	r24, Z
    2318:	91 81       	ldd	r25, Z+1	; 0x01
    231a:	9b 87       	std	Y+11, r25	; 0x0b
    231c:	8a 87       	std	Y+10, r24	; 0x0a
  ind.size = nwkFramePayloadSize(frame);
    231e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2320:	98 89       	ldd	r25, Y+16	; 0x10
    2322:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <nwkFramePayloadSize>
    2326:	8c 87       	std	Y+12, r24	; 0x0c
  ind.lqi = frame->rx.lqi;
    2328:	8f 85       	ldd	r24, Y+15	; 0x0f
    232a:	98 89       	ldd	r25, Y+16	; 0x10
    232c:	8d 57       	subi	r24, 0x7D	; 125
    232e:	9f 4f       	sbci	r25, 0xFF	; 255
    2330:	fc 01       	movw	r30, r24
    2332:	80 81       	ld	r24, Z
    2334:	8d 87       	std	Y+13, r24	; 0x0d
  ind.rssi = frame->rx.rssi;
    2336:	8f 85       	ldd	r24, Y+15	; 0x0f
    2338:	98 89       	ldd	r25, Y+16	; 0x10
    233a:	8c 57       	subi	r24, 0x7C	; 124
    233c:	9f 4f       	sbci	r25, 0xFF	; 255
    233e:	fc 01       	movw	r30, r24
    2340:	80 81       	ld	r24, Z
    2342:	8e 87       	std	Y+14, r24	; 0x0e

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	9a 81       	ldd	r25, Y+2	; 0x02
    2348:	fc 01       	movw	r30, r24
    234a:	81 85       	ldd	r24, Z+9	; 0x09
    234c:	98 2f       	mov	r25, r24
    234e:	91 70       	andi	r25, 0x01	; 1
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	99 23       	and	r25, r25
    2354:	09 f4       	brne	.+2      	; 0x2358 <nwkRxIndicateFrame+0xcc>
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    235a:	89 85       	ldd	r24, Y+9	; 0x09
    235c:	28 2f       	mov	r18, r24
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	fc 01       	movw	r30, r24
    2364:	81 85       	ldd	r24, Z+9	; 0x09
    2366:	82 70       	andi	r24, 0x02	; 2
    2368:	82 2b       	or	r24, r18
    236a:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	28 2f       	mov	r18, r24
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
    2374:	fc 01       	movw	r30, r24
    2376:	81 85       	ldd	r24, Z+9	; 0x09
    2378:	84 70       	andi	r24, 0x04	; 4
    237a:	88 23       	and	r24, r24
    237c:	11 f0       	breq	.+4      	; 0x2382 <nwkRxIndicateFrame+0xf6>
    237e:	80 e2       	ldi	r24, 0x20	; 32
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <nwkRxIndicateFrame+0xf8>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	82 2b       	or	r24, r18
    2386:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	28 2f       	mov	r18, r24
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	9a 81       	ldd	r25, Y+2	; 0x02
    2390:	fc 01       	movw	r30, r24
    2392:	81 85       	ldd	r24, Z+9	; 0x09
    2394:	88 70       	andi	r24, 0x08	; 8
    2396:	88 23       	and	r24, r24
    2398:	11 f0       	breq	.+4      	; 0x239e <nwkRxIndicateFrame+0x112>
    239a:	80 e4       	ldi	r24, 0x40	; 64
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <nwkRxIndicateFrame+0x114>
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	82 2b       	or	r24, r18
    23a2:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	28 2f       	mov	r18, r24
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	fc 01       	movw	r30, r24
    23ae:	85 85       	ldd	r24, Z+13	; 0x0d
    23b0:	96 85       	ldd	r25, Z+14	; 0x0e
    23b2:	8f 3f       	cpi	r24, 0xFF	; 255
    23b4:	ff ef       	ldi	r31, 0xFF	; 255
    23b6:	9f 07       	cpc	r25, r31
    23b8:	11 f4       	brne	.+4      	; 0x23be <nwkRxIndicateFrame+0x132>
    23ba:	84 e0       	ldi	r24, 0x04	; 4
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <nwkRxIndicateFrame+0x134>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	82 2b       	or	r24, r18
    23c2:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    23c4:	89 85       	ldd	r24, Y+9	; 0x09
    23c6:	48 2f       	mov	r20, r24
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	fc 01       	movw	r30, r24
    23ce:	23 85       	ldd	r18, Z+11	; 0x0b
    23d0:	34 85       	ldd	r19, Z+12	; 0x0c
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	fc 01       	movw	r30, r24
    23d8:	87 81       	ldd	r24, Z+7	; 0x07
    23da:	90 85       	ldd	r25, Z+8	; 0x08
    23dc:	28 17       	cp	r18, r24
    23de:	39 07       	cpc	r19, r25
    23e0:	11 f4       	brne	.+4      	; 0x23e6 <nwkRxIndicateFrame+0x15a>
    23e2:	88 e0       	ldi	r24, 0x08	; 8
    23e4:	01 c0       	rjmp	.+2      	; 0x23e8 <nwkRxIndicateFrame+0x15c>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	84 2b       	or	r24, r20
    23ea:	89 87       	std	Y+9, r24	; 0x09
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    23ec:	89 85       	ldd	r24, Y+9	; 0x09
    23ee:	28 2f       	mov	r18, r24
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	fc 01       	movw	r30, r24
    23f6:	83 81       	ldd	r24, Z+3	; 0x03
    23f8:	94 81       	ldd	r25, Z+4	; 0x04
    23fa:	8f 3f       	cpi	r24, 0xFF	; 255
    23fc:	ff ef       	ldi	r31, 0xFF	; 255
    23fe:	9f 07       	cpc	r25, r31
    2400:	11 f4       	brne	.+4      	; 0x2406 <nwkRxIndicateFrame+0x17a>
    2402:	80 e1       	ldi	r24, 0x10	; 16
    2404:	01 c0       	rjmp	.+2      	; 0x2408 <nwkRxIndicateFrame+0x17c>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	82 2b       	or	r24, r18
    240a:	89 87       	std	Y+9, r24	; 0x09

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	9a 81       	ldd	r25, Y+2	; 0x02
    2410:	fc 01       	movw	r30, r24
    2412:	87 85       	ldd	r24, Z+15	; 0x0f
    2414:	82 95       	swap	r24
    2416:	8f 70       	andi	r24, 0x0F	; 15
    2418:	88 2f       	mov	r24, r24
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	03 96       	adiw	r24, 0x03	; 3
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	87 57       	subi	r24, 0x77	; 119
    2424:	93 4f       	sbci	r25, 0xF3	; 243
    2426:	fc 01       	movw	r30, r24
    2428:	20 81       	ld	r18, Z
    242a:	31 81       	ldd	r19, Z+1	; 0x01
    242c:	ce 01       	movw	r24, r28
    242e:	03 96       	adiw	r24, 0x03	; 3
    2430:	f9 01       	movw	r30, r18
    2432:	19 95       	eicall
}
    2434:	60 96       	adiw	r28, 0x10	; 16
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	08 95       	ret

00002446 <nwkRxHandleIndication>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	00 d0       	rcall	.+0      	; 0x244c <nwkRxHandleIndication+0x6>
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	9b 83       	std	Y+3, r25	; 0x03
    2452:	8a 83       	std	Y+2, r24	; 0x02
  bool ack;

  nwkRxAckControl = 0;
    2454:	10 92 a6 0b 	sts	0x0BA6, r1
  ack = nwkRxIndicateFrame(frame);
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	9b 81       	ldd	r25, Y+3	; 0x03
    245c:	0e 94 46 11 	call	0x228c	; 0x228c <nwkRxIndicateFrame>
    2460:	89 83       	std	Y+1, r24	; 0x01
  
  if (0 == frame->header.nwkFcf.ackRequest)
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	9b 81       	ldd	r25, Y+3	; 0x03
    2466:	fc 01       	movw	r30, r24
    2468:	83 85       	ldd	r24, Z+11	; 0x0b
    246a:	81 70       	andi	r24, 0x01	; 1
    246c:	88 23       	and	r24, r24
    246e:	09 f4       	brne	.+2      	; 0x2472 <nwkRxHandleIndication+0x2c>
    ack = false;
    2470:	19 82       	std	Y+1, r1	; 0x01

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	9b 81       	ldd	r25, Y+3	; 0x03
    2476:	fc 01       	movw	r30, r24
    2478:	87 81       	ldd	r24, Z+7	; 0x07
    247a:	90 85       	ldd	r25, Z+8	; 0x08
    247c:	8f 3f       	cpi	r24, 0xFF	; 255
    247e:	ff ef       	ldi	r31, 0xFF	; 255
    2480:	9f 07       	cpc	r25, r31
    2482:	a9 f4       	brne	.+42     	; 0x24ae <nwkRxHandleIndication+0x68>
      nwkIb.addr == frame->header.nwkDstAddr &&
    2484:	20 91 89 0c 	lds	r18, 0x0C89
    2488:	30 91 8a 0c 	lds	r19, 0x0C8A
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	9b 81       	ldd	r25, Y+3	; 0x03
    2490:	fc 01       	movw	r30, r24
    2492:	87 85       	ldd	r24, Z+15	; 0x0f
    2494:	90 89       	ldd	r25, Z+16	; 0x10
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2496:	28 17       	cp	r18, r24
    2498:	39 07       	cpc	r19, r25
    249a:	49 f4       	brne	.+18     	; 0x24ae <nwkRxHandleIndication+0x68>
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	9b 81       	ldd	r25, Y+3	; 0x03
    24a0:	fc 01       	movw	r30, r24
    24a2:	83 85       	ldd	r24, Z+11	; 0x0b
    24a4:	88 70       	andi	r24, 0x08	; 8
  
  if (0 == frame->header.nwkFcf.ackRequest)
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
    24a6:	88 23       	and	r24, r24
    24a8:	11 f4       	brne	.+4      	; 0x24ae <nwkRxHandleIndication+0x68>
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	89 83       	std	Y+1, r24	; 0x01

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	9b 81       	ldd	r25, Y+3	; 0x03
    24b2:	fc 01       	movw	r30, r24
    24b4:	85 81       	ldd	r24, Z+5	; 0x05
    24b6:	96 81       	ldd	r25, Z+6	; 0x06
    24b8:	8f 3f       	cpi	r24, 0xFF	; 255
    24ba:	ff ef       	ldi	r31, 0xFF	; 255
    24bc:	9f 07       	cpc	r25, r31
    24be:	09 f4       	brne	.+2      	; 0x24c2 <nwkRxHandleIndication+0x7c>
    ack = false;
    24c0:	19 82       	std	Y+1, r1	; 0x01

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    24c2:	80 91 89 0c 	lds	r24, 0x0C89
    24c6:	90 91 8a 0c 	lds	r25, 0x0C8A
    24ca:	8f 3f       	cpi	r24, 0xFF	; 255
    24cc:	2f ef       	ldi	r18, 0xFF	; 255
    24ce:	92 07       	cpc	r25, r18
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <nwkRxHandleIndication+0x8e>
    ack = false;
    24d2:	19 82       	std	Y+1, r1	; 0x01

  if (ack)
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	88 23       	and	r24, r24
    24d8:	21 f0       	breq	.+8      	; 0x24e2 <nwkRxHandleIndication+0x9c>
    nwkRxSendAck(frame);
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	9b 81       	ldd	r25, Y+3	; 0x03
    24de:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <nwkRxSendAck>

  frame->state = NWK_RX_STATE_FINISH;
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	9b 81       	ldd	r25, Y+3	; 0x03
    24e6:	24 e2       	ldi	r18, 0x24	; 36
    24e8:	fc 01       	movw	r30, r24
    24ea:	20 83       	st	Z, r18
}
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	08 95       	ret

000024f8 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	1f 92       	push	r1
    24fe:	1f 92       	push	r1
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
  NwkFrame_t *frame = NULL;
    2504:	1a 82       	std	Y+2, r1	; 0x02
    2506:	19 82       	std	Y+1, r1	; 0x01

  while (NULL != (frame = nwkFrameNext(frame)))
    2508:	2b c0       	rjmp	.+86     	; 0x2560 <nwkRxTaskHandler+0x68>
  {
    switch (frame->state)
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	9a 81       	ldd	r25, Y+2	; 0x02
    250e:	fc 01       	movw	r30, r24
    2510:	80 81       	ld	r24, Z
    2512:	88 2f       	mov	r24, r24
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	82 32       	cpi	r24, 0x22	; 34
    2518:	91 05       	cpc	r25, r1
    251a:	99 f0       	breq	.+38     	; 0x2542 <nwkRxTaskHandler+0x4a>
    251c:	83 32       	cpi	r24, 0x23	; 35
    251e:	91 05       	cpc	r25, r1
    2520:	24 f4       	brge	.+8      	; 0x252a <nwkRxTaskHandler+0x32>
    2522:	80 32       	cpi	r24, 0x20	; 32
    2524:	91 05       	cpc	r25, r1
    2526:	41 f0       	breq	.+16     	; 0x2538 <nwkRxTaskHandler+0x40>
    2528:	1b c0       	rjmp	.+54     	; 0x2560 <nwkRxTaskHandler+0x68>
    252a:	83 32       	cpi	r24, 0x23	; 35
    252c:	91 05       	cpc	r25, r1
    252e:	71 f0       	breq	.+28     	; 0x254c <nwkRxTaskHandler+0x54>
    2530:	84 32       	cpi	r24, 0x24	; 36
    2532:	91 05       	cpc	r25, r1
    2534:	81 f0       	breq	.+32     	; 0x2556 <nwkRxTaskHandler+0x5e>
    2536:	14 c0       	rjmp	.+40     	; 0x2560 <nwkRxTaskHandler+0x68>
    {
      case NWK_RX_STATE_RECEIVED:
      {
        nwkRxHandleReceivedFrame(frame);
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	9a 81       	ldd	r25, Y+2	; 0x02
    253c:	0e 94 83 10 	call	0x2106	; 0x2106 <nwkRxHandleReceivedFrame>
      } break;
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <nwkRxTaskHandler+0x68>
      } break;
#endif

      case NWK_RX_STATE_INDICATE:
      {
        nwkRxHandleIndication(frame);
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	9a 81       	ldd	r25, Y+2	; 0x02
    2546:	0e 94 23 12 	call	0x2446	; 0x2446 <nwkRxHandleIndication>
      } break;
    254a:	0a c0       	rjmp	.+20     	; 0x2560 <nwkRxTaskHandler+0x68>

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	0e 94 c5 0c 	call	0x198a	; 0x198a <nwkRouteFrame>
      } break;
    2554:	05 c0       	rjmp	.+10     	; 0x2560 <nwkRxTaskHandler+0x68>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	0e 94 10 09 	call	0x1220	; 0x1220 <nwkFrameFree>
      } break;
    255e:	00 00       	nop
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	9a 81       	ldd	r25, Y+2	; 0x02
    2564:	0e 94 2a 09 	call	0x1254	; 0x1254 <nwkFrameNext>
    2568:	9a 83       	std	Y+2, r25	; 0x02
    256a:	89 83       	std	Y+1, r24	; 0x01
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	9a 81       	ldd	r25, Y+2	; 0x02
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	59 f6       	brne	.-106    	; 0x250a <nwkRxTaskHandler+0x12>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	08 95       	ret

0000257e <nwkTxInit>:

/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
  nwkTxPhyActiveFrame = NULL;
    2586:	10 92 b5 0b 	sts	0x0BB5, r1
    258a:	10 92 b4 0b 	sts	0x0BB4, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    258e:	82 e3       	ldi	r24, 0x32	; 50
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	a0 e0       	ldi	r26, 0x00	; 0
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	80 93 bc 0b 	sts	0x0BBC, r24
    259a:	90 93 bd 0b 	sts	0x0BBD, r25
    259e:	a0 93 be 0b 	sts	0x0BBE, r26
    25a2:	b0 93 bf 0b 	sts	0x0BBF, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    25a6:	10 92 c0 0b 	sts	0x0BC0, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    25aa:	82 e7       	ldi	r24, 0x72	; 114
    25ac:	94 e1       	ldi	r25, 0x14	; 20
    25ae:	90 93 c2 0b 	sts	0x0BC2, r25
    25b2:	80 93 c1 0b 	sts	0x0BC1, r24

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    25b6:	8a e0       	ldi	r24, 0x0A	; 10
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	a0 e0       	ldi	r26, 0x00	; 0
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	80 93 c9 0b 	sts	0x0BC9, r24
    25c2:	90 93 ca 0b 	sts	0x0BCA, r25
    25c6:	a0 93 cb 0b 	sts	0x0BCB, r26
    25ca:	b0 93 cc 0b 	sts	0x0BCC, r27
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    25ce:	10 92 cd 0b 	sts	0x0BCD, r1
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    25d2:	89 ed       	ldi	r24, 0xD9	; 217
    25d4:	94 e1       	ldi	r25, 0x14	; 20
    25d6:	90 93 cf 0b 	sts	0x0BCF, r25
    25da:	80 93 ce 0b 	sts	0x0BCE, r24
}
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	08 95       	ret

000025e4 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <nwkTxFrame+0x6>
    25ea:	1f 92       	push	r1
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	9c 83       	std	Y+4, r25	; 0x04
    25f2:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrameHeader_t *header = &frame->header;
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	02 96       	adiw	r24, 0x02	; 2
    25fa:	9a 83       	std	Y+2, r25	; 0x02
    25fc:	89 83       	std	Y+1, r24	; 0x01

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	8a 57       	subi	r24, 0x7A	; 122
    2604:	9f 4f       	sbci	r25, 0xFF	; 255
    2606:	fc 01       	movw	r30, r24
    2608:	80 81       	ld	r24, Z
    260a:	88 2f       	mov	r24, r24
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	82 70       	andi	r24, 0x02	; 2
    2610:	99 27       	eor	r25, r25
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	31 f0       	breq	.+12     	; 0x2622 <nwkTxFrame+0x3e>
  {
    frame->state = NWK_TX_STATE_DELAY;
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	9c 81       	ldd	r25, Y+4	; 0x04
    261a:	22 e1       	ldi	r18, 0x12	; 18
    261c:	fc 01       	movw	r30, r24
    261e:	20 83       	st	Z, r18
    2620:	05 c0       	rjmp	.+10     	; 0x262c <nwkTxFrame+0x48>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9c 81       	ldd	r25, Y+4	; 0x04
    2626:	22 e1       	ldi	r18, 0x12	; 18
    2628:	fc 01       	movw	r30, r24
    262a:	20 83       	st	Z, r18
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	9c 81       	ldd	r25, Y+4	; 0x04
    2630:	8d 57       	subi	r24, 0x7D	; 125
    2632:	9f 4f       	sbci	r25, 0xFF	; 255
    2634:	fc 01       	movw	r30, r24
    2636:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	8a 57       	subi	r24, 0x7A	; 122
    263e:	9f 4f       	sbci	r25, 0xFF	; 255
    2640:	fc 01       	movw	r30, r24
    2642:	80 81       	ld	r24, Z
    2644:	88 2f       	mov	r24, r24
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	81 70       	andi	r24, 0x01	; 1
    264a:	99 27       	eor	r25, r25
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	41 f0       	breq	.+16     	; 0x2660 <nwkTxFrame+0x7c>
    header->macDstPanId = NWK_BROADCAST_PANID;
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	2f ef       	ldi	r18, 0xFF	; 255
    2656:	3f ef       	ldi	r19, 0xFF	; 255
    2658:	fc 01       	movw	r30, r24
    265a:	34 83       	std	Z+4, r19	; 0x04
    265c:	23 83       	std	Z+3, r18	; 0x03
    265e:	09 c0       	rjmp	.+18     	; 0x2672 <nwkTxFrame+0x8e>
  else
    header->macDstPanId = nwkIb.panId;
    2660:	20 91 8b 0c 	lds	r18, 0x0C8B
    2664:	30 91 8c 0c 	lds	r19, 0x0C8C
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	9a 81       	ldd	r25, Y+2	; 0x02
    266c:	fc 01       	movw	r30, r24
    266e:	34 83       	std	Z+4, r19	; 0x04
    2670:	23 83       	std	Z+3, r18	; 0x03

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	9c 81       	ldd	r25, Y+4	; 0x04
    2676:	8a 57       	subi	r24, 0x7A	; 122
    2678:	9f 4f       	sbci	r25, 0xFF	; 255
    267a:	fc 01       	movw	r30, r24
    267c:	80 81       	ld	r24, Z
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	84 70       	andi	r24, 0x04	; 4
    2684:	99 27       	eor	r25, r25
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	89 f4       	brne	.+34     	; 0x26ac <nwkTxFrame+0xc8>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	8a 57       	subi	r24, 0x7A	; 122
    2690:	9f 4f       	sbci	r25, 0xFF	; 255
    2692:	fc 01       	movw	r30, r24
    2694:	80 81       	ld	r24, Z
    2696:	88 2f       	mov	r24, r24
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	81 70       	andi	r24, 0x01	; 1
    269c:	99 27       	eor	r25, r25
    header->macDstPanId = NWK_BROADCAST_PANID;
  else
    header->macDstPanId = nwkIb.panId;

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	29 f4       	brne	.+10     	; 0x26ac <nwkTxFrame+0xc8>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <nwkRoutePrepareTx>
    26aa:	0a c0       	rjmp	.+20     	; 0x26c0 <nwkTxFrame+0xdc>
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	fc 01       	movw	r30, r24
    26b2:	25 85       	ldd	r18, Z+13	; 0x0d
    26b4:	36 85       	ldd	r19, Z+14	; 0x0e
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ba:	fc 01       	movw	r30, r24
    26bc:	36 83       	std	Z+6, r19	; 0x06
    26be:	25 83       	std	Z+5, r18	; 0x05

  header->macSrcAddr = nwkIb.addr;
    26c0:	20 91 89 0c 	lds	r18, 0x0C89
    26c4:	30 91 8a 0c 	lds	r19, 0x0C8A
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	fc 01       	movw	r30, r24
    26ce:	30 87       	std	Z+8, r19	; 0x08
    26d0:	27 83       	std	Z+7, r18	; 0x07
  header->macSeq = ++nwkIb.macSeqNum;
    26d2:	80 91 8e 0c 	lds	r24, 0x0C8E
    26d6:	8f 5f       	subi	r24, 0xFF	; 255
    26d8:	80 93 8e 0c 	sts	0x0C8E, r24
    26dc:	20 91 8e 0c 	lds	r18, 0x0C8E
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	9a 81       	ldd	r25, Y+2	; 0x02
    26e4:	fc 01       	movw	r30, r24
    26e6:	22 83       	std	Z+2, r18	; 0x02

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	fc 01       	movw	r30, r24
    26ee:	85 81       	ldd	r24, Z+5	; 0x05
    26f0:	96 81       	ldd	r25, Z+6	; 0x06
    26f2:	8f 3f       	cpi	r24, 0xFF	; 255
    26f4:	ff ef       	ldi	r31, 0xFF	; 255
    26f6:	9f 07       	cpc	r25, r31
    26f8:	a9 f4       	brne	.+42     	; 0x2724 <nwkTxFrame+0x140>
  {
    header->macFcf = 0x8841;
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	9a 81       	ldd	r25, Y+2	; 0x02
    26fe:	21 e4       	ldi	r18, 0x41	; 65
    2700:	38 e8       	ldi	r19, 0x88	; 136
    2702:	fc 01       	movw	r30, r24
    2704:	31 83       	std	Z+1, r19	; 0x01
    2706:	20 83       	st	Z, r18
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2708:	0e 94 c2 1b 	call	0x3784	; 0x3784 <rand>
    270c:	87 70       	andi	r24, 0x07	; 7
    270e:	99 27       	eor	r25, r25
    2710:	01 96       	adiw	r24, 0x01	; 1
    2712:	9c 01       	movw	r18, r24
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	9c 81       	ldd	r25, Y+4	; 0x04
    2718:	8c 57       	subi	r24, 0x7C	; 124
    271a:	9f 4f       	sbci	r25, 0xFF	; 255
    271c:	fc 01       	movw	r30, r24
    271e:	31 83       	std	Z+1, r19	; 0x01
    2720:	20 83       	st	Z, r18
    2722:	0e c0       	rjmp	.+28     	; 0x2740 <nwkTxFrame+0x15c>
  }
  else
  {
    header->macFcf = 0x8861;
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	9a 81       	ldd	r25, Y+2	; 0x02
    2728:	21 e6       	ldi	r18, 0x61	; 97
    272a:	38 e8       	ldi	r19, 0x88	; 136
    272c:	fc 01       	movw	r30, r24
    272e:	31 83       	std	Z+1, r19	; 0x01
    2730:	20 83       	st	Z, r18
    frame->tx.timeout = 0;
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	8c 57       	subi	r24, 0x7C	; 124
    2738:	9f 4f       	sbci	r25, 0xFF	; 255
    273a:	fc 01       	movw	r30, r24
    273c:	11 82       	std	Z+1, r1	; 0x01
    273e:	10 82       	st	Z, r1
  }
}
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	08 95       	ret

0000274e <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    274e:	cf 93       	push	r28
    2750:	df 93       	push	r29
    2752:	00 d0       	rcall	.+0      	; 0x2754 <nwkTxBroadcastFrame+0x6>
    2754:	1f 92       	push	r1
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	9c 83       	std	Y+4, r25	; 0x04
    275c:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    275e:	0e 94 9d 08 	call	0x113a	; 0x113a <nwkFrameAlloc>
    2762:	9a 83       	std	Y+2, r25	; 0x02
    2764:	89 83       	std	Y+1, r24	; 0x01
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	9a 81       	ldd	r25, Y+2	; 0x02
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	09 f4       	brne	.+2      	; 0x2770 <nwkTxBroadcastFrame+0x22>
    return;
    276e:	64 c0       	rjmp	.+200    	; 0x2838 <nwkTxBroadcastFrame+0xea>

  newFrame->state = NWK_TX_STATE_DELAY;
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	22 e1       	ldi	r18, 0x12	; 18
    2776:	fc 01       	movw	r30, r24
    2778:	20 83       	st	Z, r18
  newFrame->size = frame->size;
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	9c 81       	ldd	r25, Y+4	; 0x04
    277e:	fc 01       	movw	r30, r24
    2780:	21 81       	ldd	r18, Z+1	; 0x01
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	9a 81       	ldd	r25, Y+2	; 0x02
    2786:	fc 01       	movw	r30, r24
    2788:	21 83       	std	Z+1, r18	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	9a 81       	ldd	r25, Y+2	; 0x02
    278e:	8d 57       	subi	r24, 0x7D	; 125
    2790:	9f 4f       	sbci	r25, 0xFF	; 255
    2792:	fc 01       	movw	r30, r24
    2794:	10 82       	st	Z, r1
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2796:	0e 94 c2 1b 	call	0x3784	; 0x3784 <rand>
    279a:	87 70       	andi	r24, 0x07	; 7
    279c:	99 27       	eor	r25, r25
    279e:	01 96       	adiw	r24, 0x01	; 1
    27a0:	9c 01       	movw	r18, r24
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	8c 57       	subi	r24, 0x7C	; 124
    27a8:	9f 4f       	sbci	r25, 0xFF	; 255
    27aa:	fc 01       	movw	r30, r24
    27ac:	31 83       	std	Z+1, r19	; 0x01
    27ae:	20 83       	st	Z, r18
  newFrame->tx.confirm = NULL;
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	89 57       	subi	r24, 0x79	; 121
    27b6:	9f 4f       	sbci	r25, 0xFF	; 255
    27b8:	fc 01       	movw	r30, r24
    27ba:	11 82       	std	Z+1, r1	; 0x01
    27bc:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    27be:	8b 81       	ldd	r24, Y+3	; 0x03
    27c0:	9c 81       	ldd	r25, Y+4	; 0x04
    27c2:	fc 01       	movw	r30, r24
    27c4:	81 81       	ldd	r24, Z+1	; 0x01
    27c6:	48 2f       	mov	r20, r24
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	9c 81       	ldd	r25, Y+4	; 0x04
    27ce:	9c 01       	movw	r18, r24
    27d0:	2e 5f       	subi	r18, 0xFE	; 254
    27d2:	3f 4f       	sbci	r19, 0xFF	; 255
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	02 96       	adiw	r24, 0x02	; 2
    27da:	b9 01       	movw	r22, r18
    27dc:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <memcpy>

  newFrame->header.macFcf = 0x8841;
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	21 e4       	ldi	r18, 0x41	; 65
    27e6:	38 e8       	ldi	r19, 0x88	; 136
    27e8:	fc 01       	movw	r30, r24
    27ea:	33 83       	std	Z+3, r19	; 0x03
    27ec:	22 83       	std	Z+2, r18	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
    27f2:	2f ef       	ldi	r18, 0xFF	; 255
    27f4:	3f ef       	ldi	r19, 0xFF	; 255
    27f6:	fc 01       	movw	r30, r24
    27f8:	30 87       	std	Z+8, r19	; 0x08
    27fa:	27 83       	std	Z+7, r18	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	fc 01       	movw	r30, r24
    2802:	25 81       	ldd	r18, Z+5	; 0x05
    2804:	36 81       	ldd	r19, Z+6	; 0x06
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	9a 81       	ldd	r25, Y+2	; 0x02
    280a:	fc 01       	movw	r30, r24
    280c:	36 83       	std	Z+6, r19	; 0x06
    280e:	25 83       	std	Z+5, r18	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    2810:	20 91 89 0c 	lds	r18, 0x0C89
    2814:	30 91 8a 0c 	lds	r19, 0x0C8A
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	9a 81       	ldd	r25, Y+2	; 0x02
    281c:	fc 01       	movw	r30, r24
    281e:	32 87       	std	Z+10, r19	; 0x0a
    2820:	21 87       	std	Z+9, r18	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    2822:	80 91 8e 0c 	lds	r24, 0x0C8E
    2826:	8f 5f       	subi	r24, 0xFF	; 255
    2828:	80 93 8e 0c 	sts	0x0C8E, r24
    282c:	20 91 8e 0c 	lds	r18, 0x0C8E
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	9a 81       	ldd	r25, Y+2	; 0x02
    2834:	fc 01       	movw	r30, r24
    2836:	24 83       	std	Z+4, r18	; 0x04
}
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	08 95       	ret

00002846 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	00 d0       	rcall	.+0      	; 0x284c <nwkTxAckReceived+0x6>
    284c:	00 d0       	rcall	.+0      	; 0x284e <nwkTxAckReceived+0x8>
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2856:	8d 81       	ldd	r24, Y+5	; 0x05
    2858:	9e 81       	ldd	r25, Y+6	; 0x06
    285a:	fc 01       	movw	r30, r24
    285c:	87 81       	ldd	r24, Z+7	; 0x07
    285e:	90 85       	ldd	r25, Z+8	; 0x08
    2860:	9c 83       	std	Y+4, r25	; 0x04
    2862:	8b 83       	std	Y+3, r24	; 0x03
  NwkFrame_t *frame = NULL;
    2864:	1a 82       	std	Y+2, r1	; 0x02
    2866:	19 82       	std	Y+1, r1	; 0x01

  if (sizeof(NwkCommandAck_t) != ind->size)
    2868:	8d 81       	ldd	r24, Y+5	; 0x05
    286a:	9e 81       	ldd	r25, Y+6	; 0x06
    286c:	fc 01       	movw	r30, r24
    286e:	81 85       	ldd	r24, Z+9	; 0x09
    2870:	83 30       	cpi	r24, 0x03	; 3
    2872:	11 f0       	breq	.+4      	; 0x2878 <nwkTxAckReceived+0x32>
    return false;
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	2d c0       	rjmp	.+90     	; 0x28d2 <nwkTxAckReceived+0x8c>

  while (NULL != (frame = nwkFrameNext(frame)))
    2878:	21 c0       	rjmp	.+66     	; 0x28bc <nwkTxAckReceived+0x76>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	fc 01       	movw	r30, r24
    2880:	80 81       	ld	r24, Z
    2882:	86 31       	cpi	r24, 0x16	; 22
    2884:	d9 f4       	brne	.+54     	; 0x28bc <nwkTxAckReceived+0x76>
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	9a 81       	ldd	r25, Y+2	; 0x02
    288a:	fc 01       	movw	r30, r24
    288c:	24 85       	ldd	r18, Z+12	; 0x0c
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	9c 81       	ldd	r25, Y+4	; 0x04
    2892:	fc 01       	movw	r30, r24
    2894:	81 81       	ldd	r24, Z+1	; 0x01
    2896:	28 17       	cp	r18, r24
    2898:	89 f4       	brne	.+34     	; 0x28bc <nwkTxAckReceived+0x76>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	9a 81       	ldd	r25, Y+2	; 0x02
    289e:	27 e1       	ldi	r18, 0x17	; 23
    28a0:	fc 01       	movw	r30, r24
    28a2:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	9c 81       	ldd	r25, Y+4	; 0x04
    28a8:	fc 01       	movw	r30, r24
    28aa:	22 81       	ldd	r18, Z+2	; 0x02
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	9a 81       	ldd	r25, Y+2	; 0x02
    28b0:	8a 57       	subi	r24, 0x7A	; 122
    28b2:	9f 4f       	sbci	r25, 0xFF	; 255
    28b4:	fc 01       	movw	r30, r24
    28b6:	20 83       	st	Z, r18
      return true;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	0b c0       	rjmp	.+22     	; 0x28d2 <nwkTxAckReceived+0x8c>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	0e 94 2a 09 	call	0x1254	; 0x1254 <nwkFrameNext>
    28c4:	9a 83       	std	Y+2, r25	; 0x02
    28c6:	89 83       	std	Y+1, r24	; 0x01
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	9a 81       	ldd	r25, Y+2	; 0x02
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	a9 f6       	brne	.-86     	; 0x287a <nwkTxAckReceived+0x34>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    28d0:	80 e0       	ldi	r24, 0x00	; 0
}
    28d2:	26 96       	adiw	r28, 0x06	; 6
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	cd bf       	out	0x3d, r28	; 61
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	08 95       	ret

000028e4 <nwkTxAckWaitTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <nwkTxAckWaitTimerHandler+0x6>
    28ea:	1f 92       	push	r1
    28ec:	1f 92       	push	r1
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
    28f2:	9d 83       	std	Y+5, r25	; 0x05
    28f4:	8c 83       	std	Y+4, r24	; 0x04
  NwkFrame_t *frame = NULL;
    28f6:	1a 82       	std	Y+2, r1	; 0x02
    28f8:	19 82       	std	Y+1, r1	; 0x01
  bool restart = false;
    28fa:	1b 82       	std	Y+3, r1	; 0x03

  while (NULL != (frame = nwkFrameNext(frame)))
    28fc:	27 c0       	rjmp	.+78     	; 0x294c <nwkTxAckWaitTimerHandler+0x68>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	fc 01       	movw	r30, r24
    2904:	80 81       	ld	r24, Z
    2906:	86 31       	cpi	r24, 0x16	; 22
    2908:	09 f5       	brne	.+66     	; 0x294c <nwkTxAckWaitTimerHandler+0x68>
    {
      restart = true;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	8b 83       	std	Y+3, r24	; 0x03

      if (0 == --frame->tx.timeout)
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	8c 57       	subi	r24, 0x7C	; 124
    2914:	9f 4f       	sbci	r25, 0xFF	; 255
    2916:	fc 01       	movw	r30, r24
    2918:	80 81       	ld	r24, Z
    291a:	91 81       	ldd	r25, Z+1	; 0x01
    291c:	9c 01       	movw	r18, r24
    291e:	21 50       	subi	r18, 0x01	; 1
    2920:	31 09       	sbc	r19, r1
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	9a 81       	ldd	r25, Y+2	; 0x02
    2926:	8c 57       	subi	r24, 0x7C	; 124
    2928:	9f 4f       	sbci	r25, 0xFF	; 255
    292a:	fc 01       	movw	r30, r24
    292c:	31 83       	std	Z+1, r19	; 0x01
    292e:	20 83       	st	Z, r18
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	8c 57       	subi	r24, 0x7C	; 124
    2936:	9f 4f       	sbci	r25, 0xFF	; 255
    2938:	fc 01       	movw	r30, r24
    293a:	80 81       	ld	r24, Z
    293c:	91 81       	ldd	r25, Z+1	; 0x01
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	29 f4       	brne	.+10     	; 0x294c <nwkTxAckWaitTimerHandler+0x68>
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	9a 81       	ldd	r25, Y+2	; 0x02
    2946:	60 e1       	ldi	r22, 0x10	; 16
    2948:	0e 94 bf 14 	call	0x297e	; 0x297e <nwkTxConfirm>
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	9a 81       	ldd	r25, Y+2	; 0x02
    2950:	0e 94 2a 09 	call	0x1254	; 0x1254 <nwkFrameNext>
    2954:	9a 83       	std	Y+2, r25	; 0x02
    2956:	89 83       	std	Y+1, r24	; 0x01
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	9a 81       	ldd	r25, Y+2	; 0x02
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	79 f6       	brne	.-98     	; 0x28fe <nwkTxAckWaitTimerHandler+0x1a>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    2960:	8b 81       	ldd	r24, Y+3	; 0x03
    2962:	88 23       	and	r24, r24
    2964:	21 f0       	breq	.+8      	; 0x296e <nwkTxAckWaitTimerHandler+0x8a>
    SYS_TimerStart(timer);
    2966:	8c 81       	ldd	r24, Y+4	; 0x04
    2968:	9d 81       	ldd	r25, Y+5	; 0x05
    296a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SYS_TimerStart>
}
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	df 91       	pop	r29
    297a:	cf 91       	pop	r28
    297c:	08 95       	ret

0000297e <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	00 d0       	rcall	.+0      	; 0x2984 <nwkTxConfirm+0x6>
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	89 83       	std	Y+1, r24	; 0x01
    298c:	6b 83       	std	Y+3, r22	; 0x03
  frame->state = NWK_TX_STATE_CONFIRM;
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	9a 81       	ldd	r25, Y+2	; 0x02
    2992:	27 e1       	ldi	r18, 0x17	; 23
    2994:	fc 01       	movw	r30, r24
    2996:	20 83       	st	Z, r18
  frame->tx.status = status;
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	8d 57       	subi	r24, 0x7D	; 125
    299e:	9f 4f       	sbci	r25, 0xFF	; 255
    29a0:	2b 81       	ldd	r18, Y+3	; 0x03
    29a2:	fc 01       	movw	r30, r24
    29a4:	20 83       	st	Z, r18
}
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	08 95       	ret

000029b2 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <nwkTxDelayTimerHandler+0x6>
    29b8:	1f 92       	push	r1
    29ba:	1f 92       	push	r1
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
    29c0:	9d 83       	std	Y+5, r25	; 0x05
    29c2:	8c 83       	std	Y+4, r24	; 0x04
  NwkFrame_t *frame = NULL;
    29c4:	1a 82       	std	Y+2, r1	; 0x02
    29c6:	19 82       	std	Y+1, r1	; 0x01
  bool restart = false;
    29c8:	1b 82       	std	Y+3, r1	; 0x03

  while (NULL != (frame = nwkFrameNext(frame)))
    29ca:	27 c0       	rjmp	.+78     	; 0x2a1a <nwkTxDelayTimerHandler+0x68>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	9a 81       	ldd	r25, Y+2	; 0x02
    29d0:	fc 01       	movw	r30, r24
    29d2:	80 81       	ld	r24, Z
    29d4:	81 31       	cpi	r24, 0x11	; 17
    29d6:	09 f5       	brne	.+66     	; 0x2a1a <nwkTxDelayTimerHandler+0x68>
    {
      restart = true;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	8b 83       	std	Y+3, r24	; 0x03

      if (0 == --frame->tx.timeout)
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	9a 81       	ldd	r25, Y+2	; 0x02
    29e0:	8c 57       	subi	r24, 0x7C	; 124
    29e2:	9f 4f       	sbci	r25, 0xFF	; 255
    29e4:	fc 01       	movw	r30, r24
    29e6:	80 81       	ld	r24, Z
    29e8:	91 81       	ldd	r25, Z+1	; 0x01
    29ea:	9c 01       	movw	r18, r24
    29ec:	21 50       	subi	r18, 0x01	; 1
    29ee:	31 09       	sbc	r19, r1
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	9a 81       	ldd	r25, Y+2	; 0x02
    29f4:	8c 57       	subi	r24, 0x7C	; 124
    29f6:	9f 4f       	sbci	r25, 0xFF	; 255
    29f8:	fc 01       	movw	r30, r24
    29fa:	31 83       	std	Z+1, r19	; 0x01
    29fc:	20 83       	st	Z, r18
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	8c 57       	subi	r24, 0x7C	; 124
    2a04:	9f 4f       	sbci	r25, 0xFF	; 255
    2a06:	fc 01       	movw	r30, r24
    2a08:	80 81       	ld	r24, Z
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	29 f4       	brne	.+10     	; 0x2a1a <nwkTxDelayTimerHandler+0x68>
        frame->state = NWK_TX_STATE_SEND;
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	23 e1       	ldi	r18, 0x13	; 19
    2a16:	fc 01       	movw	r30, r24
    2a18:	20 83       	st	Z, r18
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1e:	0e 94 2a 09 	call	0x1254	; 0x1254 <nwkFrameNext>
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	79 f6       	brne	.-98     	; 0x29cc <nwkTxDelayTimerHandler+0x1a>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	88 23       	and	r24, r24
    2a32:	21 f0       	breq	.+8      	; 0x2a3c <nwkTxDelayTimerHandler+0x8a>
    SYS_TimerStart(timer);
    2a34:	8c 81       	ldd	r24, Y+4	; 0x04
    2a36:	9d 81       	ldd	r25, Y+5	; 0x05
    2a38:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SYS_TimerStart>
}
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	df 91       	pop	r29
    2a48:	cf 91       	pop	r28
    2a4a:	08 95       	ret

00002a4c <nwkTxConvertPhyStatus>:

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	1f 92       	push	r1
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	89 83       	std	Y+1, r24	; 0x01
  switch (status)
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	88 2f       	mov	r24, r24
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	81 30       	cpi	r24, 0x01	; 1
    2a60:	91 05       	cpc	r25, r1
    2a62:	39 f0       	breq	.+14     	; 0x2a72 <nwkTxConvertPhyStatus+0x26>
    2a64:	82 30       	cpi	r24, 0x02	; 2
    2a66:	91 05       	cpc	r25, r1
    2a68:	31 f0       	breq	.+12     	; 0x2a76 <nwkTxConvertPhyStatus+0x2a>
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	31 f4       	brne	.+12     	; 0x2a7a <nwkTxConvertPhyStatus+0x2e>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	05 c0       	rjmp	.+10     	; 0x2a7c <nwkTxConvertPhyStatus+0x30>

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    2a72:	80 e2       	ldi	r24, 0x20	; 32
    2a74:	03 c0       	rjmp	.+6      	; 0x2a7c <nwkTxConvertPhyStatus+0x30>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    2a76:	81 e2       	ldi	r24, 0x21	; 33
    2a78:	01 c0       	rjmp	.+2      	; 0x2a7c <nwkTxConvertPhyStatus+0x30>

    default:
      return NWK_ERROR_STATUS;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
  }
}
    2a7c:	0f 90       	pop	r0
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	08 95       	ret

00002a84 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	1f 92       	push	r1
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	89 83       	std	Y+1, r24	; 0x01
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2a94:	00 91 b4 0b 	lds	r16, 0x0BB4
    2a98:	10 91 b5 0b 	lds	r17, 0x0BB5
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <nwkTxConvertPhyStatus>
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	c8 01       	movw	r24, r16
    2aa6:	8d 57       	subi	r24, 0x7D	; 125
    2aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aaa:	fc 01       	movw	r30, r24
    2aac:	20 83       	st	Z, r18
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    2aae:	80 91 b4 0b 	lds	r24, 0x0BB4
    2ab2:	90 91 b5 0b 	lds	r25, 0x0BB5
    2ab6:	25 e1       	ldi	r18, 0x15	; 21
    2ab8:	fc 01       	movw	r30, r24
    2aba:	20 83       	st	Z, r18
  nwkTxPhyActiveFrame = NULL;
    2abc:	10 92 b5 0b 	sts	0x0BB5, r1
    2ac0:	10 92 b4 0b 	sts	0x0BB4, r1
  nwkIb.lock--;
    2ac4:	80 91 af 0c 	lds	r24, 0x0CAF
    2ac8:	90 91 b0 0c 	lds	r25, 0x0CB0
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	90 93 b0 0c 	sts	0x0CB0, r25
    2ad2:	80 93 af 0c 	sts	0x0CAF, r24
}
    2ad6:	0f 90       	pop	r0
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	08 95       	ret

00002ae2 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	1f 92       	push	r1
    2ae8:	1f 92       	push	r1
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
  NwkFrame_t *frame = NULL;
    2aee:	1a 82       	std	Y+2, r1	; 0x02
    2af0:	19 82       	std	Y+1, r1	; 0x01

  while (NULL != (frame = nwkFrameNext(frame)))
    2af2:	bc c0       	rjmp	.+376    	; 0x2c6c <nwkTxTaskHandler+0x18a>
  {
    switch (frame->state)
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	9a 81       	ldd	r25, Y+2	; 0x02
    2af8:	fc 01       	movw	r30, r24
    2afa:	80 81       	ld	r24, Z
    2afc:	88 2f       	mov	r24, r24
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	84 31       	cpi	r24, 0x14	; 20
    2b02:	91 05       	cpc	r25, r1
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <nwkTxTaskHandler+0x26>
    2b06:	af c0       	rjmp	.+350    	; 0x2c66 <nwkTxTaskHandler+0x184>
    2b08:	85 31       	cpi	r24, 0x15	; 21
    2b0a:	91 05       	cpc	r25, r1
    2b0c:	3c f4       	brge	.+14     	; 0x2b1c <nwkTxTaskHandler+0x3a>
    2b0e:	82 31       	cpi	r24, 0x12	; 18
    2b10:	91 05       	cpc	r25, r1
    2b12:	89 f0       	breq	.+34     	; 0x2b36 <nwkTxTaskHandler+0x54>
    2b14:	83 31       	cpi	r24, 0x13	; 19
    2b16:	91 05       	cpc	r25, r1
    2b18:	39 f1       	breq	.+78     	; 0x2b68 <nwkTxTaskHandler+0x86>
        else
          frame->tx.confirm(frame);
      } break;

      default:
        break;
    2b1a:	a8 c0       	rjmp	.+336    	; 0x2c6c <nwkTxTaskHandler+0x18a>
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    switch (frame->state)
    2b1c:	86 31       	cpi	r24, 0x16	; 22
    2b1e:	91 05       	cpc	r25, r1
    2b20:	09 f4       	brne	.+2      	; 0x2b24 <nwkTxTaskHandler+0x42>
    2b22:	a3 c0       	rjmp	.+326    	; 0x2c6a <nwkTxTaskHandler+0x188>
    2b24:	86 31       	cpi	r24, 0x16	; 22
    2b26:	91 05       	cpc	r25, r1
    2b28:	0c f4       	brge	.+2      	; 0x2b2c <nwkTxTaskHandler+0x4a>
    2b2a:	44 c0       	rjmp	.+136    	; 0x2bb4 <nwkTxTaskHandler+0xd2>
    2b2c:	87 31       	cpi	r24, 0x17	; 23
    2b2e:	91 05       	cpc	r25, r1
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <nwkTxTaskHandler+0x52>
    2b32:	7b c0       	rjmp	.+246    	; 0x2c2a <nwkTxTaskHandler+0x148>
        else
          frame->tx.confirm(frame);
      } break;

      default:
        break;
    2b34:	9b c0       	rjmp	.+310    	; 0x2c6c <nwkTxTaskHandler+0x18a>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3a:	8c 57       	subi	r24, 0x7C	; 124
    2b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3e:	fc 01       	movw	r30, r24
    2b40:	80 81       	ld	r24, Z
    2b42:	91 81       	ldd	r25, Z+1	; 0x01
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	51 f0       	breq	.+20     	; 0x2b5c <nwkTxTaskHandler+0x7a>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4c:	21 e1       	ldi	r18, 0x11	; 17
    2b4e:	fc 01       	movw	r30, r24
    2b50:	20 83       	st	Z, r18
          SYS_TimerStart(&nwkTxDelayTimer);
    2b52:	83 ec       	ldi	r24, 0xC3	; 195
    2b54:	9b e0       	ldi	r25, 0x0B	; 11
    2b56:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SYS_TimerStart>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
        }
      } break;
    2b5a:	88 c0       	rjmp	.+272    	; 0x2c6c <nwkTxTaskHandler+0x18a>
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b60:	23 e1       	ldi	r18, 0x13	; 19
    2b62:	fc 01       	movw	r30, r24
    2b64:	20 83       	st	Z, r18
        }
      } break;
    2b66:	82 c0       	rjmp	.+260    	; 0x2c6c <nwkTxTaskHandler+0x18a>

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    2b68:	80 91 b4 0b 	lds	r24, 0x0BB4
    2b6c:	90 91 b5 0b 	lds	r25, 0x0BB5
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	f9 f4       	brne	.+62     	; 0x2bb2 <nwkTxTaskHandler+0xd0>
        {
          nwkTxPhyActiveFrame = frame;
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	9a 81       	ldd	r25, Y+2	; 0x02
    2b78:	90 93 b5 0b 	sts	0x0BB5, r25
    2b7c:	80 93 b4 0b 	sts	0x0BB4, r24
          frame->state = NWK_TX_STATE_WAIT_CONF;
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	24 e1       	ldi	r18, 0x14	; 20
    2b86:	fc 01       	movw	r30, r24
    2b88:	20 83       	st	Z, r18
          PHY_DataReq(frame->data, frame->size);
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8e:	fc 01       	movw	r30, r24
    2b90:	21 81       	ldd	r18, Z+1	; 0x01
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	9a 81       	ldd	r25, Y+2	; 0x02
    2b96:	02 96       	adiw	r24, 0x02	; 2
    2b98:	62 2f       	mov	r22, r18
    2b9a:	0e 94 23 04 	call	0x846	; 0x846 <PHY_DataReq>
          nwkIb.lock++;
    2b9e:	80 91 af 0c 	lds	r24, 0x0CAF
    2ba2:	90 91 b0 0c 	lds	r25, 0x0CB0
    2ba6:	01 96       	adiw	r24, 0x01	; 1
    2ba8:	90 93 b0 0c 	sts	0x0CB0, r25
    2bac:	80 93 af 0c 	sts	0x0CAF, r24
        }
      } break;
    2bb0:	5d c0       	rjmp	.+186    	; 0x2c6c <nwkTxTaskHandler+0x18a>
    2bb2:	5c c0       	rjmp	.+184    	; 0x2c6c <nwkTxTaskHandler+0x18a>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb8:	8d 57       	subi	r24, 0x7D	; 125
    2bba:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	80 81       	ld	r24, Z
    2bc0:	88 23       	and	r24, r24
    2bc2:	61 f5       	brne	.+88     	; 0x2c1c <nwkTxTaskHandler+0x13a>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	fc 01       	movw	r30, r24
    2bca:	25 85       	ldd	r18, Z+13	; 0x0d
    2bcc:	36 85       	ldd	r19, Z+14	; 0x0e
    2bce:	80 91 89 0c 	lds	r24, 0x0C89
    2bd2:	90 91 8a 0c 	lds	r25, 0x0C8A
    2bd6:	28 17       	cp	r18, r24
    2bd8:	39 07       	cpc	r19, r25
    2bda:	d1 f4       	brne	.+52     	; 0x2c10 <nwkTxTaskHandler+0x12e>
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	fc 01       	movw	r30, r24
    2be2:	83 85       	ldd	r24, Z+11	; 0x0b
    2be4:	81 70       	andi	r24, 0x01	; 1
    2be6:	88 23       	and	r24, r24
    2be8:	99 f0       	breq	.+38     	; 0x2c10 <nwkTxTaskHandler+0x12e>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	9a 81       	ldd	r25, Y+2	; 0x02
    2bee:	26 e1       	ldi	r18, 0x16	; 22
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	20 83       	st	Z, r18
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	8c 57       	subi	r24, 0x7C	; 124
    2bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfc:	25 e1       	ldi	r18, 0x15	; 21
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	fc 01       	movw	r30, r24
    2c02:	31 83       	std	Z+1, r19	; 0x01
    2c04:	20 83       	st	Z, r18
            SYS_TimerStart(&nwkTxAckWaitTimer);
    2c06:	86 eb       	ldi	r24, 0xB6	; 182
    2c08:	9b e0       	ldi	r25, 0x0B	; 11
    2c0a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SYS_TimerStart>
    2c0e:	0c c0       	rjmp	.+24     	; 0x2c28 <nwkTxTaskHandler+0x146>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	9a 81       	ldd	r25, Y+2	; 0x02
    2c14:	27 e1       	ldi	r18, 0x17	; 23
    2c16:	fc 01       	movw	r30, r24
    2c18:	20 83       	st	Z, r18
    2c1a:	06 c0       	rjmp	.+12     	; 0x2c28 <nwkTxTaskHandler+0x146>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c20:	27 e1       	ldi	r18, 0x17	; 23
    2c22:	fc 01       	movw	r30, r24
    2c24:	20 83       	st	Z, r18
	}
      } break;
    2c26:	22 c0       	rjmp	.+68     	; 0x2c6c <nwkTxTaskHandler+0x18a>
    2c28:	21 c0       	rjmp	.+66     	; 0x2c6c <nwkTxTaskHandler+0x18a>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	89 57       	subi	r24, 0x79	; 121
    2c38:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	80 81       	ld	r24, Z
    2c3e:	91 81       	ldd	r25, Z+1	; 0x01
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	29 f4       	brne	.+10     	; 0x2c4e <nwkTxTaskHandler+0x16c>
          nwkFrameFree(frame);
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	9a 81       	ldd	r25, Y+2	; 0x02
    2c48:	0e 94 10 09 	call	0x1220	; 0x1220 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
      } break;
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <nwkTxTaskHandler+0x18a>
        nwkRouteFrameSent(frame);
#endif
        if (NULL == frame->tx.confirm)
          nwkFrameFree(frame);
        else
          frame->tx.confirm(frame);
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	9a 81       	ldd	r25, Y+2	; 0x02
    2c52:	89 57       	subi	r24, 0x79	; 121
    2c54:	9f 4f       	sbci	r25, 0xFF	; 255
    2c56:	fc 01       	movw	r30, r24
    2c58:	20 81       	ld	r18, Z
    2c5a:	31 81       	ldd	r19, Z+1	; 0x01
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c60:	f9 01       	movw	r30, r18
    2c62:	19 95       	eicall
      } break;
    2c64:	03 c0       	rjmp	.+6      	; 0x2c6c <nwkTxTaskHandler+0x18a>
          nwkIb.lock++;
        }
      } break;

      case NWK_TX_STATE_WAIT_CONF:
        break;
    2c66:	00 00       	nop
    2c68:	01 c0       	rjmp	.+2      	; 0x2c6c <nwkTxTaskHandler+0x18a>
          frame->state = NWK_TX_STATE_CONFIRM;
	}
      } break;

      case NWK_TX_STATE_WAIT_ACK:
        break;
    2c6a:	00 00       	nop
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c70:	0e 94 2a 09 	call	0x1254	; 0x1254 <nwkFrameNext>
    2c74:	9a 83       	std	Y+2, r25	; 0x02
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	09 f0       	breq	.+2      	; 0x2c82 <nwkTxTaskHandler+0x1a0>
    2c80:	39 cf       	rjmp	.-398    	; 0x2af4 <nwkTxTaskHandler+0x12>

      default:
        break;
    };
  }
}
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	08 95       	ret

00002c8c <halSleepSynchronize>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
    2c8c:	cf 93       	push	r28
    2c8e:	df 93       	push	r29
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
    2c94:	00 00       	nop
    2c96:	86 eb       	ldi	r24, 0xB6	; 182
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	80 81       	ld	r24, Z
    2c9e:	88 2f       	mov	r24, r24
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	8f 71       	andi	r24, 0x1F	; 31
    2ca4:	99 27       	eor	r25, r25
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	b1 f7       	brne	.-20     	; 0x2c96 <halSleepSynchronize+0xa>
}
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	08 95       	ret

00002cb0 <HAL_Sleep>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Sleep(uint32_t interval)
{
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	61 97       	sbiw	r28, 0x11	; 17
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	6a 87       	std	Y+10, r22	; 0x0a
    2cc6:	7b 87       	std	Y+11, r23	; 0x0b
    2cc8:	8c 87       	std	Y+12, r24	; 0x0c
    2cca:	9d 87       	std	Y+13, r25	; 0x0d
  uint32_t ticks;
  uint16_t integer;
  uint8_t fractional;

  ticks = (interval * PRESCALED_CLOCK) / 1000ul;
    2ccc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cce:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cd0:	ac 85       	ldd	r26, Y+12	; 0x0c
    2cd2:	bd 85       	ldd	r27, Y+13	; 0x0d
    2cd4:	88 0f       	add	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	aa 1f       	adc	r26, r26
    2cda:	bb 1f       	adc	r27, r27
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	aa 1f       	adc	r26, r26
    2ce2:	bb 1f       	adc	r27, r27
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	aa 1f       	adc	r26, r26
    2cea:	bb 1f       	adc	r27, r27
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	aa 1f       	adc	r26, r26
    2cf2:	bb 1f       	adc	r27, r27
    2cf4:	88 0f       	add	r24, r24
    2cf6:	99 1f       	adc	r25, r25
    2cf8:	aa 1f       	adc	r26, r26
    2cfa:	bb 1f       	adc	r27, r27
    2cfc:	28 ee       	ldi	r18, 0xE8	; 232
    2cfe:	33 e0       	ldi	r19, 0x03	; 3
    2d00:	40 e0       	ldi	r20, 0x00	; 0
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__udivmodsi4>
    2d0c:	da 01       	movw	r26, r20
    2d0e:	c9 01       	movw	r24, r18
    2d10:	8c 83       	std	Y+4, r24	; 0x04
    2d12:	9d 83       	std	Y+5, r25	; 0x05
    2d14:	ae 83       	std	Y+6, r26	; 0x06
    2d16:	bf 83       	std	Y+7, r27	; 0x07
  if (0 == ticks)
    2d18:	8c 81       	ldd	r24, Y+4	; 0x04
    2d1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d1c:	ae 81       	ldd	r26, Y+6	; 0x06
    2d1e:	bf 81       	ldd	r27, Y+7	; 0x07
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	a1 05       	cpc	r26, r1
    2d24:	b1 05       	cpc	r27, r1
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <HAL_Sleep+0x7a>
    return;
    2d28:	98 c0       	rjmp	.+304    	; 0x2e5a <HAL_Sleep+0x1aa>

  integer = ticks >> 8;
    2d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d2e:	ae 81       	ldd	r26, Y+6	; 0x06
    2d30:	bf 81       	ldd	r27, Y+7	; 0x07
    2d32:	89 2f       	mov	r24, r25
    2d34:	9a 2f       	mov	r25, r26
    2d36:	ab 2f       	mov	r26, r27
    2d38:	bb 27       	eor	r27, r27
    2d3a:	9a 83       	std	Y+2, r25	; 0x02
    2d3c:	89 83       	std	Y+1, r24	; 0x01
  fractional = ticks & 0xff;
    2d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d40:	8b 83       	std	Y+3, r24	; 0x03

  TIMSK2 = 0;
    2d42:	80 e7       	ldi	r24, 0x70	; 112
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	fc 01       	movw	r30, r24
    2d48:	10 82       	st	Z, r1
  ASSR |= (1 << AS2);
    2d4a:	86 eb       	ldi	r24, 0xB6	; 182
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	26 eb       	ldi	r18, 0xB6	; 182
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	f9 01       	movw	r30, r18
    2d54:	20 81       	ld	r18, Z
    2d56:	20 62       	ori	r18, 0x20	; 32
    2d58:	fc 01       	movw	r30, r24
    2d5a:	20 83       	st	Z, r18
  TCCR2A = 0;
    2d5c:	80 eb       	ldi	r24, 0xB0	; 176
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	fc 01       	movw	r30, r24
    2d62:	10 82       	st	Z, r1
  TCCR2B = 0;
    2d64:	81 eb       	ldi	r24, 0xB1	; 177
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	fc 01       	movw	r30, r24
    2d6a:	10 82       	st	Z, r1
  TCNT2 = 0;
    2d6c:	82 eb       	ldi	r24, 0xB2	; 178
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	fc 01       	movw	r30, r24
    2d72:	10 82       	st	Z, r1
  halSleepSynchronize();
    2d74:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <halSleepSynchronize>

  TIFR2 = (1 << OCF2B) | (1 << OCF2A) | (1 << TOV2);
    2d78:	87 e3       	ldi	r24, 0x37	; 55
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	27 e0       	ldi	r18, 0x07	; 7
    2d7e:	fc 01       	movw	r30, r24
    2d80:	20 83       	st	Z, r18
  TCCR2B = ((1 << CS20) | (1 << CS21) | (1 << CS22));   // clk/1024
    2d82:	81 eb       	ldi	r24, 0xB1	; 177
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	27 e0       	ldi	r18, 0x07	; 7
    2d88:	fc 01       	movw	r30, r24
    2d8a:	20 83       	st	Z, r18

  while (1)
  {
    halSleepTimerEvent = false;
    2d8c:	10 92 d0 0b 	sts	0x0BD0, r1

    if (integer > 0)
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	9a 81       	ldd	r25, Y+2	; 0x02
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	31 f0       	breq	.+12     	; 0x2da4 <HAL_Sleep+0xf4>
      OCR2A = 0xff;
    2d98:	83 eb       	ldi	r24, 0xB3	; 179
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	2f ef       	ldi	r18, 0xFF	; 255
    2d9e:	fc 01       	movw	r30, r24
    2da0:	20 83       	st	Z, r18
    2da2:	28 c0       	rjmp	.+80     	; 0x2df4 <HAL_Sleep+0x144>
    else if (fractional > 0)
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	88 23       	and	r24, r24
    2da8:	31 f0       	breq	.+12     	; 0x2db6 <HAL_Sleep+0x106>
      OCR2A = fractional;
    2daa:	83 eb       	ldi	r24, 0xB3	; 179
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	2b 81       	ldd	r18, Y+3	; 0x03
    2db0:	fc 01       	movw	r30, r24
    2db2:	20 83       	st	Z, r18
    2db4:	1f c0       	rjmp	.+62     	; 0x2df4 <HAL_Sleep+0x144>
    else
    {
      halSleepSynchronize();
    2db6:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <halSleepSynchronize>
      TIMSK2 = 0;
    2dba:	80 e7       	ldi	r24, 0x70	; 112
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	10 82       	st	Z, r1
      TCCR2B = 0;
    2dc2:	81 eb       	ldi	r24, 0xB1	; 177
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	10 82       	st	Z, r1
      GTCCR |= (1 << PSRASY);
    2dca:	83 e4       	ldi	r24, 0x43	; 67
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	23 e4       	ldi	r18, 0x43	; 67
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	f9 01       	movw	r30, r18
    2dd4:	20 81       	ld	r18, Z
    2dd6:	22 60       	ori	r18, 0x02	; 2
    2dd8:	fc 01       	movw	r30, r24
    2dda:	20 83       	st	Z, r18
      halSleepSynchronize();
    2ddc:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <halSleepSynchronize>
      ASSR &= ~(1 << AS2);
    2de0:	86 eb       	ldi	r24, 0xB6	; 182
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	26 eb       	ldi	r18, 0xB6	; 182
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	f9 01       	movw	r30, r18
    2dea:	20 81       	ld	r18, Z
    2dec:	2f 7d       	andi	r18, 0xDF	; 223
    2dee:	fc 01       	movw	r30, r24
    2df0:	20 83       	st	Z, r18
      return;
    2df2:	33 c0       	rjmp	.+102    	; 0x2e5a <HAL_Sleep+0x1aa>
    }

    TIMSK2 |= (1 << OCIE2A);
    2df4:	80 e7       	ldi	r24, 0x70	; 112
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	20 e7       	ldi	r18, 0x70	; 112
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	f9 01       	movw	r30, r18
    2dfe:	20 81       	ld	r18, Z
    2e00:	22 60       	ori	r18, 0x02	; 2
    2e02:	fc 01       	movw	r30, r24
    2e04:	20 83       	st	Z, r18

    halSleepSynchronize();
    2e06:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <halSleepSynchronize>

    SMCR = (1 << SM1) | (1 << SM0) | (1 << SE); // power-save
    2e0a:	83 e5       	ldi	r24, 0x53	; 83
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	27 e0       	ldi	r18, 0x07	; 7
    2e10:	fc 01       	movw	r30, r24
    2e12:	20 83       	st	Z, r18
    asm("sleep");
    2e14:	88 95       	sleep
    SMCR = 0;
    2e16:	83 e5       	ldi	r24, 0x53	; 83
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	10 82       	st	Z, r1

    bool event;

    ATOMIC_SECTION_ENTER
    2e1e:	8f e5       	ldi	r24, 0x5F	; 95
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	fc 01       	movw	r30, r24
    2e24:	80 81       	ld	r24, Z
    2e26:	88 87       	std	Y+8, r24	; 0x08
    2e28:	f8 94       	cli
      event = halSleepTimerEvent;
    2e2a:	80 91 d0 0b 	lds	r24, 0x0BD0
    2e2e:	89 87       	std	Y+9, r24	; 0x09
    ATOMIC_SECTION_LEAVE
    2e30:	8f e5       	ldi	r24, 0x5F	; 95
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	28 85       	ldd	r18, Y+8	; 0x08
    2e36:	fc 01       	movw	r30, r24
    2e38:	20 83       	st	Z, r18

    if (event)
    2e3a:	89 85       	ldd	r24, Y+9	; 0x09
    2e3c:	88 23       	and	r24, r24
    2e3e:	61 f0       	breq	.+24     	; 0x2e58 <HAL_Sleep+0x1a8>
    {
      if (integer > 0)
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	9a 81       	ldd	r25, Y+2	; 0x02
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	31 f0       	breq	.+12     	; 0x2e54 <HAL_Sleep+0x1a4>
        integer--;
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	9a 83       	std	Y+2, r25	; 0x02
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	02 c0       	rjmp	.+4      	; 0x2e58 <HAL_Sleep+0x1a8>
      else
        fractional = 0;
    2e54:	1b 82       	std	Y+3, r1	; 0x03
    }
    else
    {
      // wakeup from some other source
    }
  }
    2e56:	9a cf       	rjmp	.-204    	; 0x2d8c <HAL_Sleep+0xdc>
    2e58:	99 cf       	rjmp	.-206    	; 0x2d8c <HAL_Sleep+0xdc>
}
    2e5a:	61 96       	adiw	r28, 0x11	; 17
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	08 95       	ret

00002e6c <__vector_13>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    2e6c:	1f 92       	push	r1
    2e6e:	0f 92       	push	r0
    2e70:	00 90 5f 00 	lds	r0, 0x005F
    2e74:	0f 92       	push	r0
    2e76:	11 24       	eor	r1, r1
    2e78:	8f 93       	push	r24
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
  halSleepTimerEvent = true;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	80 93 d0 0b 	sts	0x0BD0, r24
}
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	8f 91       	pop	r24
    2e8e:	0f 90       	pop	r0
    2e90:	00 92 5f 00 	sts	0x005F, r0
    2e94:	0f 90       	pop	r0
    2e96:	1f 90       	pop	r1
    2e98:	18 95       	reti

00002e9a <HAL_UartInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    2ea2:	2c 97       	sbiw	r28, 0x0c	; 12
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	6d 83       	std	Y+5, r22	; 0x05
    2eb0:	7e 83       	std	Y+6, r23	; 0x06
    2eb2:	8f 83       	std	Y+7, r24	; 0x07
    2eb4:	98 87       	std	Y+8, r25	; 0x08
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
    2eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eba:	af 81       	ldd	r26, Y+7	; 0x07
    2ebc:	b8 85       	ldd	r27, Y+8	; 0x08
    2ebe:	88 0f       	add	r24, r24
    2ec0:	99 1f       	adc	r25, r25
    2ec2:	aa 1f       	adc	r26, r26
    2ec4:	bb 1f       	adc	r27, r27
    2ec6:	88 0f       	add	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	aa 1f       	adc	r26, r26
    2ecc:	bb 1f       	adc	r27, r27
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	aa 1f       	adc	r26, r26
    2ed4:	bb 1f       	adc	r27, r27
    2ed6:	88 0f       	add	r24, r24
    2ed8:	99 1f       	adc	r25, r25
    2eda:	aa 1f       	adc	r26, r26
    2edc:	bb 1f       	adc	r27, r27
    2ede:	9c 01       	movw	r18, r24
    2ee0:	ad 01       	movw	r20, r26
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	94 e2       	ldi	r25, 0x24	; 36
    2ee6:	a4 ef       	ldi	r26, 0xF4	; 244
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	bc 01       	movw	r22, r24
    2eec:	cd 01       	movw	r24, r26
    2eee:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__udivmodsi4>
    2ef2:	da 01       	movw	r26, r20
    2ef4:	c9 01       	movw	r24, r18
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	a1 09       	sbc	r26, r1
    2efa:	b1 09       	sbc	r27, r1
    2efc:	89 83       	std	Y+1, r24	; 0x01
    2efe:	9a 83       	std	Y+2, r25	; 0x02
    2f00:	ab 83       	std	Y+3, r26	; 0x03
    2f02:	bc 83       	std	Y+4, r27	; 0x04

  UBRRxH = (brr >> 8) & 0xff;
    2f04:	2d ec       	ldi	r18, 0xCD	; 205
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0c:	ab 81       	ldd	r26, Y+3	; 0x03
    2f0e:	bc 81       	ldd	r27, Y+4	; 0x04
    2f10:	89 2f       	mov	r24, r25
    2f12:	9a 2f       	mov	r25, r26
    2f14:	ab 2f       	mov	r26, r27
    2f16:	bb 27       	eor	r27, r27
    2f18:	f9 01       	movw	r30, r18
    2f1a:	80 83       	st	Z, r24
  UBRRxL = (brr & 0xff);
    2f1c:	8c ec       	ldi	r24, 0xCC	; 204
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	29 81       	ldd	r18, Y+1	; 0x01
    2f22:	fc 01       	movw	r30, r24
    2f24:	20 83       	st	Z, r18
  UCSRxA = (1 << U2X1);
    2f26:	88 ec       	ldi	r24, 0xC8	; 200
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	22 e0       	ldi	r18, 0x02	; 2
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	20 83       	st	Z, r18
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
    2f30:	89 ec       	ldi	r24, 0xC9	; 201
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	28 e9       	ldi	r18, 0x98	; 152
    2f36:	fc 01       	movw	r30, r24
    2f38:	20 83       	st	Z, r18
  UCSRxC = (3 << UCSZ10);
    2f3a:	8a ec       	ldi	r24, 0xCA	; 202
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	26 e0       	ldi	r18, 0x06	; 6
    2f40:	fc 01       	movw	r30, r24
    2f42:	20 83       	st	Z, r18

  txFifo.data = txData;
    2f44:	8b ed       	ldi	r24, 0xDB	; 219
    2f46:	9b e0       	ldi	r25, 0x0B	; 11
    2f48:	90 93 da 0b 	sts	0x0BDA, r25
    2f4c:	80 93 d9 0b 	sts	0x0BD9, r24
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
    2f50:	80 e5       	ldi	r24, 0x50	; 80
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	90 93 d6 0b 	sts	0x0BD6, r25
    2f58:	80 93 d5 0b 	sts	0x0BD5, r24
  txFifo.bytes = 0;
    2f5c:	10 92 d8 0b 	sts	0x0BD8, r1
    2f60:	10 92 d7 0b 	sts	0x0BD7, r1
  txFifo.head = 0;
    2f64:	10 92 d2 0b 	sts	0x0BD2, r1
    2f68:	10 92 d1 0b 	sts	0x0BD1, r1
  txFifo.tail = 0;
    2f6c:	10 92 d4 0b 	sts	0x0BD4, r1
    2f70:	10 92 d3 0b 	sts	0x0BD3, r1

  rxFifo.data = rxData;
    2f74:	86 e3       	ldi	r24, 0x36	; 54
    2f76:	9c e0       	ldi	r25, 0x0C	; 12
    2f78:	90 93 35 0c 	sts	0x0C35, r25
    2f7c:	80 93 34 0c 	sts	0x0C34, r24
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
    2f80:	80 e5       	ldi	r24, 0x50	; 80
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	90 93 31 0c 	sts	0x0C31, r25
    2f88:	80 93 30 0c 	sts	0x0C30, r24
  rxFifo.bytes = 0;
    2f8c:	10 92 33 0c 	sts	0x0C33, r1
    2f90:	10 92 32 0c 	sts	0x0C32, r1
  rxFifo.head = 0;
    2f94:	10 92 2d 0c 	sts	0x0C2D, r1
    2f98:	10 92 2c 0c 	sts	0x0C2C, r1
  rxFifo.tail = 0;
    2f9c:	10 92 2f 0c 	sts	0x0C2F, r1
    2fa0:	10 92 2e 0c 	sts	0x0C2E, r1

  udrEmpty = true;
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	80 93 87 0c 	sts	0x0C87, r24
  newData = false;
    2faa:	10 92 88 0c 	sts	0x0C88, r1
}
    2fae:	2c 96       	adiw	r28, 0x0c	; 12
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	08 95       	ret

00002fc0 <HAL_UartWriteByte>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
    2fc0:	cf 93       	push	r28
    2fc2:	df 93       	push	r29
    2fc4:	1f 92       	push	r1
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	89 83       	std	Y+1, r24	; 0x01
  if (txFifo.bytes == txFifo.size)
    2fcc:	20 91 d7 0b 	lds	r18, 0x0BD7
    2fd0:	30 91 d8 0b 	lds	r19, 0x0BD8
    2fd4:	80 91 d5 0b 	lds	r24, 0x0BD5
    2fd8:	90 91 d6 0b 	lds	r25, 0x0BD6
    2fdc:	28 17       	cp	r18, r24
    2fde:	39 07       	cpc	r19, r25
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <HAL_UartWriteByte+0x24>
    return;
    2fe2:	2c c0       	rjmp	.+88     	; 0x303c <HAL_UartWriteByte+0x7c>

  txFifo.data[txFifo.tail++] = byte;
    2fe4:	20 91 d9 0b 	lds	r18, 0x0BD9
    2fe8:	30 91 da 0b 	lds	r19, 0x0BDA
    2fec:	80 91 d3 0b 	lds	r24, 0x0BD3
    2ff0:	90 91 d4 0b 	lds	r25, 0x0BD4
    2ff4:	ac 01       	movw	r20, r24
    2ff6:	4f 5f       	subi	r20, 0xFF	; 255
    2ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    2ffa:	50 93 d4 0b 	sts	0x0BD4, r21
    2ffe:	40 93 d3 0b 	sts	0x0BD3, r20
    3002:	82 0f       	add	r24, r18
    3004:	93 1f       	adc	r25, r19
    3006:	29 81       	ldd	r18, Y+1	; 0x01
    3008:	fc 01       	movw	r30, r24
    300a:	20 83       	st	Z, r18
  if (txFifo.tail == txFifo.size)
    300c:	20 91 d3 0b 	lds	r18, 0x0BD3
    3010:	30 91 d4 0b 	lds	r19, 0x0BD4
    3014:	80 91 d5 0b 	lds	r24, 0x0BD5
    3018:	90 91 d6 0b 	lds	r25, 0x0BD6
    301c:	28 17       	cp	r18, r24
    301e:	39 07       	cpc	r19, r25
    3020:	21 f4       	brne	.+8      	; 0x302a <HAL_UartWriteByte+0x6a>
    txFifo.tail = 0;
    3022:	10 92 d4 0b 	sts	0x0BD4, r1
    3026:	10 92 d3 0b 	sts	0x0BD3, r1
  txFifo.bytes++;
    302a:	80 91 d7 0b 	lds	r24, 0x0BD7
    302e:	90 91 d8 0b 	lds	r25, 0x0BD8
    3032:	01 96       	adiw	r24, 0x01	; 1
    3034:	90 93 d8 0b 	sts	0x0BD8, r25
    3038:	80 93 d7 0b 	sts	0x0BD7, r24
}
    303c:	0f 90       	pop	r0
    303e:	df 91       	pop	r29
    3040:	cf 91       	pop	r28
    3042:	08 95       	ret

00003044 <HAL_UartReadByte>:

/*************************************************************************//**
*****************************************************************************/
uint8_t HAL_UartReadByte(void)
{
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	1f 92       	push	r1
    304a:	1f 92       	push	r1
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
    3050:	8f e5       	ldi	r24, 0x5F	; 95
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	fc 01       	movw	r30, r24
    3056:	80 81       	ld	r24, Z
    3058:	89 83       	std	Y+1, r24	; 0x01
    305a:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
    305c:	20 91 34 0c 	lds	r18, 0x0C34
    3060:	30 91 35 0c 	lds	r19, 0x0C35
    3064:	80 91 2c 0c 	lds	r24, 0x0C2C
    3068:	90 91 2d 0c 	lds	r25, 0x0C2D
    306c:	ac 01       	movw	r20, r24
    306e:	4f 5f       	subi	r20, 0xFF	; 255
    3070:	5f 4f       	sbci	r21, 0xFF	; 255
    3072:	50 93 2d 0c 	sts	0x0C2D, r21
    3076:	40 93 2c 0c 	sts	0x0C2C, r20
    307a:	82 0f       	add	r24, r18
    307c:	93 1f       	adc	r25, r19
    307e:	fc 01       	movw	r30, r24
    3080:	80 81       	ld	r24, Z
    3082:	8a 83       	std	Y+2, r24	; 0x02
    if (rxFifo.head == rxFifo.size)
    3084:	20 91 2c 0c 	lds	r18, 0x0C2C
    3088:	30 91 2d 0c 	lds	r19, 0x0C2D
    308c:	80 91 30 0c 	lds	r24, 0x0C30
    3090:	90 91 31 0c 	lds	r25, 0x0C31
    3094:	28 17       	cp	r18, r24
    3096:	39 07       	cpc	r19, r25
    3098:	21 f4       	brne	.+8      	; 0x30a2 <HAL_UartReadByte+0x5e>
      rxFifo.head = 0;
    309a:	10 92 2d 0c 	sts	0x0C2D, r1
    309e:	10 92 2c 0c 	sts	0x0C2C, r1
    rxFifo.bytes--;
    30a2:	80 91 32 0c 	lds	r24, 0x0C32
    30a6:	90 91 33 0c 	lds	r25, 0x0C33
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	90 93 33 0c 	sts	0x0C33, r25
    30b0:	80 93 32 0c 	sts	0x0C32, r24
  ATOMIC_SECTION_LEAVE
    30b4:	8f e5       	ldi	r24, 0x5F	; 95
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	29 81       	ldd	r18, Y+1	; 0x01
    30ba:	fc 01       	movw	r30, r24
    30bc:	20 83       	st	Z, r18
  PRAGMA(diag_default=Pa082);

  return byte;
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
}
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	08 95       	ret

000030ca <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    30ca:	1f 92       	push	r1
    30cc:	0f 92       	push	r0
    30ce:	00 90 5f 00 	lds	r0, 0x005F
    30d2:	0f 92       	push	r0
    30d4:	11 24       	eor	r1, r1
    30d6:	00 90 5b 00 	lds	r0, 0x005B
    30da:	0f 92       	push	r0
    30dc:	2f 93       	push	r18
    30de:	3f 93       	push	r19
    30e0:	8f 93       	push	r24
    30e2:	9f 93       	push	r25
    30e4:	ef 93       	push	r30
    30e6:	ff 93       	push	r31
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
  udrEmpty = true;
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	80 93 87 0c 	sts	0x0C87, r24
  UCSRxB &= ~(1 << UDRIE1);
    30f6:	89 ec       	ldi	r24, 0xC9	; 201
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	29 ec       	ldi	r18, 0xC9	; 201
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	f9 01       	movw	r30, r18
    3100:	20 81       	ld	r18, Z
    3102:	2f 7d       	andi	r18, 0xDF	; 223
    3104:	fc 01       	movw	r30, r24
    3106:	20 83       	st	Z, r18
}
    3108:	df 91       	pop	r29
    310a:	cf 91       	pop	r28
    310c:	ff 91       	pop	r31
    310e:	ef 91       	pop	r30
    3110:	9f 91       	pop	r25
    3112:	8f 91       	pop	r24
    3114:	3f 91       	pop	r19
    3116:	2f 91       	pop	r18
    3118:	0f 90       	pop	r0
    311a:	00 92 5b 00 	sts	0x005B, r0
    311e:	0f 90       	pop	r0
    3120:	00 92 5f 00 	sts	0x005F, r0
    3124:	0f 90       	pop	r0
    3126:	1f 90       	pop	r1
    3128:	18 95       	reti

0000312a <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    312a:	1f 92       	push	r1
    312c:	0f 92       	push	r0
    312e:	00 90 5f 00 	lds	r0, 0x005F
    3132:	0f 92       	push	r0
    3134:	11 24       	eor	r1, r1
    3136:	00 90 5b 00 	lds	r0, 0x005B
    313a:	0f 92       	push	r0
    313c:	2f 93       	push	r18
    313e:	3f 93       	push	r19
    3140:	4f 93       	push	r20
    3142:	5f 93       	push	r21
    3144:	8f 93       	push	r24
    3146:	9f 93       	push	r25
    3148:	ef 93       	push	r30
    314a:	ff 93       	push	r31
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	1f 92       	push	r1
    3152:	1f 92       	push	r1
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    3158:	88 ec       	ldi	r24, 0xC8	; 200
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	fc 01       	movw	r30, r24
    315e:	80 81       	ld	r24, Z
    3160:	89 83       	std	Y+1, r24	; 0x01
  uint8_t byte = UDRx;
    3162:	8e ec       	ldi	r24, 0xCE	; 206
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	fc 01       	movw	r30, r24
    3168:	80 81       	ld	r24, Z
    316a:	8a 83       	std	Y+2, r24	; 0x02

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	88 2f       	mov	r24, r24
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	8c 71       	andi	r24, 0x1C	; 28
    3174:	99 27       	eor	r25, r25
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	d9 f5       	brne	.+118    	; 0x31f0 <__vector_36+0xc6>
  {
    if (rxFifo.bytes == rxFifo.size)
    317a:	20 91 32 0c 	lds	r18, 0x0C32
    317e:	30 91 33 0c 	lds	r19, 0x0C33
    3182:	80 91 30 0c 	lds	r24, 0x0C30
    3186:	90 91 31 0c 	lds	r25, 0x0C31
    318a:	28 17       	cp	r18, r24
    318c:	39 07       	cpc	r19, r25
    318e:	09 f4       	brne	.+2      	; 0x3192 <__vector_36+0x68>
      return;
    3190:	2f c0       	rjmp	.+94     	; 0x31f0 <__vector_36+0xc6>

    rxFifo.data[rxFifo.tail++] = byte;
    3192:	20 91 34 0c 	lds	r18, 0x0C34
    3196:	30 91 35 0c 	lds	r19, 0x0C35
    319a:	80 91 2e 0c 	lds	r24, 0x0C2E
    319e:	90 91 2f 0c 	lds	r25, 0x0C2F
    31a2:	ac 01       	movw	r20, r24
    31a4:	4f 5f       	subi	r20, 0xFF	; 255
    31a6:	5f 4f       	sbci	r21, 0xFF	; 255
    31a8:	50 93 2f 0c 	sts	0x0C2F, r21
    31ac:	40 93 2e 0c 	sts	0x0C2E, r20
    31b0:	82 0f       	add	r24, r18
    31b2:	93 1f       	adc	r25, r19
    31b4:	2a 81       	ldd	r18, Y+2	; 0x02
    31b6:	fc 01       	movw	r30, r24
    31b8:	20 83       	st	Z, r18
    if (rxFifo.tail == rxFifo.size)
    31ba:	20 91 2e 0c 	lds	r18, 0x0C2E
    31be:	30 91 2f 0c 	lds	r19, 0x0C2F
    31c2:	80 91 30 0c 	lds	r24, 0x0C30
    31c6:	90 91 31 0c 	lds	r25, 0x0C31
    31ca:	28 17       	cp	r18, r24
    31cc:	39 07       	cpc	r19, r25
    31ce:	21 f4       	brne	.+8      	; 0x31d8 <__vector_36+0xae>
      rxFifo.tail = 0;
    31d0:	10 92 2f 0c 	sts	0x0C2F, r1
    31d4:	10 92 2e 0c 	sts	0x0C2E, r1
    rxFifo.bytes++;
    31d8:	80 91 32 0c 	lds	r24, 0x0C32
    31dc:	90 91 33 0c 	lds	r25, 0x0C33
    31e0:	01 96       	adiw	r24, 0x01	; 1
    31e2:	90 93 33 0c 	sts	0x0C33, r25
    31e6:	80 93 32 0c 	sts	0x0C32, r24

    newData = true;
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	80 93 88 0c 	sts	0x0C88, r24
  }

  PRAGMA(diag_default=Pa082);
}
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	ff 91       	pop	r31
    31fa:	ef 91       	pop	r30
    31fc:	9f 91       	pop	r25
    31fe:	8f 91       	pop	r24
    3200:	5f 91       	pop	r21
    3202:	4f 91       	pop	r20
    3204:	3f 91       	pop	r19
    3206:	2f 91       	pop	r18
    3208:	0f 90       	pop	r0
    320a:	00 92 5b 00 	sts	0x005B, r0
    320e:	0f 90       	pop	r0
    3210:	00 92 5f 00 	sts	0x005F, r0
    3214:	0f 90       	pop	r0
    3216:	1f 90       	pop	r1
    3218:	18 95       	reti

0000321a <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
    321a:	cf 93       	push	r28
    321c:	df 93       	push	r29
    321e:	00 d0       	rcall	.+0      	; 0x3220 <HAL_UartTaskHandler+0x6>
    3220:	00 d0       	rcall	.+0      	; 0x3222 <HAL_UartTaskHandler+0x8>
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
  if (txFifo.bytes && udrEmpty)
    3226:	80 91 d7 0b 	lds	r24, 0x0BD7
    322a:	90 91 d8 0b 	lds	r25, 0x0BD8
    322e:	00 97       	sbiw	r24, 0x00	; 0
    3230:	09 f4       	brne	.+2      	; 0x3234 <HAL_UartTaskHandler+0x1a>
    3232:	4c c0       	rjmp	.+152    	; 0x32cc <HAL_UartTaskHandler+0xb2>
    3234:	80 91 87 0c 	lds	r24, 0x0C87
    3238:	88 23       	and	r24, r24
    323a:	09 f4       	brne	.+2      	; 0x323e <HAL_UartTaskHandler+0x24>
    323c:	47 c0       	rjmp	.+142    	; 0x32cc <HAL_UartTaskHandler+0xb2>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
    323e:	20 91 d9 0b 	lds	r18, 0x0BD9
    3242:	30 91 da 0b 	lds	r19, 0x0BDA
    3246:	80 91 d1 0b 	lds	r24, 0x0BD1
    324a:	90 91 d2 0b 	lds	r25, 0x0BD2
    324e:	ac 01       	movw	r20, r24
    3250:	4f 5f       	subi	r20, 0xFF	; 255
    3252:	5f 4f       	sbci	r21, 0xFF	; 255
    3254:	50 93 d2 0b 	sts	0x0BD2, r21
    3258:	40 93 d1 0b 	sts	0x0BD1, r20
    325c:	82 0f       	add	r24, r18
    325e:	93 1f       	adc	r25, r19
    3260:	fc 01       	movw	r30, r24
    3262:	80 81       	ld	r24, Z
    3264:	89 83       	std	Y+1, r24	; 0x01
    if (txFifo.head == txFifo.size)
    3266:	20 91 d1 0b 	lds	r18, 0x0BD1
    326a:	30 91 d2 0b 	lds	r19, 0x0BD2
    326e:	80 91 d5 0b 	lds	r24, 0x0BD5
    3272:	90 91 d6 0b 	lds	r25, 0x0BD6
    3276:	28 17       	cp	r18, r24
    3278:	39 07       	cpc	r19, r25
    327a:	21 f4       	brne	.+8      	; 0x3284 <HAL_UartTaskHandler+0x6a>
      txFifo.head = 0;
    327c:	10 92 d2 0b 	sts	0x0BD2, r1
    3280:	10 92 d1 0b 	sts	0x0BD1, r1
    txFifo.bytes--;
    3284:	80 91 d7 0b 	lds	r24, 0x0BD7
    3288:	90 91 d8 0b 	lds	r25, 0x0BD8
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	90 93 d8 0b 	sts	0x0BD8, r25
    3292:	80 93 d7 0b 	sts	0x0BD7, r24

    ATOMIC_SECTION_ENTER
    3296:	8f e5       	ldi	r24, 0x5F	; 95
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	fc 01       	movw	r30, r24
    329c:	80 81       	ld	r24, Z
    329e:	8a 83       	std	Y+2, r24	; 0x02
    32a0:	f8 94       	cli
      UDRx = byte;
    32a2:	8e ec       	ldi	r24, 0xCE	; 206
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	29 81       	ldd	r18, Y+1	; 0x01
    32a8:	fc 01       	movw	r30, r24
    32aa:	20 83       	st	Z, r18
      UCSRxB |= (1 << UDRIE1);
    32ac:	89 ec       	ldi	r24, 0xC9	; 201
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	29 ec       	ldi	r18, 0xC9	; 201
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	f9 01       	movw	r30, r18
    32b6:	20 81       	ld	r18, Z
    32b8:	20 62       	ori	r18, 0x20	; 32
    32ba:	fc 01       	movw	r30, r24
    32bc:	20 83       	st	Z, r18
      udrEmpty = false;
    32be:	10 92 87 0c 	sts	0x0C87, r1
    ATOMIC_SECTION_LEAVE
    32c2:	8f e5       	ldi	r24, 0x5F	; 95
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	2a 81       	ldd	r18, Y+2	; 0x02
    32c8:	fc 01       	movw	r30, r24
    32ca:	20 83       	st	Z, r18

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
    32cc:	8f e5       	ldi	r24, 0x5F	; 95
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	fc 01       	movw	r30, r24
    32d2:	80 81       	ld	r24, Z
    32d4:	8b 83       	std	Y+3, r24	; 0x03
    32d6:	f8 94       	cli
      new = newData;
    32d8:	80 91 88 0c 	lds	r24, 0x0C88
    32dc:	8c 83       	std	Y+4, r24	; 0x04
      newData = false;
    32de:	10 92 88 0c 	sts	0x0C88, r1
      bytes = rxFifo.bytes;
    32e2:	80 91 32 0c 	lds	r24, 0x0C32
    32e6:	90 91 33 0c 	lds	r25, 0x0C33
    32ea:	9e 83       	std	Y+6, r25	; 0x06
    32ec:	8d 83       	std	Y+5, r24	; 0x05
    ATOMIC_SECTION_LEAVE
    32ee:	8f e5       	ldi	r24, 0x5F	; 95
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	2b 81       	ldd	r18, Y+3	; 0x03
    32f4:	fc 01       	movw	r30, r24
    32f6:	20 83       	st	Z, r18

    if (new)
    32f8:	8c 81       	ldd	r24, Y+4	; 0x04
    32fa:	88 23       	and	r24, r24
    32fc:	21 f0       	breq	.+8      	; 0x3306 <HAL_UartTaskHandler+0xec>
      HAL_UartBytesReceived(bytes);
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3300:	9e 81       	ldd	r25, Y+6	; 0x06
    3302:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <HAL_UartBytesReceived>
  }
}
    3306:	26 96       	adiw	r28, 0x06	; 6
    3308:	0f b6       	in	r0, 0x3f	; 63
    330a:	f8 94       	cli
    330c:	de bf       	out	0x3e, r29	; 62
    330e:	0f be       	out	0x3f, r0	; 63
    3310:	cd bf       	out	0x3d, r28	; 61
    3312:	df 91       	pop	r29
    3314:	cf 91       	pop	r28
    3316:	08 95       	ret

00003318 <HAL_UartGetTxFifoBytes>:

//CPHT: Added HAL_UartGetTxFifoBytes to facilitate flushing
uint16_t HAL_UartGetTxFifoBytes(void)
{
    3318:	cf 93       	push	r28
    331a:	df 93       	push	r29
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
	return txFifo.bytes;
    3320:	80 91 d7 0b 	lds	r24, 0x0BD7
    3324:	90 91 d8 0b 	lds	r25, 0x0BD8
}
    3328:	df 91       	pop	r29
    332a:	cf 91       	pop	r28
    332c:	08 95       	ret

0000332e <HAL_UartGetRxFifoBytes>:
//CPHT: Added HAL_UartGetRxFifoBytes to facilitate flushing
uint16_t HAL_UartGetRxFifoBytes(void)
{
    332e:	cf 93       	push	r28
    3330:	df 93       	push	r29
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
	return rxFifo.bytes;
    3336:	80 91 32 0c 	lds	r24, 0x0C32
    333a:	90 91 33 0c 	lds	r25, 0x0C33
}
    333e:	df 91       	pop	r29
    3340:	cf 91       	pop	r28
    3342:	08 95       	ret

00003344 <HAL_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
    3344:	cf 93       	push	r28
    3346:	df 93       	push	r29
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
  MCUSR = 0;
    334c:	84 e5       	ldi	r24, 0x54	; 84
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	fc 01       	movw	r30, r24
    3352:	10 82       	st	Z, r1
  wdt_disable();
    3354:	88 e1       	ldi	r24, 0x18	; 24
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	80 93 60 00 	sts	0x0060, r24
    335e:	10 92 60 00 	sts	0x0060, r1
    3362:	0f be       	out	0x3f, r0	; 63

  CLKPR = 1 << CLKPCE;
    3364:	81 e6       	ldi	r24, 0x61	; 97
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	20 e8       	ldi	r18, 0x80	; 128
    336a:	fc 01       	movw	r30, r24
    336c:	20 83       	st	Z, r18
  CLKPR = 0;
    336e:	81 e6       	ldi	r24, 0x61	; 97
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	fc 01       	movw	r30, r24
    3374:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    3376:	78 94       	sei

  HAL_TimerInit();
    3378:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <HAL_TimerInit>
}
    337c:	df 91       	pop	r29
    337e:	cf 91       	pop	r28
    3380:	08 95       	ret

00003382 <HAL_Delay>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Delay(uint8_t us)
{
    3382:	cf 93       	push	r28
    3384:	df 93       	push	r29
    3386:	1f 92       	push	r1
    3388:	cd b7       	in	r28, 0x3d	; 61
    338a:	de b7       	in	r29, 0x3e	; 62
    338c:	89 83       	std	Y+1, r24	; 0x01
  HAL_TimerDelay(us);
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	88 2f       	mov	r24, r24
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	0e 94 f7 19 	call	0x33ee	; 0x33ee <HAL_TimerDelay>
}
    3398:	0f 90       	pop	r0
    339a:	df 91       	pop	r29
    339c:	cf 91       	pop	r28
    339e:	08 95       	ret

000033a0 <HAL_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
  halTimerIrqCount = 0;
    33a8:	10 92 b1 0c 	sts	0x0CB1, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    33ac:	88 ea       	ldi	r24, 0xA8	; 168
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	20 e1       	ldi	r18, 0x10	; 16
    33b2:	37 e2       	ldi	r19, 0x27	; 39
    33b4:	fc 01       	movw	r30, r24
    33b6:	31 83       	std	Z+1, r19	; 0x01
    33b8:	20 83       	st	Z, r18
  TCCR4B = (1 << WGM12);              // CTC mode
    33ba:	81 ea       	ldi	r24, 0xA1	; 161
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	28 e0       	ldi	r18, 0x08	; 8
    33c0:	fc 01       	movw	r30, r24
    33c2:	20 83       	st	Z, r18
  TCCR4B |= (1 << CS11);              // Prescaler 8
    33c4:	81 ea       	ldi	r24, 0xA1	; 161
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	21 ea       	ldi	r18, 0xA1	; 161
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	f9 01       	movw	r30, r18
    33ce:	20 81       	ld	r18, Z
    33d0:	22 60       	ori	r18, 0x02	; 2
    33d2:	fc 01       	movw	r30, r24
    33d4:	20 83       	st	Z, r18
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    33d6:	82 e7       	ldi	r24, 0x72	; 114
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	22 e7       	ldi	r18, 0x72	; 114
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	f9 01       	movw	r30, r18
    33e0:	20 81       	ld	r18, Z
    33e2:	22 60       	ori	r18, 0x02	; 2
    33e4:	fc 01       	movw	r30, r24
    33e6:	20 83       	st	Z, r18
}
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	08 95       	ret

000033ee <HAL_TimerDelay>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerDelay(uint16_t us)
{
    33ee:	cf 93       	push	r28
    33f0:	df 93       	push	r29
    33f2:	1f 92       	push	r1
    33f4:	1f 92       	push	r1
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
    33fa:	9a 83       	std	Y+2, r25	; 0x02
    33fc:	89 83       	std	Y+1, r24	; 0x01
  PRAGMA(diag_suppress=Pa082);

  OCR4B = TCNT4 + us;
    33fe:	8a ea       	ldi	r24, 0xAA	; 170
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	24 ea       	ldi	r18, 0xA4	; 164
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	f9 01       	movw	r30, r18
    3408:	40 81       	ld	r20, Z
    340a:	51 81       	ldd	r21, Z+1	; 0x01
    340c:	29 81       	ldd	r18, Y+1	; 0x01
    340e:	3a 81       	ldd	r19, Y+2	; 0x02
    3410:	24 0f       	add	r18, r20
    3412:	35 1f       	adc	r19, r21
    3414:	fc 01       	movw	r30, r24
    3416:	31 83       	std	Z+1, r19	; 0x01
    3418:	20 83       	st	Z, r18
  if (OCR4B > OCR4A)
    341a:	8a ea       	ldi	r24, 0xAA	; 170
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	fc 01       	movw	r30, r24
    3420:	20 81       	ld	r18, Z
    3422:	31 81       	ldd	r19, Z+1	; 0x01
    3424:	88 ea       	ldi	r24, 0xA8	; 168
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	fc 01       	movw	r30, r24
    342a:	80 81       	ld	r24, Z
    342c:	91 81       	ldd	r25, Z+1	; 0x01
    342e:	82 17       	cp	r24, r18
    3430:	93 07       	cpc	r25, r19
    3432:	98 f4       	brcc	.+38     	; 0x345a <HAL_TimerDelay+0x6c>
    OCR4B -= OCR4A;
    3434:	8a ea       	ldi	r24, 0xAA	; 170
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	2a ea       	ldi	r18, 0xAA	; 170
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	f9 01       	movw	r30, r18
    343e:	40 81       	ld	r20, Z
    3440:	51 81       	ldd	r21, Z+1	; 0x01
    3442:	28 ea       	ldi	r18, 0xA8	; 168
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	f9 01       	movw	r30, r18
    3448:	20 81       	ld	r18, Z
    344a:	31 81       	ldd	r19, Z+1	; 0x01
    344c:	ba 01       	movw	r22, r20
    344e:	62 1b       	sub	r22, r18
    3450:	73 0b       	sbc	r23, r19
    3452:	9b 01       	movw	r18, r22
    3454:	fc 01       	movw	r30, r24
    3456:	31 83       	std	Z+1, r19	; 0x01
    3458:	20 83       	st	Z, r18

  TIFR4 = (1 << OCF4B);
    345a:	89 e3       	ldi	r24, 0x39	; 57
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	24 e0       	ldi	r18, 0x04	; 4
    3460:	fc 01       	movw	r30, r24
    3462:	20 83       	st	Z, r18
  while (0 == (TIFR4 & (1 << OCF4B)));
    3464:	00 00       	nop
    3466:	89 e3       	ldi	r24, 0x39	; 57
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	fc 01       	movw	r30, r24
    346c:	80 81       	ld	r24, Z
    346e:	88 2f       	mov	r24, r24
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	84 70       	andi	r24, 0x04	; 4
    3474:	99 27       	eor	r25, r25
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	b1 f3       	breq	.-20     	; 0x3466 <HAL_TimerDelay+0x78>

  PRAGMA(diag_default=Pa082);
}
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	08 95       	ret

00003484 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    3484:	1f 92       	push	r1
    3486:	0f 92       	push	r0
    3488:	00 90 5f 00 	lds	r0, 0x005F
    348c:	0f 92       	push	r0
    348e:	11 24       	eor	r1, r1
    3490:	8f 93       	push	r24
    3492:	cf 93       	push	r28
    3494:	df 93       	push	r29
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
  halTimerIrqCount++;
    349a:	80 91 b1 0c 	lds	r24, 0x0CB1
    349e:	8f 5f       	subi	r24, 0xFF	; 255
    34a0:	80 93 b1 0c 	sts	0x0CB1, r24
}
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	8f 91       	pop	r24
    34aa:	0f 90       	pop	r0
    34ac:	00 92 5f 00 	sts	0x005F, r0
    34b0:	0f 90       	pop	r0
    34b2:	1f 90       	pop	r1
    34b4:	18 95       	reti

000034b6 <HAL_UartBytesReceived>:

typedef bool (*appDataInd_ptr_t)(NWK_DataInd_t *ind);
static bool appDataInd(NWK_DataInd_t *ind);

void HAL_UartBytesReceived(uint16_t bytes)
{
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	1f 92       	push	r1
    34bc:	1f 92       	push	r1
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	9a 83       	std	Y+2, r25	; 0x02
    34c4:	89 83       	std	Y+1, r24	; 0x01

}
    34c6:	0f 90       	pop	r0
    34c8:	0f 90       	pop	r0
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	08 95       	ret

000034d0 <APP_TaskHandler>:

static void APP_TaskHandler(void)
{
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62

}
    34d8:	df 91       	pop	r29
    34da:	cf 91       	pop	r28
    34dc:	08 95       	ret

000034de <appDataInd>:

static bool appDataInd(NWK_DataInd_t *ind)
{
    34de:	cf 93       	push	r28
    34e0:	df 93       	push	r29
    34e2:	00 d0       	rcall	.+0      	; 0x34e4 <appDataInd+0x6>
    34e4:	1f 92       	push	r1
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	9c 83       	std	Y+4, r25	; 0x04
    34ec:	8b 83       	std	Y+3, r24	; 0x03
    34ee:	1a 82       	std	Y+2, r1	; 0x02

/*************************************************************************//**
*****************************************************************************/
INLINE void HAL_LedToggle(uint8_t i)
{
  if (0 == i)
    34f0:	8a 81       	ldd	r24, Y+2	; 0x02
    34f2:	88 23       	and	r24, r24
    34f4:	59 f4       	brne	.+22     	; 0x350c <appDataInd+0x2e>
  HAL_GPIO_PIN(LED0, B, 4);
  HAL_GPIO_PIN(LED1, B, 5); // Not on the board
  HAL_GPIO_PIN(LED2, B, 6); // Not on the board

#elif defined(PLATFORM_BITSTORM_ZB_B)
  HAL_GPIO_PIN(LED0, D, 6);
    34f6:	8b e2       	ldi	r24, 0x2B	; 43
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	2b e2       	ldi	r18, 0x2B	; 43
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	f9 01       	movw	r30, r18
    3500:	30 81       	ld	r19, Z
    3502:	20 e4       	ldi	r18, 0x40	; 64
    3504:	23 27       	eor	r18, r19
    3506:	fc 01       	movw	r30, r24
    3508:	20 83       	st	Z, r18
    350a:	1b c0       	rjmp	.+54     	; 0x3542 <appDataInd+0x64>
*****************************************************************************/
INLINE void HAL_LedToggle(uint8_t i)
{
  if (0 == i)
    HAL_GPIO_LED0_toggle();
  else if (1 == i)
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	81 30       	cpi	r24, 0x01	; 1
    3510:	59 f4       	brne	.+22     	; 0x3528 <appDataInd+0x4a>
  HAL_GPIO_PIN(LED1, B, 5); // Not on the board
  HAL_GPIO_PIN(LED2, B, 6); // Not on the board

#elif defined(PLATFORM_BITSTORM_ZB_B)
  HAL_GPIO_PIN(LED0, D, 6);
  HAL_GPIO_PIN(LED1, G, 2);
    3512:	84 e3       	ldi	r24, 0x34	; 52
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	24 e3       	ldi	r18, 0x34	; 52
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	f9 01       	movw	r30, r18
    351c:	30 81       	ld	r19, Z
    351e:	24 e0       	ldi	r18, 0x04	; 4
    3520:	23 27       	eor	r18, r19
    3522:	fc 01       	movw	r30, r24
    3524:	20 83       	st	Z, r18
    3526:	0d c0       	rjmp	.+26     	; 0x3542 <appDataInd+0x64>
{
  if (0 == i)
    HAL_GPIO_LED0_toggle();
  else if (1 == i)
    HAL_GPIO_LED1_toggle();
  else if (2 == i)
    3528:	8a 81       	ldd	r24, Y+2	; 0x02
    352a:	82 30       	cpi	r24, 0x02	; 2
    352c:	51 f4       	brne	.+20     	; 0x3542 <appDataInd+0x64>
  HAL_GPIO_PIN(LED2, B, 6); // Not on the board

#elif defined(PLATFORM_BITSTORM_ZB_B)
  HAL_GPIO_PIN(LED0, D, 6);
  HAL_GPIO_PIN(LED1, G, 2);
  HAL_GPIO_PIN(LED2, E, 2);
    352e:	8e e2       	ldi	r24, 0x2E	; 46
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	2e e2       	ldi	r18, 0x2E	; 46
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	f9 01       	movw	r30, r18
    3538:	30 81       	ld	r19, Z
    353a:	24 e0       	ldi	r18, 0x04	; 4
    353c:	23 27       	eor	r18, r19
    353e:	fc 01       	movw	r30, r24
    3540:	20 83       	st	Z, r18
	HAL_LedToggle(0);

	for (uint8_t i = 0; i < ind->size; i++)
    3542:	19 82       	std	Y+1, r1	; 0x01
    3544:	11 c0       	rjmp	.+34     	; 0x3568 <appDataInd+0x8a>
	{
		HAL_UartWriteByte(ind->data[i]);
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	9c 81       	ldd	r25, Y+4	; 0x04
    354a:	fc 01       	movw	r30, r24
    354c:	27 81       	ldd	r18, Z+7	; 0x07
    354e:	30 85       	ldd	r19, Z+8	; 0x08
    3550:	89 81       	ldd	r24, Y+1	; 0x01
    3552:	88 2f       	mov	r24, r24
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	82 0f       	add	r24, r18
    3558:	93 1f       	adc	r25, r19
    355a:	fc 01       	movw	r30, r24
    355c:	80 81       	ld	r24, Z
    355e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <HAL_UartWriteByte>

static bool appDataInd(NWK_DataInd_t *ind)
{
	HAL_LedToggle(0);

	for (uint8_t i = 0; i < ind->size; i++)
    3562:	89 81       	ldd	r24, Y+1	; 0x01
    3564:	8f 5f       	subi	r24, 0xFF	; 255
    3566:	89 83       	std	Y+1, r24	; 0x01
    3568:	8b 81       	ldd	r24, Y+3	; 0x03
    356a:	9c 81       	ldd	r25, Y+4	; 0x04
    356c:	fc 01       	movw	r30, r24
    356e:	91 85       	ldd	r25, Z+9	; 0x09
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	89 17       	cp	r24, r25
    3574:	40 f3       	brcs	.-48     	; 0x3546 <appDataInd+0x68>
	{
		HAL_UartWriteByte(ind->data[i]);
	}

	return true;
    3576:	81 e0       	ldi	r24, 0x01	; 1
}
    3578:	0f 90       	pop	r0
    357a:	0f 90       	pop	r0
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	08 95       	ret

00003586 <init_nwk>:

void init_nwk()
{
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
	NWK_SetAddr(0x389C);
    358e:	8c e9       	ldi	r24, 0x9C	; 156
    3590:	98 e3       	ldi	r25, 0x38	; 56
    3592:	0e 94 ab 05 	call	0xb56	; 0xb56 <NWK_SetAddr>
	NWK_SetPanId(0x1973);
    3596:	83 e7       	ldi	r24, 0x73	; 115
    3598:	99 e1       	ldi	r25, 0x19	; 25
    359a:	0e 94 c2 05 	call	0xb84	; 0xb84 <NWK_SetPanId>
	PHY_SetChannel(0x16);
    359e:	86 e1       	ldi	r24, 0x16	; 22
    35a0:	0e 94 74 03 	call	0x6e8	; 0x6e8 <PHY_SetChannel>
	PHY_SetTxPower(0);
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <PHY_SetTxPower>
	PHY_SetRxState(true);
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	0e 94 65 03 	call	0x6ca	; 0x6ca <PHY_SetRxState>
	NWK_OpenEndpoint(1, appDataInd);
    35b0:	6f e6       	ldi	r22, 0x6F	; 111
    35b2:	7a e1       	ldi	r23, 0x1A	; 26
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <NWK_OpenEndpoint>
}
    35ba:	df 91       	pop	r29
    35bc:	cf 91       	pop	r28
    35be:	08 95       	ret

000035c0 <main>:

int main(void)
{
    35c0:	cf 93       	push	r28
    35c2:	df 93       	push	r29
    35c4:	1f 92       	push	r1
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
	SYS_Init();
    35ca:	0e 94 c9 00 	call	0x192	; 0x192 <SYS_Init>
	HAL_UartInit(38400);
    35ce:	60 e0       	ldi	r22, 0x00	; 0
    35d0:	76 e9       	ldi	r23, 0x96	; 150
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <HAL_UartInit>
  HAL_GPIO_PIN(LED0, B, 4);
  HAL_GPIO_PIN(LED1, B, 5); // Not on the board
  HAL_GPIO_PIN(LED2, B, 6); // Not on the board

#elif defined(PLATFORM_BITSTORM_ZB_B)
  HAL_GPIO_PIN(LED0, D, 6);
    35da:	8a e2       	ldi	r24, 0x2A	; 42
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	2a e2       	ldi	r18, 0x2A	; 42
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	f9 01       	movw	r30, r18
    35e4:	20 81       	ld	r18, Z
    35e6:	20 64       	ori	r18, 0x40	; 64
    35e8:	fc 01       	movw	r30, r24
    35ea:	20 83       	st	Z, r18
    35ec:	8b e2       	ldi	r24, 0x2B	; 43
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	2b e2       	ldi	r18, 0x2B	; 43
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	f9 01       	movw	r30, r18
    35f6:	20 81       	ld	r18, Z
    35f8:	20 64       	ori	r18, 0x40	; 64
    35fa:	fc 01       	movw	r30, r24
    35fc:	20 83       	st	Z, r18
  HAL_GPIO_PIN(LED1, G, 2);
    35fe:	83 e3       	ldi	r24, 0x33	; 51
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	23 e3       	ldi	r18, 0x33	; 51
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	f9 01       	movw	r30, r18
    3608:	20 81       	ld	r18, Z
    360a:	24 60       	ori	r18, 0x04	; 4
    360c:	fc 01       	movw	r30, r24
    360e:	20 83       	st	Z, r18
    3610:	84 e3       	ldi	r24, 0x34	; 52
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	24 e3       	ldi	r18, 0x34	; 52
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	f9 01       	movw	r30, r18
    361a:	20 81       	ld	r18, Z
    361c:	24 60       	ori	r18, 0x04	; 4
    361e:	fc 01       	movw	r30, r24
    3620:	20 83       	st	Z, r18
  HAL_GPIO_PIN(LED2, E, 2);
    3622:	8d e2       	ldi	r24, 0x2D	; 45
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	2d e2       	ldi	r18, 0x2D	; 45
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	f9 01       	movw	r30, r18
    362c:	20 81       	ld	r18, Z
    362e:	24 60       	ori	r18, 0x04	; 4
    3630:	fc 01       	movw	r30, r24
    3632:	20 83       	st	Z, r18
    3634:	8e e2       	ldi	r24, 0x2E	; 46
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	2e e2       	ldi	r18, 0x2E	; 46
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	f9 01       	movw	r30, r18
    363e:	20 81       	ld	r18, Z
    3640:	24 60       	ori	r18, 0x04	; 4
    3642:	fc 01       	movw	r30, r24
    3644:	20 83       	st	Z, r18
    3646:	19 82       	std	Y+1, r1	; 0x01

/*************************************************************************//**
*****************************************************************************/
INLINE void HAL_LedOff(uint8_t i)
{
  if (0 == i)
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	88 23       	and	r24, r24
    364c:	51 f4       	brne	.+20     	; 0x3662 <main+0xa2>
  HAL_GPIO_PIN(LED0, B, 4);
  HAL_GPIO_PIN(LED1, B, 5); // Not on the board
  HAL_GPIO_PIN(LED2, B, 6); // Not on the board

#elif defined(PLATFORM_BITSTORM_ZB_B)
  HAL_GPIO_PIN(LED0, D, 6);
    364e:	8b e2       	ldi	r24, 0x2B	; 43
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	2b e2       	ldi	r18, 0x2B	; 43
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	f9 01       	movw	r30, r18
    3658:	20 81       	ld	r18, Z
    365a:	20 64       	ori	r18, 0x40	; 64
    365c:	fc 01       	movw	r30, r24
    365e:	20 83       	st	Z, r18
    3660:	19 c0       	rjmp	.+50     	; 0x3694 <main+0xd4>
*****************************************************************************/
INLINE void HAL_LedOff(uint8_t i)
{
  if (0 == i)
    HAL_GPIO_LED0_set();
  else if (1 == i)
    3662:	89 81       	ldd	r24, Y+1	; 0x01
    3664:	81 30       	cpi	r24, 0x01	; 1
    3666:	51 f4       	brne	.+20     	; 0x367c <main+0xbc>
  HAL_GPIO_PIN(LED1, B, 5); // Not on the board
  HAL_GPIO_PIN(LED2, B, 6); // Not on the board

#elif defined(PLATFORM_BITSTORM_ZB_B)
  HAL_GPIO_PIN(LED0, D, 6);
  HAL_GPIO_PIN(LED1, G, 2);
    3668:	84 e3       	ldi	r24, 0x34	; 52
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	24 e3       	ldi	r18, 0x34	; 52
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	f9 01       	movw	r30, r18
    3672:	20 81       	ld	r18, Z
    3674:	24 60       	ori	r18, 0x04	; 4
    3676:	fc 01       	movw	r30, r24
    3678:	20 83       	st	Z, r18
    367a:	0c c0       	rjmp	.+24     	; 0x3694 <main+0xd4>
{
  if (0 == i)
    HAL_GPIO_LED0_set();
  else if (1 == i)
    HAL_GPIO_LED1_set();
  else if (2 == i)
    367c:	89 81       	ldd	r24, Y+1	; 0x01
    367e:	82 30       	cpi	r24, 0x02	; 2
    3680:	49 f4       	brne	.+18     	; 0x3694 <main+0xd4>
  HAL_GPIO_PIN(LED2, B, 6); // Not on the board

#elif defined(PLATFORM_BITSTORM_ZB_B)
  HAL_GPIO_PIN(LED0, D, 6);
  HAL_GPIO_PIN(LED1, G, 2);
  HAL_GPIO_PIN(LED2, E, 2);
    3682:	8e e2       	ldi	r24, 0x2E	; 46
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	2e e2       	ldi	r18, 0x2E	; 46
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	f9 01       	movw	r30, r18
    368c:	20 81       	ld	r18, Z
    368e:	24 60       	ori	r18, 0x04	; 4
    3690:	fc 01       	movw	r30, r24
    3692:	20 83       	st	Z, r18
	HAL_LedInit();
	HAL_LedOff(0);
	init_nwk();
    3694:	0e 94 c3 1a 	call	0x3586	; 0x3586 <init_nwk>
	while (1)
	{
		SYS_TaskHandler();
    3698:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SYS_TaskHandler>
		HAL_UartTaskHandler();
    369c:	0e 94 0d 19 	call	0x321a	; 0x321a <HAL_UartTaskHandler>
		APP_TaskHandler();
    36a0:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <APP_TaskHandler>
	}
    36a4:	f9 cf       	rjmp	.-14     	; 0x3698 <main+0xd8>

000036a6 <__udivmodsi4>:
    36a6:	a1 e2       	ldi	r26, 0x21	; 33
    36a8:	1a 2e       	mov	r1, r26
    36aa:	aa 1b       	sub	r26, r26
    36ac:	bb 1b       	sub	r27, r27
    36ae:	fd 01       	movw	r30, r26
    36b0:	0d c0       	rjmp	.+26     	; 0x36cc <__udivmodsi4_ep>

000036b2 <__udivmodsi4_loop>:
    36b2:	aa 1f       	adc	r26, r26
    36b4:	bb 1f       	adc	r27, r27
    36b6:	ee 1f       	adc	r30, r30
    36b8:	ff 1f       	adc	r31, r31
    36ba:	a2 17       	cp	r26, r18
    36bc:	b3 07       	cpc	r27, r19
    36be:	e4 07       	cpc	r30, r20
    36c0:	f5 07       	cpc	r31, r21
    36c2:	20 f0       	brcs	.+8      	; 0x36cc <__udivmodsi4_ep>
    36c4:	a2 1b       	sub	r26, r18
    36c6:	b3 0b       	sbc	r27, r19
    36c8:	e4 0b       	sbc	r30, r20
    36ca:	f5 0b       	sbc	r31, r21

000036cc <__udivmodsi4_ep>:
    36cc:	66 1f       	adc	r22, r22
    36ce:	77 1f       	adc	r23, r23
    36d0:	88 1f       	adc	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	1a 94       	dec	r1
    36d6:	69 f7       	brne	.-38     	; 0x36b2 <__udivmodsi4_loop>
    36d8:	60 95       	com	r22
    36da:	70 95       	com	r23
    36dc:	80 95       	com	r24
    36de:	90 95       	com	r25
    36e0:	9b 01       	movw	r18, r22
    36e2:	ac 01       	movw	r20, r24
    36e4:	bd 01       	movw	r22, r26
    36e6:	cf 01       	movw	r24, r30
    36e8:	08 95       	ret

000036ea <do_rand>:
    36ea:	8f 92       	push	r8
    36ec:	9f 92       	push	r9
    36ee:	af 92       	push	r10
    36f0:	bf 92       	push	r11
    36f2:	cf 92       	push	r12
    36f4:	df 92       	push	r13
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	cf 93       	push	r28
    36fc:	df 93       	push	r29
    36fe:	ec 01       	movw	r28, r24
    3700:	68 81       	ld	r22, Y
    3702:	79 81       	ldd	r23, Y+1	; 0x01
    3704:	8a 81       	ldd	r24, Y+2	; 0x02
    3706:	9b 81       	ldd	r25, Y+3	; 0x03
    3708:	61 15       	cp	r22, r1
    370a:	71 05       	cpc	r23, r1
    370c:	81 05       	cpc	r24, r1
    370e:	91 05       	cpc	r25, r1
    3710:	21 f4       	brne	.+8      	; 0x371a <do_rand+0x30>
    3712:	64 e2       	ldi	r22, 0x24	; 36
    3714:	79 ed       	ldi	r23, 0xD9	; 217
    3716:	8b e5       	ldi	r24, 0x5B	; 91
    3718:	97 e0       	ldi	r25, 0x07	; 7
    371a:	2d e1       	ldi	r18, 0x1D	; 29
    371c:	33 ef       	ldi	r19, 0xF3	; 243
    371e:	41 e0       	ldi	r20, 0x01	; 1
    3720:	50 e0       	ldi	r21, 0x00	; 0
    3722:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <__divmodsi4>
    3726:	49 01       	movw	r8, r18
    3728:	5a 01       	movw	r10, r20
    372a:	9b 01       	movw	r18, r22
    372c:	ac 01       	movw	r20, r24
    372e:	a7 ea       	ldi	r26, 0xA7	; 167
    3730:	b1 e4       	ldi	r27, 0x41	; 65
    3732:	0e 94 00 1c 	call	0x3800	; 0x3800 <__muluhisi3>
    3736:	6b 01       	movw	r12, r22
    3738:	7c 01       	movw	r14, r24
    373a:	ac ee       	ldi	r26, 0xEC	; 236
    373c:	b4 ef       	ldi	r27, 0xF4	; 244
    373e:	a5 01       	movw	r20, r10
    3740:	94 01       	movw	r18, r8
    3742:	0e 94 0e 1c 	call	0x381c	; 0x381c <__mulohisi3>
    3746:	c6 0e       	add	r12, r22
    3748:	d7 1e       	adc	r13, r23
    374a:	e8 1e       	adc	r14, r24
    374c:	f9 1e       	adc	r15, r25
    374e:	f7 fe       	sbrs	r15, 7
    3750:	06 c0       	rjmp	.+12     	; 0x375e <do_rand+0x74>
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	c8 1a       	sub	r12, r24
    3756:	d1 08       	sbc	r13, r1
    3758:	e1 08       	sbc	r14, r1
    375a:	80 e8       	ldi	r24, 0x80	; 128
    375c:	f8 0a       	sbc	r15, r24
    375e:	c8 82       	st	Y, r12
    3760:	d9 82       	std	Y+1, r13	; 0x01
    3762:	ea 82       	std	Y+2, r14	; 0x02
    3764:	fb 82       	std	Y+3, r15	; 0x03
    3766:	c6 01       	movw	r24, r12
    3768:	9f 77       	andi	r25, 0x7F	; 127
    376a:	df 91       	pop	r29
    376c:	cf 91       	pop	r28
    376e:	ff 90       	pop	r15
    3770:	ef 90       	pop	r14
    3772:	df 90       	pop	r13
    3774:	cf 90       	pop	r12
    3776:	bf 90       	pop	r11
    3778:	af 90       	pop	r10
    377a:	9f 90       	pop	r9
    377c:	8f 90       	pop	r8
    377e:	08 95       	ret

00003780 <rand_r>:
    3780:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <do_rand>

00003784 <rand>:
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	92 e0       	ldi	r25, 0x02	; 2
    3788:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <do_rand>

0000378c <srand>:
    378c:	a0 e0       	ldi	r26, 0x00	; 0
    378e:	b0 e0       	ldi	r27, 0x00	; 0
    3790:	80 93 00 02 	sts	0x0200, r24
    3794:	90 93 01 02 	sts	0x0201, r25
    3798:	a0 93 02 02 	sts	0x0202, r26
    379c:	b0 93 03 02 	sts	0x0203, r27
    37a0:	08 95       	ret

000037a2 <memcpy>:
    37a2:	fb 01       	movw	r30, r22
    37a4:	dc 01       	movw	r26, r24
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <memcpy+0xa>
    37a8:	01 90       	ld	r0, Z+
    37aa:	0d 92       	st	X+, r0
    37ac:	41 50       	subi	r20, 0x01	; 1
    37ae:	50 40       	sbci	r21, 0x00	; 0
    37b0:	d8 f7       	brcc	.-10     	; 0x37a8 <memcpy+0x6>
    37b2:	08 95       	ret

000037b4 <memset>:
    37b4:	dc 01       	movw	r26, r24
    37b6:	01 c0       	rjmp	.+2      	; 0x37ba <memset+0x6>
    37b8:	6d 93       	st	X+, r22
    37ba:	41 50       	subi	r20, 0x01	; 1
    37bc:	50 40       	sbci	r21, 0x00	; 0
    37be:	e0 f7       	brcc	.-8      	; 0x37b8 <memset+0x4>
    37c0:	08 95       	ret

000037c2 <__divmodsi4>:
    37c2:	05 2e       	mov	r0, r21
    37c4:	97 fb       	bst	r25, 7
    37c6:	1e f4       	brtc	.+6      	; 0x37ce <__divmodsi4+0xc>
    37c8:	00 94       	com	r0
    37ca:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <__negsi2>
    37ce:	57 fd       	sbrc	r21, 7
    37d0:	07 d0       	rcall	.+14     	; 0x37e0 <__divmodsi4_neg2>
    37d2:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__udivmodsi4>
    37d6:	07 fc       	sbrc	r0, 7
    37d8:	03 d0       	rcall	.+6      	; 0x37e0 <__divmodsi4_neg2>
    37da:	4e f4       	brtc	.+18     	; 0x37ee <__divmodsi4_exit>
    37dc:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__negsi2>

000037e0 <__divmodsi4_neg2>:
    37e0:	50 95       	com	r21
    37e2:	40 95       	com	r20
    37e4:	30 95       	com	r19
    37e6:	21 95       	neg	r18
    37e8:	3f 4f       	sbci	r19, 0xFF	; 255
    37ea:	4f 4f       	sbci	r20, 0xFF	; 255
    37ec:	5f 4f       	sbci	r21, 0xFF	; 255

000037ee <__divmodsi4_exit>:
    37ee:	08 95       	ret

000037f0 <__negsi2>:
    37f0:	90 95       	com	r25
    37f2:	80 95       	com	r24
    37f4:	70 95       	com	r23
    37f6:	61 95       	neg	r22
    37f8:	7f 4f       	sbci	r23, 0xFF	; 255
    37fa:	8f 4f       	sbci	r24, 0xFF	; 255
    37fc:	9f 4f       	sbci	r25, 0xFF	; 255
    37fe:	08 95       	ret

00003800 <__muluhisi3>:
    3800:	0e 94 13 1c 	call	0x3826	; 0x3826 <__umulhisi3>
    3804:	a5 9f       	mul	r26, r21
    3806:	90 0d       	add	r25, r0
    3808:	b4 9f       	mul	r27, r20
    380a:	90 0d       	add	r25, r0
    380c:	a4 9f       	mul	r26, r20
    380e:	80 0d       	add	r24, r0
    3810:	91 1d       	adc	r25, r1
    3812:	11 24       	eor	r1, r1
    3814:	08 95       	ret

00003816 <__mulshisi3>:
    3816:	b7 ff       	sbrs	r27, 7
    3818:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <__muluhisi3>

0000381c <__mulohisi3>:
    381c:	0e 94 00 1c 	call	0x3800	; 0x3800 <__muluhisi3>
    3820:	82 1b       	sub	r24, r18
    3822:	93 0b       	sbc	r25, r19
    3824:	08 95       	ret

00003826 <__umulhisi3>:
    3826:	a2 9f       	mul	r26, r18
    3828:	b0 01       	movw	r22, r0
    382a:	b3 9f       	mul	r27, r19
    382c:	c0 01       	movw	r24, r0
    382e:	a3 9f       	mul	r26, r19
    3830:	70 0d       	add	r23, r0
    3832:	81 1d       	adc	r24, r1
    3834:	11 24       	eor	r1, r1
    3836:	91 1d       	adc	r25, r1
    3838:	b2 9f       	mul	r27, r18
    383a:	70 0d       	add	r23, r0
    383c:	81 1d       	adc	r24, r1
    383e:	11 24       	eor	r1, r1
    3840:	91 1d       	adc	r25, r1
    3842:	08 95       	ret

00003844 <_exit>:
    3844:	f8 94       	cli

00003846 <__stop_program>:
    3846:	ff cf       	rjmp	.-2      	; 0x3846 <__stop_program>
